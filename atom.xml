<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>darryrzhong</title>
  
  <subtitle>时光，不会辜负每一个平静努力的人</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://darryrzhong.xyz/"/>
  <updated>2019-03-30T16:17:38.823Z</updated>
  <id>http://darryrzhong.xyz/</id>
  
  <author>
    <name>darryrzhong</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Android RxJava：基础介绍与使用</title>
    <link href="http://darryrzhong.xyz/2019/03/31/Android-RxJava%EF%BC%9A%E5%9F%BA%E7%A1%80%E4%BB%8B%E7%BB%8D%E4%B8%8E%E4%BD%BF%E7%94%A8/"/>
    <id>http://darryrzhong.xyz/2019/03/31/Android-RxJava：基础介绍与使用/</id>
    <published>2019-03-30T16:16:41.000Z</published>
    <updated>2019-03-30T16:17:38.823Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><ul><li>官方定义:<code>RxJava</code>是一个反应性扩展的Java VM实现:一个库，用于使用可观察序列组合异步和基于事件的程序</li><li>特点:  <code>Rxjava</code>由于其基于事件流的链式调用、逻辑简洁 &amp; 使用简单的特点，深受各大 Android开发者的欢迎。</li></ul><p><img src="https://upload-images.jianshu.io/upload_images/5549640-7f7a66f6477e24af.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><h2 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h2><ul><li>基于事件流实现异步操作,等同于 Android中的 AsyncTask 、Handler作用</li></ul><h2 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h2><ul><li>基于事件流的链式调用</li><li>逻辑简洁</li><li>实现优雅</li><li>使用简单</li><li>随着程序逻辑的复杂性提高，依然能够保持代码简洁</li></ul><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><ul><li><code>Rxjava</code>原理 基于 一种扩展的观察者模式</li></ul><hr><a id="more"></a> <p>被观察者 （Observable） 通过 订阅（Subscribe） 按顺序发送事件 给观察者 （Observer）， 观察者（Observer） 按顺序接收事件 以及作出对应的响应动作</p><hr><ul><li>被观察者（Observable）      产生事件</li><li>观察者（Observer）    接收事件，并给出响应动作    </li><li>订阅（Subscribe）    连接 被观察者 &amp; 观察者    </li><li>事件（Event）    被观察者 &amp; 观察者 连接的桥梁</li></ul><h2 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h2><h3 id="1-传统方式一"><a href="#1-传统方式一" class="headerlink" title="1.传统方式一"></a>1.传统方式一</h3><ul><li><p>加入依赖</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">implementation &apos;io.reactivex.rxjava2:rxjava:2.2.8&apos;</span><br><span class="line"> implementation &apos;io.reactivex.rxjava2:rxandroid:2.1.1&apos;</span><br></pre></td></tr></table></figure></li><li><p>创建被观察者 observable &amp;产生事件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">//  1. 创建被观察者 Observable 对象</span><br><span class="line">        Observable&lt;Integer&gt; observable = Observable.create(new ObservableOnSubscribe&lt;Integer&gt;() &#123;</span><br><span class="line">            // 2. 在复写的subscribe（）里定义需要发送的事件</span><br><span class="line">            @Override</span><br><span class="line">            public void subscribe(ObservableEmitter&lt;Integer&gt; emitter) throws Exception &#123;</span><br><span class="line">                // 通过 ObservableEmitter类对象产生事件并通知观察者</span><br><span class="line">                // ObservableEmitter类介绍</span><br><span class="line">                    // a. 定义：事件发射器</span><br><span class="line">                    // b. 作用：定义需要发送的事件 &amp; 向观察者发送事件</span><br><span class="line">                emitter.onNext(1);</span><br><span class="line">                emitter.onNext(2);</span><br><span class="line">                emitter.onNext(3);</span><br><span class="line">                emitter.onComplete();//事件完成,可以选择继续发送事件</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br></pre></td></tr></table></figure></li><li><p>创建观察者 （Observer ）并 定义响应事件的行为</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">Observer&lt;Integer&gt; observer = new Observer&lt;Integer&gt;() &#123;</span><br><span class="line">           // 通过复写对应方法来 响应 被观察者</span><br><span class="line">           @Override</span><br><span class="line">           public void onSubscribe(Disposable d) &#123;</span><br><span class="line">               Log.d(TAG, &quot;开始连接&quot;);</span><br><span class="line">           &#125;</span><br><span class="line">           // 默认最先调用复写的 onSubscribe（）</span><br><span class="line"></span><br><span class="line">           @Override</span><br><span class="line">           public void onNext(Integer value) &#123;</span><br><span class="line">               Log.d(TAG, &quot;处理事件&quot;+ value   );</span><br><span class="line">           &#125;</span><br><span class="line"></span><br><span class="line">           @Override</span><br><span class="line">           public void onError(Throwable e) &#123;</span><br><span class="line">               Log.d(TAG, &quot;处理事件&quot;+ value   );</span><br><span class="line">           &#125;</span><br><span class="line">           &#125;</span><br><span class="line"></span><br><span class="line">           @Override</span><br><span class="line">           public void onComplete() &#123;</span><br><span class="line">              Log.d(TAG, &quot;事件完成.不在接收任何事件&quot;  );</span><br><span class="line">           &#125;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;;</span><br></pre></td></tr></table></figure></li><li><p>通过订阅（Subscribe）连接观察者和被观察者</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">observable.subscribe(observer);</span><br></pre></td></tr></table></figure></li></ul><h3 id="2-基于事件流链式方式"><a href="#2-基于事件流链式方式" class="headerlink" title="2.基于事件流链式方式"></a>2.基于事件流链式方式</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">Observable.create(new ObservableOnSubscribe&lt;Integer&gt;() &#123;</span><br><span class="line">        // 1. 创建被观察者 &amp; 生产事件</span><br><span class="line">            @Override</span><br><span class="line">            public void subscribe(ObservableEmitter&lt;Integer&gt; emitter) throws Exception &#123;</span><br><span class="line">                emitter.onNext(1);</span><br><span class="line">                emitter.onNext(2);</span><br><span class="line">                emitter.onNext(3);</span><br><span class="line">                emitter.onComplete();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).subscribe(new Observer&lt;Integer&gt;() &#123;</span><br><span class="line">            // 2. 通过通过订阅（subscribe）连接观察者和被观察者</span><br><span class="line">            // 3. 创建观察者 &amp; 定义响应事件的行为</span><br><span class="line">            @Override</span><br><span class="line">            public void onSubscribe(Disposable d) &#123;</span><br><span class="line">                Log.d(TAG, &quot;开始采用subscribe连接&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">            // 默认最先调用复写的 onSubscribe（）</span><br><span class="line"></span><br><span class="line">            @Override</span><br><span class="line">            public void onNext(Integer value) &#123;</span><br><span class="line">                Log.d(TAG, &quot;处理事件&quot;+ value   );</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            @Override</span><br><span class="line">            public void onError(Throwable e) &#123;</span><br><span class="line">                Log.d(TAG, &quot;处理Error事件,不再接收事件&quot;);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            @Override</span><br><span class="line">            public void onComplete() &#123;</span><br><span class="line">                Log.d(TAG, &quot;处理Complete事件,不再接收事件&quot;);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><ul><li>中断连接关系<br>观察者 无法继续 接收 被观察者的事件，但被观察者还是可以继续发送事件</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">// 主要在观察者 Observer中 实现</span><br><span class="line">        Observer&lt;Integer&gt; observer = new Observer&lt;Integer&gt;() &#123;</span><br><span class="line">            // 1. 定义Disposable类变量</span><br><span class="line">            private Disposable mDisposable;</span><br><span class="line"></span><br><span class="line">            @Override</span><br><span class="line">            public void onSubscribe(Disposable d) &#123;</span><br><span class="line">                Log.d(TAG, &quot;开始采用subscribe连接&quot;);</span><br><span class="line">                // 2. 对Disposable类变量赋值</span><br><span class="line">                mDisposable = d;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            @Override</span><br><span class="line">            public void onNext(Integer value) &#123;</span><br><span class="line">                Log.d(TAG, &quot;对Next事件&quot;+ value +&quot;作出响应&quot;  );</span><br><span class="line">                if (value == 2) &#123;</span><br><span class="line">                    // 设置在接收到第二个事件后切断观察者和被观察者的连接</span><br><span class="line">                    mDisposable.dispose();</span><br><span class="line">                    Log.d(TAG, &quot;已经中段了连接：&quot; + mDisposable.isDisposed());</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            @Override</span><br><span class="line">            public void onError(Throwable e) &#123;</span><br><span class="line">                Log.d(TAG, &quot;处理Error事件&quot;);     //无法收到Error事件了</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            @Override</span><br><span class="line">            public void onComplete() &#123;</span><br><span class="line">                Log.d(TAG, &quot;处理Complete事件&quot;);//无法收到Complete事件了</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul><li><code>Rxjava</code>原理 基于 一种扩展的观察者模式</li></ul><hr><p>被观察者 （Observable） 通过 订阅（Subscribe） 按顺序发送事件 给观察者 （Observer）， 观察者（Observer） 按顺序接收事件 以及作出对应的响应动作</p><hr><ul><li>被观察者（Observable）      产生事件</li><li>观察者（Observer）    接收事件，并给出响应动作    </li><li>订阅（Subscribe）    连接 被观察者 &amp; 观察者    </li><li>事件（Event）    被观察者 &amp; 观察者 连接的桥梁</li></ul><p>至此,Rxjava的基本介绍和使用就完成了,感谢阅读</p><h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章:"></a>参考文章:</h2><p><a href="https://www.jianshu.com/p/a406b94f3188" target="_blank" rel="noopener">Android Rxjava：这是一篇 清晰 &amp; 易懂的Rxjava 入门教程</a></p><p>欢迎关注作者<a href="http://www.darryrzhong.site" target="_blank" rel="noopener">darryrzhong</a>,更多干货等你来拿哟.</p><h3 id="请赏个小红心！因为你的鼓励是我写作的最大动力！"><a href="#请赏个小红心！因为你的鼓励是我写作的最大动力！" class="headerlink" title="请赏个小红心！因为你的鼓励是我写作的最大动力！"></a>请赏个小红心！因为你的鼓励是我写作的最大动力！</h3><blockquote><p>更多精彩文章请关注</p><ul><li><a href="http://www.darryrzhong.xyz" target="_blank" rel="noopener">个人博客:darryrzhong</a></li><li><a href="https://juejin.im/user/5a6c3b19f265da3e49804988" target="_blank" rel="noopener">掘金</a></li><li><a href="https://www.jianshu.com/users/b7fdf53ec0b9/timeline" target="_blank" rel="noopener">简书</a></li><li><a href="https://segmentfault.com/u/darryrzhong_5ac59892a5882/articles" target="_blank" rel="noopener">SegmentFault</a></li><li><a href="https://www.imooc.com/u/6733207" target="_blank" rel="noopener">慕课网手记</a></li></ul></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;官方定义:&lt;code&gt;RxJava&lt;/code&gt;是一个反应性扩展的Java VM实现:一个库，用于使用可观察序列组合异步和基于事件的程序&lt;/li&gt;
&lt;li&gt;特点:  &lt;code&gt;Rxjava&lt;/code&gt;由于其基于事件流的链式调用、逻辑简洁 &amp;amp; 使用简单的特点，深受各大 Android开发者的欢迎。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/5549640-7f7a66f6477e24af.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;image.png&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;功能&quot;&gt;&lt;a href=&quot;#功能&quot; class=&quot;headerlink&quot; title=&quot;功能&quot;&gt;&lt;/a&gt;功能&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;基于事件流实现异步操作,等同于 Android中的 AsyncTask 、Handler作用&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;特点&quot;&gt;&lt;a href=&quot;#特点&quot; class=&quot;headerlink&quot; title=&quot;特点&quot;&gt;&lt;/a&gt;特点&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;基于事件流的链式调用&lt;/li&gt;
&lt;li&gt;逻辑简洁&lt;/li&gt;
&lt;li&gt;实现优雅&lt;/li&gt;
&lt;li&gt;使用简单&lt;/li&gt;
&lt;li&gt;随着程序逻辑的复杂性提高，依然能够保持代码简洁&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;原理&quot;&gt;&lt;a href=&quot;#原理&quot; class=&quot;headerlink&quot; title=&quot;原理&quot;&gt;&lt;/a&gt;原理&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Rxjava&lt;/code&gt;原理 基于 一种扩展的观察者模式&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
    
    </summary>
    
      <category term="Android" scheme="http://darryrzhong.xyz/categories/Android/"/>
    
    
      <category term="RxJava" scheme="http://darryrzhong.xyz/tags/RxJava/"/>
    
  </entry>
  
  <entry>
    <title>Android Fresco图片加载库基础使用详解</title>
    <link href="http://darryrzhong.xyz/2019/03/31/Android-Fresco%E5%9B%BE%E7%89%87%E5%8A%A0%E8%BD%BD%E5%BA%93%E5%9F%BA%E7%A1%80%E4%BD%BF%E7%94%A8%E8%AF%A6%E8%A7%A3/"/>
    <id>http://darryrzhong.xyz/2019/03/31/Android-Fresco图片加载库基础使用详解/</id>
    <published>2019-03-30T16:13:33.000Z</published>
    <updated>2019-03-30T16:14:18.131Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>图片加载在 Android开发项目中是必不可少的，为了降低开发周期和难度，我们经常会选用一些图片加载的开源库，而Android发展到现在图片加载开源库也越来越多了，下面介绍 Fresco开源图片加载库.</p><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p><code>Fresco</code>是由Facebook开源的一个图片加载库,Fresco是一个功能强大的系统，用于在Android应用程序中显示图像.</p><h2 id="功能介绍以及基础使用"><a href="#功能介绍以及基础使用" class="headerlink" title="功能介绍以及基础使用"></a>功能介绍以及基础使用</h2><h3 id="1-配置"><a href="#1-配置" class="headerlink" title="1.配置"></a>1.配置</h3><ul><li><p>在 build.gradle 中配置:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">dependencies &#123;</span><br><span class="line">  // 其他依赖</span><br><span class="line">  compile &apos;com.facebook.fresco:fresco:0.12.0&apos;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>下面的依赖需要根据需求添加：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">dependencies &#123;</span><br><span class="line">  // 在 API &lt; 14 上的机器支持 WebP 时，需要添加</span><br><span class="line">  compile &apos;com.facebook.fresco:animated-base-support:0.12.0&apos;</span><br><span class="line"></span><br><span class="line">  // 支持 GIF 动图，需要添加</span><br><span class="line">  compile &apos;com.facebook.fresco:animated-gif:0.12.0&apos;</span><br><span class="line"></span><br><span class="line">  // 支持 WebP （静态图+动图），需要添加</span><br><span class="line">  compile &apos;com.facebook.fresco:animated-webp:0.12.0&apos;</span><br><span class="line">  compile &apos;com.facebook.fresco:webpsupport:0.12.0&apos;</span><br><span class="line"></span><br><span class="line">  // 仅支持 WebP 静态图，需要添加</span><br><span class="line">  compile &apos;com.facebook.fresco:webpsupport:0.12.0&apos;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><a id="more"></a><ul><li><p>Application中初始化Fresco</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[MyApplication.java]</span><br><span class="line">public class MyApplication extends Application &#123;</span><br><span class="line">@Override</span><br><span class="line">public void onCreate() &#123;</span><br><span class="line">super.onCreate();</span><br><span class="line">Fresco.initialize(this);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>在 AndroidManifest.xml 中指定你的 Application 类</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;manifest</span><br><span class="line">  ...</span><br><span class="line">  &gt;</span><br><span class="line">  &lt;uses-permission android:name=&quot;android.permission.INTERNET&quot; /&gt;</span><br><span class="line">  &lt;application</span><br><span class="line">    ...</span><br><span class="line">    android:label=&quot;@string/app_name&quot;</span><br><span class="line">    android:name=&quot;.MyApplication&quot;</span><br><span class="line">    &gt;</span><br><span class="line">    ...</span><br><span class="line">  &lt;/application&gt;</span><br><span class="line">  ...</span><br><span class="line">&lt;/manifest&gt;</span><br></pre></td></tr></table></figure></li><li><p>添加网络权限</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;uses-permission android:name=&quot;android.permission.INTERNET&quot;/&gt;</span><br></pre></td></tr></table></figure></li><li><p>在xml布局文件中, 加入SimpleDraweeView：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;com.facebook.drawee.view.SimpleDraweeView</span><br><span class="line">    android:id=&quot;@+id/my_image_view&quot;</span><br><span class="line">    android:layout_width=&quot;130dp&quot;</span><br><span class="line">    android:layout_height=&quot;130dp&quot;</span><br><span class="line">    fresco:placeholderImage=&quot;@drawable/my_drawable&quot;</span><br><span class="line">  /&gt;</span><br></pre></td></tr></table></figure></li><li><p>开始加载图片</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Uri uri = Uri.parse(&quot;https://raw.githubusercontent.com/facebook/fresco/gh-pages/static/logo.png&quot;);</span><br><span class="line">SimpleDraweeView draweeView = (SimpleDraweeView) findViewById(R.id.my_image_view);</span><br><span class="line">draweeView.setImageURI(uri);</span><br></pre></td></tr></table></figure></li></ul><p>剩下的，Fresco会替你完成:</p><p>显示占位图直到加载完成；<br>下载图片；<br>缓存图片；<br>图片不再显示时，从内存中移除；<br>等等等等。</p><hr><h3 id="2-基本功能介绍-amp-使用"><a href="#2-基本功能介绍-amp-使用" class="headerlink" title="2.基本功能介绍&amp;使用"></a>2.基本功能介绍&amp;使用</h3><ul><li>可配置的所有选项<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">&lt;com.facebook.drawee.view.SimpleDraweeView</span><br><span class="line">  android:id=&quot;@+id/my_image_view&quot;</span><br><span class="line">  android:layout_width=&quot;20dp&quot;</span><br><span class="line">  android:layout_height=&quot;20dp&quot;</span><br><span class="line">  fresco:fadeDuration=&quot;300&quot;  //淡入淡出动画持续时间</span><br><span class="line">  fresco:actualImageScaleType=&quot;focusCrop&quot;  //实际图片缩放类型</span><br><span class="line">  fresco:placeholderImage=&quot;@color/wait_color&quot;  //占位符</span><br><span class="line">  fresco:placeholderImageScaleType=&quot;fitCenter&quot;  //占位符图片缩放类型</span><br><span class="line">  fresco:failureImage=&quot;@drawable/error&quot;  //加载失败显示图片</span><br><span class="line">  fresco:failureImageScaleType=&quot;centerInside&quot;  //缩放类型</span><br><span class="line">  fresco:retryImage=&quot;@drawable/retrying&quot;  //重新加载图片</span><br><span class="line">  fresco:retryImageScaleType=&quot;centerCrop&quot;  </span><br><span class="line">  fresco:progressBarImage=&quot;@drawable/progress_bar&quot;   //正在加载图片</span><br><span class="line">  fresco:progressBarImageScaleType=&quot;centerInside&quot;   //缩放类型</span><br><span class="line">  fresco:progressBarAutoRotateInterval=&quot;1000&quot;    //正在加载图片自动旋转的时间间隔,直到图片加载成功停止旋转</span><br><span class="line">  fresco:backgroundImage=&quot;@color/blue&quot;    //背景图片</span><br><span class="line">  fresco:overlayImage=&quot;@drawable/watermark&quot;  // 叠加图</span><br><span class="line">  fresco:pressedStateOverlayImage=&quot;@color/red&quot;</span><br><span class="line">  fresco:roundAsCircle=&quot;false&quot; //圆形图</span><br><span class="line">  fresco:roundedCornerRadius=&quot;1dp&quot;   //圆角图&amp;半径</span><br><span class="line">  fresco:roundTopLeft=&quot;true&quot;  //左上角</span><br><span class="line">  fresco:roundTopRight=&quot;false&quot;//右上角圆</span><br><span class="line">  fresco:roundBottomLeft=&quot;false&quot;//左下角</span><br><span class="line">  fresco:roundBottomRight=&quot;true&quot;//右下角</span><br><span class="line">  fresco:roundWithOverlayColor=&quot;@color/corner_color&quot;  // 圆形&amp;圆角边框颜色</span><br><span class="line">  fresco:roundingBorderWidth=&quot;2dp&quot;  // 圆形&amp;圆角边框宽度</span><br><span class="line">  fresco:roundingBorderColor=&quot;@color/border_color&quot;     //圆形或圆角图像底下的叠加颜色</span><br><span class="line">/&gt;</span><br></pre></td></tr></table></figure></li></ul><blockquote><p>必须声明 android:layout_width 和 android:layout_height。如果没有在XML中声明这两个属性，将无法正确加载图像。</p></blockquote><blockquote><p>Drawees 不支持 wrap_content 属性。</p></blockquote><p>所下载的图像可能和占位图尺寸不一致，如果设置出错图或者重试图的话，这些图的尺寸也可能和所下载的图尺寸不一致。</p><p>如果大小不一致，假设使用的是 wrap_content，图像下载完之后，View将会重新layout，改变大小和位置。这将会导致界面跳跃。</p><hr><p>至此,Fresco的基本功能介绍&amp;使用就讲解完毕了,感谢阅读</p><h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><ul><li><a href="https://www.fresco-cn.org/" target="_blank" rel="noopener">官方文档</a></li><li><a href="https://blog.csdn.net/y1scp/article/details/49245535" target="_blank" rel="noopener">Android图片加载神器之Fresco-加载图片基础</a></li></ul><p>欢迎关注作者<a href="http://www.darryrzhong.xyz" target="_blank" rel="noopener">darryrzhong</a>,更多干货等你来拿哟.</p><h3 id="请赏个小红心！因为你的鼓励是我写作的最大动力！"><a href="#请赏个小红心！因为你的鼓励是我写作的最大动力！" class="headerlink" title="请赏个小红心！因为你的鼓励是我写作的最大动力！"></a>请赏个小红心！因为你的鼓励是我写作的最大动力！</h3><blockquote><p>更多精彩文章请关注</p><ul><li><a href="http://www.darryrzhong.xyz" target="_blank" rel="noopener">个人博客:darryrzhong</a></li><li><a href="https://juejin.im/user/5a6c3b19f265da3e49804988" target="_blank" rel="noopener">掘金</a></li><li><a href="https://www.jianshu.com/users/b7fdf53ec0b9/timeline" target="_blank" rel="noopener">简书</a></li><li><a href="https://segmentfault.com/u/darryrzhong_5ac59892a5882/articles" target="_blank" rel="noopener">SegmentFault</a></li><li><a href="https://www.imooc.com/u/6733207" target="_blank" rel="noopener">慕课网手记</a></li></ul></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;图片加载在 Android开发项目中是必不可少的，为了降低开发周期和难度，我们经常会选用一些图片加载的开源库，而Android发展到现在图片加载开源库也越来越多了，下面介绍 Fresco开源图片加载库.&lt;/p&gt;
&lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h2&gt;&lt;p&gt;&lt;code&gt;Fresco&lt;/code&gt;是由Facebook开源的一个图片加载库,Fresco是一个功能强大的系统，用于在Android应用程序中显示图像.&lt;/p&gt;
&lt;h2 id=&quot;功能介绍以及基础使用&quot;&gt;&lt;a href=&quot;#功能介绍以及基础使用&quot; class=&quot;headerlink&quot; title=&quot;功能介绍以及基础使用&quot;&gt;&lt;/a&gt;功能介绍以及基础使用&lt;/h2&gt;&lt;h3 id=&quot;1-配置&quot;&gt;&lt;a href=&quot;#1-配置&quot; class=&quot;headerlink&quot; title=&quot;1.配置&quot;&gt;&lt;/a&gt;1.配置&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;在 build.gradle 中配置:&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;dependencies &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  // 其他依赖&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  compile &amp;apos;com.facebook.fresco:fresco:0.12.0&amp;apos;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;下面的依赖需要根据需求添加：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;dependencies &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  // 在 API &amp;lt; 14 上的机器支持 WebP 时，需要添加&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  compile &amp;apos;com.facebook.fresco:animated-base-support:0.12.0&amp;apos;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  // 支持 GIF 动图，需要添加&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  compile &amp;apos;com.facebook.fresco:animated-gif:0.12.0&amp;apos;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  // 支持 WebP （静态图+动图），需要添加&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  compile &amp;apos;com.facebook.fresco:animated-webp:0.12.0&amp;apos;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  compile &amp;apos;com.facebook.fresco:webpsupport:0.12.0&amp;apos;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  // 仅支持 WebP 静态图，需要添加&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  compile &amp;apos;com.facebook.fresco:webpsupport:0.12.0&amp;apos;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="Android" scheme="http://darryrzhong.xyz/categories/Android/"/>
    
    
      <category term="Fresco" scheme="http://darryrzhong.xyz/tags/Fresco/"/>
    
  </entry>
  
  <entry>
    <title>Android Glide图片加载库基础使用详解</title>
    <link href="http://darryrzhong.xyz/2019/03/31/Android-Glide%E5%9B%BE%E7%89%87%E5%8A%A0%E8%BD%BD%E5%BA%93%E5%9F%BA%E7%A1%80%E4%BD%BF%E7%94%A8%E8%AF%A6%E8%A7%A3/"/>
    <id>http://darryrzhong.xyz/2019/03/31/Android-Glide图片加载库基础使用详解/</id>
    <published>2019-03-30T16:12:23.000Z</published>
    <updated>2019-03-30T16:13:11.006Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>图片加载在 Android开发项目中是必不可少的，为了降低开发周期和难度，我们经常会选用一些图片加载的开源库，而Android发展到现在图片加载开源库也越来越多了，下面介绍 Glide开源图片加载库.</p><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p><code>Glide</code>是由Google开源的一个图片加载库,是一款快速高效的Android开源媒体管理和图像加载框架，它将媒体解码，内存和磁盘缓存以及资源池包装成简单易用的界面.</p><h2 id="功能介绍以及基础使用"><a href="#功能介绍以及基础使用" class="headerlink" title="功能介绍以及基础使用"></a>功能介绍以及基础使用</h2><h3 id="1-配置"><a href="#1-配置" class="headerlink" title="1.配置"></a>1.配置</h3><ul><li><p>在Project的gradle添加依赖</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">repositories &#123;</span><br><span class="line">  mavenCentral()</span><br><span class="line">  google()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>在Module的gradle添加依赖</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">dependencies &#123;</span><br><span class="line">  implementation &apos;com.github.bumptech.glide:glide:4.9.0&apos;</span><br><span class="line">  annotationProcessor &apos;com.github.bumptech.glide:compiler:4.9.0&apos;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><a id="more"></a><ul><li><p>添加网络权限</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;uses-permission android:name=&quot;android.permission.INTERNET&quot;/&gt;</span><br></pre></td></tr></table></figure></li><li><p>基本使用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">ImageView mImageView = (ImageView) findViewById(R.id.ImageView);</span><br><span class="line">        String Url = &quot;http://***********&quot;;</span><br><span class="line"></span><br><span class="line">        Glide .with(this)</span><br><span class="line">                .load(Url)</span><br><span class="line">                .into(targetImageView);</span><br></pre></td></tr></table></figure></li></ul><h3 id="2-基本功能介绍-amp-使用"><a href="#2-基本功能介绍-amp-使用" class="headerlink" title="2.基本功能介绍&amp;使用"></a>2.基本功能介绍&amp;使用</h3><ul><li><p>图片的异步加载（基础功能）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ImageView mImageView = (ImageView) findViewById(R.id.ImageView);</span><br><span class="line">        String Url = &quot;http://**********&quot;;</span><br><span class="line"></span><br><span class="line">//Glide使用了流式接口的调用方式</span><br><span class="line">        Glide.with(context).load(Url).into(targetImageView);</span><br></pre></td></tr></table></figure></li><li><p>设置图片加载尺寸</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Glide.with(this).load(imageUrl).override(500, 500).into(imageView);</span><br></pre></td></tr></table></figure></li><li><p>设置加载中以及加载失败图片</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Glide</span><br><span class="line"> .with(this)</span><br><span class="line">  .load(imageUrl)</span><br><span class="line"> .placeholder(R.mipmap.ic_launcher).error(R.mipmap.ic_launcher).into(imageView);</span><br></pre></td></tr></table></figure></li><li><p>设置加载动画</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Glide.with(this).load(imageUrl).animate(R.anim.item_alpha_in).into(imageView);</span><br></pre></td></tr></table></figure></li><li><p>设置要加载的内容(图文混排)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Glide.with(this).load(imageUrl).centerCrop().into(new SimpleTarget&lt;GlideDrawable&gt;() &#123;</span><br><span class="line">            @Override</span><br><span class="line">            public void onResourceReady(GlideDrawable resource, GlideAnimation&lt;? super GlideDrawable&gt; glideAnimation) &#123;</span><br><span class="line">                imageView.setImageDrawable(resource);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br></pre></td></tr></table></figure></li><li><p>多样式的媒体加载</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Glide</span><br><span class="line">        .with(context)</span><br><span class="line">        .load(imageUrl)；</span><br><span class="line">        .thumbnail(0.1f)；//设置缩略图支持：先加载缩略图 (原图像的10%)然后在加载全图</span><br><span class="line">素。</span><br><span class="line">        .asBitmap()//显示gif静态图片 </span><br><span class="line">        .asGif();//显示gif动态图片</span><br><span class="line">        .into(imageView)；</span><br></pre></td></tr></table></figure></li><li><p>设置磁盘缓存策略</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Glide.with(this).load(imageUrl).diskCacheStrategy(DiskCacheStrategy.ALL).into(imageView);</span><br><span class="line"></span><br><span class="line">// 缓存参数说明</span><br><span class="line">// DiskCacheStrategy.NONE：不缓存任何图片，即禁用磁盘缓存</span><br><span class="line">// DiskCacheStrategy.ALL ：缓存原始图片 &amp; 转换后的图片（默认）</span><br><span class="line">// DiskCacheStrategy.SOURCE：只缓存原始图片（原来的全分辨率的图像，即不缓存转换后的图片）</span><br><span class="line">// DiskCacheStrategy.RESULT：只缓存转换后的图片（即最终的图像：降低分辨率后 / 或者转换后 ，不缓存原始图片</span><br></pre></td></tr></table></figure></li><li><p>清理缓存</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Glide.get(this).clearDiskCache();//清理磁盘缓存 需要在子线程中执行 </span><br><span class="line">Glide.get(this).clearMemory();//清理内存缓存 可以在UI主线程中进行</span><br></pre></td></tr></table></figure></li><li><p>生命周期集成</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Glide.with(Context context)// 绑定Context</span><br><span class="line">       .with(Activity activity);// 绑定Activity</span><br><span class="line">       .with(FragmentActivity activity);// 绑定FragmentActivity</span><br><span class="line">       .with(Fragment fragment);// 绑定Fragment</span><br></pre></td></tr></table></figure></li></ul><hr><p>至此,Glide图片加载库基础使用就讲解完毕了,感谢阅读</p><p>欢迎关注作者<a href="http://www.darryrzhong.site" target="_blank" rel="noopener">darryrzhong</a>,更多干货等你来拿哟.</p><h3 id="请赏个小红心！因为你的鼓励是我写作的最大动力！"><a href="#请赏个小红心！因为你的鼓励是我写作的最大动力！" class="headerlink" title="请赏个小红心！因为你的鼓励是我写作的最大动力！"></a>请赏个小红心！因为你的鼓励是我写作的最大动力！</h3><blockquote><p>更多精彩文章请关注</p><ul><li><a href="http://www.darryrzhong.xyz" target="_blank" rel="noopener">个人博客:darryrzhong</a></li><li><a href="https://juejin.im/user/5a6c3b19f265da3e49804988" target="_blank" rel="noopener">掘金</a></li><li><a href="https://www.jianshu.com/users/b7fdf53ec0b9/timeline" target="_blank" rel="noopener">简书</a></li><li><a href="https://segmentfault.com/u/darryrzhong_5ac59892a5882/articles" target="_blank" rel="noopener">SegmentFault</a></li><li><a href="https://www.imooc.com/u/6733207" target="_blank" rel="noopener">慕课网手记</a></li></ul></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;图片加载在 Android开发项目中是必不可少的，为了降低开发周期和难度，我们经常会选用一些图片加载的开源库，而Android发展到现在图片加载开源库也越来越多了，下面介绍 Glide开源图片加载库.&lt;/p&gt;
&lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h2&gt;&lt;p&gt;&lt;code&gt;Glide&lt;/code&gt;是由Google开源的一个图片加载库,是一款快速高效的Android开源媒体管理和图像加载框架，它将媒体解码，内存和磁盘缓存以及资源池包装成简单易用的界面.&lt;/p&gt;
&lt;h2 id=&quot;功能介绍以及基础使用&quot;&gt;&lt;a href=&quot;#功能介绍以及基础使用&quot; class=&quot;headerlink&quot; title=&quot;功能介绍以及基础使用&quot;&gt;&lt;/a&gt;功能介绍以及基础使用&lt;/h2&gt;&lt;h3 id=&quot;1-配置&quot;&gt;&lt;a href=&quot;#1-配置&quot; class=&quot;headerlink&quot; title=&quot;1.配置&quot;&gt;&lt;/a&gt;1.配置&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;在Project的gradle添加依赖&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;repositories &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  mavenCentral()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  google()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;在Module的gradle添加依赖&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;dependencies &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  implementation &amp;apos;com.github.bumptech.glide:glide:4.9.0&amp;apos;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  annotationProcessor &amp;apos;com.github.bumptech.glide:compiler:4.9.0&amp;apos;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="Android" scheme="http://darryrzhong.xyz/categories/Android/"/>
    
    
      <category term="Glide" scheme="http://darryrzhong.xyz/tags/Glide/"/>
    
  </entry>
  
  <entry>
    <title>Android Picasso 图片加载库基础使用详解</title>
    <link href="http://darryrzhong.xyz/2019/03/31/Android-Picasso-%E5%9B%BE%E7%89%87%E5%8A%A0%E8%BD%BD%E5%BA%93%E5%9F%BA%E7%A1%80%E4%BD%BF%E7%94%A8%E8%AF%A6%E8%A7%A3/"/>
    <id>http://darryrzhong.xyz/2019/03/31/Android-Picasso-图片加载库基础使用详解/</id>
    <published>2019-03-30T16:11:08.000Z</published>
    <updated>2019-03-30T16:12:01.121Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>图片加载在 Android开发项目中是必不可少的，为了降低开发周期和难度，我们经常会选用一些图片加载的开源库，而Android发展到现在图片加载开源库也越来越多了，下面介绍 Picasso 开源图片加载库.</p><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p><code>Picasso</code>中文翻译为’毕加索’,由Square公司开源的一个适用于Android的强大图像下载和缓存库.</p><h2 id="功能介绍以及基础使用"><a href="#功能介绍以及基础使用" class="headerlink" title="功能介绍以及基础使用"></a>功能介绍以及基础使用</h2><h3 id="1-配置"><a href="#1-配置" class="headerlink" title="1.配置"></a>1.配置</h3><ul><li>在gradle添加依赖</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">implementation &apos;com.squareup.picasso:picasso:2.71828&apos;</span><br></pre></td></tr></table></figure><ul><li>添加网络权限<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;uses-permission android:name=&quot;android.permission.INTERNET&quot;/&gt;</span><br></pre></td></tr></table></figure></li></ul><a id="more"></a> <ul><li>基本使用<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">ImageView mImageView = (ImageView) findViewById(R.id.ImageView);</span><br><span class="line">        String Url = &quot;http:/*********&quot;;</span><br><span class="line"></span><br><span class="line">        Picasso .with(this)</span><br><span class="line">                .load(Url)</span><br><span class="line">                .into(targetImageView);</span><br></pre></td></tr></table></figure></li></ul><h3 id="2-功能介绍以及基本使用"><a href="#2-功能介绍以及基本使用" class="headerlink" title="2.功能介绍以及基本使用"></a>2.功能介绍以及基本使用</h3><ul><li><p>异步加载显示图片</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">ImageView targetImageView = (ImageView) findViewById(R.id.ImageView);</span><br><span class="line">        String Url = &quot;http://**********&quot;;</span><br><span class="line"></span><br><span class="line">//Picasso使用了流式接口的调用方式</span><br><span class="line">        Picasso .with(context)</span><br><span class="line">                .load(Url)</span><br><span class="line">                .into(targetImageView);</span><br></pre></td></tr></table></figure></li><li><p>图片转换<br>转换图片以适合所显示的ImageView，来减少内存消耗</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Picasso.with(context)</span><br><span class="line">  .load(url)</span><br><span class="line">//裁剪图片尺寸</span><br><span class="line">  .resize(50, 50)</span><br><span class="line">//设置图片圆角</span><br><span class="line">  .centerCrop()</span><br><span class="line">  .into(imageView)</span><br></pre></td></tr></table></figure></li><li><p>加载过程中和加载错误时显示对应图片</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Picasso.with(context)</span><br><span class="line">    .load(url)</span><br><span class="line">//加载过程中的图片显示</span><br><span class="line">    .placeholder(R.drawable.user_placeholder)</span><br><span class="line">//加载失败中的图片显示</span><br><span class="line">//如果重试3次还是无法成功加载图片，则用错误占位符图片显示。</span><br><span class="line">    .error(R.drawable.user_placeholder_error)</span><br><span class="line">    .into(imageView);</span><br></pre></td></tr></table></figure></li><li><p>在Adapter中的回收不在视野的ImageView和取消已经回收的ImageView下载进程</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">@Override </span><br><span class="line">public void getView(int position, View convertView, ViewGroup parent) &#123;</span><br><span class="line">  SquaredImageView view = (SquaredImageView) convertView;</span><br><span class="line">  if (view == null) &#123;</span><br><span class="line">    view = new SquaredImageView(context);</span><br><span class="line">  &#125;</span><br><span class="line">  String url = getItem(position);</span><br><span class="line"> </span><br><span class="line">  Picasso.with(context).load(url).into(view);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>加载多种不同数据源 网络、本地、资源、Assets 等</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">//加载资源文件</span><br><span class="line">Picasso.with(context).load(R.drawable.landing_screen).into(imageView1);</span><br><span class="line">//加载本地文件</span><br><span class="line">Picasso.with(context).load(new File(&quot;/images/lunch_bees.gif&quot;)).into(imageView2);</span><br></pre></td></tr></table></figure></li><li><p>默认配置自动添加磁盘和内存二级缓存功能</p></li></ul><hr><p>至此,Picasso的基本功能和使用就介绍我完毕了,感谢阅读</p><p>欢迎关注作者<a href="http://www.darryrzhong.site" target="_blank" rel="noopener">darryrzhong</a>,更多干货等你来拿哟.</p><h3 id="请赏个小红心！因为你的鼓励是我写作的最大动力！"><a href="#请赏个小红心！因为你的鼓励是我写作的最大动力！" class="headerlink" title="请赏个小红心！因为你的鼓励是我写作的最大动力！"></a>请赏个小红心！因为你的鼓励是我写作的最大动力！</h3><blockquote><p>更多精彩文章请关注</p><ul><li><a href="http://www.darryrzhong.xyz" target="_blank" rel="noopener">个人博客:darryrzhong</a></li><li><a href="https://juejin.im/user/5a6c3b19f265da3e49804988" target="_blank" rel="noopener">掘金</a></li><li><a href="https://www.jianshu.com/users/b7fdf53ec0b9/timeline" target="_blank" rel="noopener">简书</a></li><li><a href="https://segmentfault.com/u/darryrzhong_5ac59892a5882/articles" target="_blank" rel="noopener">SegmentFault</a></li><li><a href="https://www.imooc.com/u/6733207" target="_blank" rel="noopener">慕课网手记</a></li></ul></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;图片加载在 Android开发项目中是必不可少的，为了降低开发周期和难度，我们经常会选用一些图片加载的开源库，而Android发展到现在图片加载开源库也越来越多了，下面介绍 Picasso 开源图片加载库.&lt;/p&gt;
&lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h2&gt;&lt;p&gt;&lt;code&gt;Picasso&lt;/code&gt;中文翻译为’毕加索’,由Square公司开源的一个适用于Android的强大图像下载和缓存库.&lt;/p&gt;
&lt;h2 id=&quot;功能介绍以及基础使用&quot;&gt;&lt;a href=&quot;#功能介绍以及基础使用&quot; class=&quot;headerlink&quot; title=&quot;功能介绍以及基础使用&quot;&gt;&lt;/a&gt;功能介绍以及基础使用&lt;/h2&gt;&lt;h3 id=&quot;1-配置&quot;&gt;&lt;a href=&quot;#1-配置&quot; class=&quot;headerlink&quot; title=&quot;1.配置&quot;&gt;&lt;/a&gt;1.配置&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;在gradle添加依赖&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;implementation &amp;apos;com.squareup.picasso:picasso:2.71828&amp;apos;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;添加网络权限&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;uses-permission android:name=&amp;quot;android.permission.INTERNET&amp;quot;/&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="Android" scheme="http://darryrzhong.xyz/categories/Android/"/>
    
    
      <category term="Picasso" scheme="http://darryrzhong.xyz/tags/Picasso/"/>
    
  </entry>
  
  <entry>
    <title>Android常用图片加载库介绍及对比</title>
    <link href="http://darryrzhong.xyz/2019/03/31/Android%E5%B8%B8%E7%94%A8%E5%9B%BE%E7%89%87%E5%8A%A0%E8%BD%BD%E5%BA%93%E4%BB%8B%E7%BB%8D%E5%8F%8A%E5%AF%B9%E6%AF%94/"/>
    <id>http://darryrzhong.xyz/2019/03/31/Android常用图片加载库介绍及对比/</id>
    <published>2019-03-30T16:09:41.000Z</published>
    <updated>2019-03-30T16:10:44.185Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>图片加载在 Android开发项目中是必不可少的，为了降低开发周期和难度，我们经常会选用一些图片加载的开源库，而Android发展到现在图片加载开源库也越来越多了，下面介绍几种开发中主流的图片加载框架&amp;以及他们之间的对比优缺点。</p><h2 id="Android主流图片加载库"><a href="#Android主流图片加载库" class="headerlink" title="Android主流图片加载库"></a>Android主流图片加载库</h2><ul><li><a href="https://link.jianshu.com/?t=https://github.com/square/picasso" target="_blank" rel="noopener">Picasso</a></li><li><a href="https://link.jianshu.com/?t=https://github.com/bumptech/glide" target="_blank" rel="noopener">Glide</a></li><li><a href="https://link.jianshu.com/?t=https://github.com/facebook/fresco" target="_blank" rel="noopener">Fresco</a></li></ul><h2 id="介绍-amp-对比"><a href="#介绍-amp-对比" class="headerlink" title="介绍&amp; 对比"></a>介绍&amp; 对比</h2><h3 id="1-Picasso"><a href="#1-Picasso" class="headerlink" title="1.Picasso"></a>1.Picasso</h3><p><code>Picasso</code>中文翻译为’毕加索’,由Square公司开源的一个适用于Android的强大图像下载和缓存库.</p><a id="more"></a><ul><li><p>功能介绍</p></li><li><p>图片的异步加载（最基础功能）</p></li><li>使用最少的内存完成复杂的图片转换，转换图片以适合所显示的ImageView，来减少内存消耗</li><li>支持加载过程中和加载错误时显示对应图片</li><li>在Adapter中的回收不在视野的ImageView和取消已经回收的ImageView下载进程</li><li>支持加载多种数据源 网络、本地、资源、Assets 等</li><li>自动添加磁盘和内存二级缓存功能</li><li>支持优先级处理</li><li>支持飞行模式、并发线程数根据网络类型而变<blockquote><p>Picasso 没有实现本地缓存功能，交给了 Square 的另外一个网络库 okhttp 去实现，这样的好处是可以通过请求 Response Header 中的 Cache-Control 及 Expired 控制图片的过期时间。</p></blockquote></li></ul><hr><ul><li>与其他开源库对比<blockquote><p>优点如下:</p></blockquote></li><li>使用简单,代码简洁</li><li>与Square 公司的其他开源库如 Retrofit 或者 OkHttp搭配使用兼容性会更好些，占用体积也会少些<blockquote><p>缺点如下:</p></blockquote></li><li>功能较为简单-图片加载；</li><li>性能（加载速度等等）较（Glide、Fresco）较差</li><li>自身无实现“本地缓存”</li></ul><h3 id="2-Glide"><a href="#2-Glide" class="headerlink" title="2.Glide"></a>2.Glide</h3><p><code>Glide</code>是由Google开源的一个图片加载库,是一款快速高效的Android开源媒体管理和图像加载框架，它将媒体解码，内存和磁盘缓存以及资源池包装成简单易用的界面.</p><ul><li>功能介绍</li><li>图片的异步加载（基础功能）</li><li>支持设置加载尺寸、设置加载中以及加载失败图片、设置加载动画、设置图文混排</li><li>多样式的媒体加载(设置缩略图支持：先加载缩略图 然后在加载全图)</li><li>支持设置磁盘缓存策略、设置跳过内存缓存、清理缓存</li><li><p>生命周期集成(然而还是有bug)</p></li><li><p>与其他开源库对比</p><blockquote><p>优点如下:</p></blockquote></li><li>支持多样化媒体加载<br>Glide 不仅是一个图片缓存，它支持 Gif、WebP、缩略图,甚至是 Video</li><li>生命周期集成<br>通过设置绑定生命周期，我们可以更加高效的使用Glide提供的方式进行绑定，这样可以更好的让加载图片的请求的生命周期动态管理起来(使用还是有bug)</li><li>高效的缓存策略<br>1.支持Memory和Disk图片缓存<br>2.Picasso 只会缓存原始尺寸的图片，而 Glide 缓存的是多种规格，即 Glide 会根据你 ImageView 的大小来缓存相应大小的图片尺寸<br>3.内存开销小,Glide 默认的 Bitmap 格式是 RGB_565 格式，而 Picasso 默认的是 ARGB_8888 格式，占用内存要小一半</li></ul><blockquote><p>缺点如下:</p></blockquote><ul><li>使用方法复杂,实现方法较多</li><li>使用较Fresco简单，但性能（加载速度 &amp; 缓存）却比不上Fresco</li></ul><h3 id="3-Fresco"><a href="#3-Fresco" class="headerlink" title="3.Fresco"></a>3.Fresco</h3><p><code>Fresco</code>是由Facebook开源的用于管理图像及其使用内存的Android库</p><ul><li>功能介绍<br><img src="https://upload-images.jianshu.io/upload_images/5549640-73cb5e262a6e8ff4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></li></ul><blockquote><p>具体功能请前往<a href="https://www.fresco-cn.org/support.html" target="_blank" rel="noopener">官方文档</a>查看</p></blockquote><blockquote><p>优点如下</p><ul><li>大大减少了OOM的发生,Facebook在底层使用了C++技术解决图片缓存问题</li><li>使用简单,几乎全部功能都能在XML文件中直接制定</li></ul></blockquote><blockquote><p>缺点如下:</p></blockquote><ul><li>用法变得更加复杂了</li><li>依赖包更加大了(2-3M)</li><li>底层设计C++等技术,源码阅读更加困难</li></ul><p>至此Android 中主流的三大图片加载框架就介绍完毕了,感谢阅读</p><p>欢迎关注作者<a href="http://www.darryrzhong.site" target="_blank" rel="noopener">darryrzhong</a>,更多干货等你来拿哟.</p><h3 id="请赏个小红心！因为你的鼓励是我写作的最大动力！"><a href="#请赏个小红心！因为你的鼓励是我写作的最大动力！" class="headerlink" title="请赏个小红心！因为你的鼓励是我写作的最大动力！"></a>请赏个小红心！因为你的鼓励是我写作的最大动力！</h3><blockquote><p>更多精彩文章请关注</p><ul><li><a href="http://www.darryrzhong.xyz" target="_blank" rel="noopener">个人博客:darryrzhong</a></li><li><a href="https://juejin.im/user/5a6c3b19f265da3e49804988" target="_blank" rel="noopener">掘金</a></li><li><a href="https://www.jianshu.com/users/b7fdf53ec0b9/timeline" target="_blank" rel="noopener">简书</a></li><li><a href="https://segmentfault.com/u/darryrzhong_5ac59892a5882/articles" target="_blank" rel="noopener">SegmentFault</a></li><li><a href="https://www.imooc.com/u/6733207" target="_blank" rel="noopener">慕课网手记</a></li></ul></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;图片加载在 Android开发项目中是必不可少的，为了降低开发周期和难度，我们经常会选用一些图片加载的开源库，而Android发展到现在图片加载开源库也越来越多了，下面介绍几种开发中主流的图片加载框架&amp;amp;以及他们之间的对比优缺点。&lt;/p&gt;
&lt;h2 id=&quot;Android主流图片加载库&quot;&gt;&lt;a href=&quot;#Android主流图片加载库&quot; class=&quot;headerlink&quot; title=&quot;Android主流图片加载库&quot;&gt;&lt;/a&gt;Android主流图片加载库&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://link.jianshu.com/?t=https://github.com/square/picasso&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Picasso&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://link.jianshu.com/?t=https://github.com/bumptech/glide&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Glide&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://link.jianshu.com/?t=https://github.com/facebook/fresco&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Fresco&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;介绍-amp-对比&quot;&gt;&lt;a href=&quot;#介绍-amp-对比&quot; class=&quot;headerlink&quot; title=&quot;介绍&amp;amp; 对比&quot;&gt;&lt;/a&gt;介绍&amp;amp; 对比&lt;/h2&gt;&lt;h3 id=&quot;1-Picasso&quot;&gt;&lt;a href=&quot;#1-Picasso&quot; class=&quot;headerlink&quot; title=&quot;1.Picasso&quot;&gt;&lt;/a&gt;1.Picasso&lt;/h3&gt;&lt;p&gt;&lt;code&gt;Picasso&lt;/code&gt;中文翻译为’毕加索’,由Square公司开源的一个适用于Android的强大图像下载和缓存库.&lt;/p&gt;
    
    </summary>
    
      <category term="Android" scheme="http://darryrzhong.xyz/categories/Android/"/>
    
    
      <category term="图片加载" scheme="http://darryrzhong.xyz/tags/%E5%9B%BE%E7%89%87%E5%8A%A0%E8%BD%BD/"/>
    
  </entry>
  
  <entry>
    <title>Android  进阶学习思维大纲</title>
    <link href="http://darryrzhong.xyz/2019/03/29/Android-%E8%BF%9B%E9%98%B6%E5%AD%A6%E4%B9%A0%E6%80%9D%E7%BB%B4%E5%A4%A7%E7%BA%B2/"/>
    <id>http://darryrzhong.xyz/2019/03/29/Android-进阶学习思维大纲/</id>
    <published>2019-03-29T02:10:28.000Z</published>
    <updated>2019-03-29T02:19:06.622Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>随着近几年移动开发越来越成熟,市场对于Android开发人员的要求也越来越高,而对于大多数人来说,也是越来越多的新技术和跨平台框架需要学习,为此大多是人都很迷茫,不知道要学什么,在这里给大家分享一个Android学习进阶的思维大纲,以至于大家对于Android学习树立点方向,少走一点弯路,提高学习效率,节省时间成本.</p><p><img src="https://upload-images.jianshu.io/upload_images/5549640-7b52be8a118a9214.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><p><a href="http://naotu.baidu.com/file/12435141647f83f55799f1e3a9b336a5?token=309b64e441344599" target="_blank" rel="noopener">大纲地址</a></p><ul><li>觉得Android学习没有方向的可以对照着去学习哟</li></ul><p>欢迎关注作者<a href="http://www.darryrzhong.site" target="_blank" rel="noopener">darryrzhong</a>,更多干货等你来拿哟.</p><a id="more"></a><h3 id="请赏个小红心！因为你的鼓励是我写作的最大动力！"><a href="#请赏个小红心！因为你的鼓励是我写作的最大动力！" class="headerlink" title="请赏个小红心！因为你的鼓励是我写作的最大动力！"></a>请赏个小红心！因为你的鼓励是我写作的最大动力！</h3><blockquote><p>更多精彩文章请关注</p><ul><li><a href="http://www.darryrzhong.xyz" target="_blank" rel="noopener">个人博客:darryrzhong</a></li><li><a href="https://juejin.im/user/5a6c3b19f265da3e49804988" target="_blank" rel="noopener">掘金</a></li><li><a href="https://www.jianshu.com/users/b7fdf53ec0b9/timeline" target="_blank" rel="noopener">简书</a></li><li><a href="https://segmentfault.com/u/darryrzhong_5ac59892a5882/articles" target="_blank" rel="noopener">SegmentFault</a></li><li><a href="https://www.imooc.com/u/6733207" target="_blank" rel="noopener">慕课网手记</a></li></ul></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;随着近几年移动开发越来越成熟,市场对于Android开发人员的要求也越来越高,而对于大多数人来说,也是越来越多的新技术和跨平台框架需要学习,为此大多是人都很迷茫,不知道要学什么,在这里给大家分享一个Android学习进阶的思维大纲,以至于大家对于Android学习树立点方向,少走一点弯路,提高学习效率,节省时间成本.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/5549640-7b52be8a118a9214.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;image.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://naotu.baidu.com/file/12435141647f83f55799f1e3a9b336a5?token=309b64e441344599&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;大纲地址&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;觉得Android学习没有方向的可以对照着去学习哟&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;欢迎关注作者&lt;a href=&quot;http://www.darryrzhong.site&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;darryrzhong&lt;/a&gt;,更多干货等你来拿哟.&lt;/p&gt;
    
    </summary>
    
      <category term="Android" scheme="http://darryrzhong.xyz/categories/Android/"/>
    
    
      <category term="android" scheme="http://darryrzhong.xyz/tags/android/"/>
    
  </entry>
  
  <entry>
    <title>Android Retrofit 2.5.0使用基础详解</title>
    <link href="http://darryrzhong.xyz/2019/03/28/Android-Retrofit-2-5-0%E4%BD%BF%E7%94%A8%E5%9F%BA%E7%A1%80%E8%AF%A6%E8%A7%A3/"/>
    <id>http://darryrzhong.xyz/2019/03/28/Android-Retrofit-2-5-0使用基础详解/</id>
    <published>2019-03-28T11:37:41.000Z</published>
    <updated>2019-03-28T11:38:33.776Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><ul><li>在Andrroid开发中，网络请求必不可少</li><li>而在Android所有网络请求库中，<code>Retrofit</code>是最受开发者欢迎的一个网络请求库</li></ul><p><a href="https://square.github.io/retrofit/" target="_blank" rel="noopener">retrofit:2.5.0 官方文档</a></p><p><a href="https://github.com/square/retrofit" target="_blank" rel="noopener">retrofit:2.5.0 - github</a></p><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><ul><li><code>Retrofit</code>是Square公司开发的一款针对Android网络请求的框架,遵循Restful设计风格,底层基于OkHttp.</li></ul><h2 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h2><ul><li>支持同步/异步网络请求</li><li>支持多种数据的解析&amp;序列化格式(Gson、json、XML等等)</li><li>通过注解配置网络请求参数</li><li>提供对Rxjava的支持</li><li>高度解耦,使用方便</li></ul><h2 id="对比其他网络请求框架"><a href="#对比其他网络请求框架" class="headerlink" title="对比其他网络请求框架"></a>对比其他网络请求框架</h2><ul><li>性能最好,速度最快</li><li>高度封装导致扩展性差</li><li>简洁易用,代码简化</li><li>解耦彻底,职责细分</li><li>易与其他框架联用(Rxjava)</li></ul><a id="more"></a> <h2 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h2><ul><li>任何场景下建议优先使用</li></ul><h2 id="网络请求流程"><a href="#网络请求流程" class="headerlink" title="网络请求流程"></a>网络请求流程</h2><ul><li>App应用程序通过 Retrofit 请求网络，实际上是使用 Retrofit 接口层封装请求参数、Header、Url 等信息，之后由 OkHttp 完成后续的请求操作</li><li>在服务端返回数据之后，OkHttp 将原始的结果交给 Retrofit，Retrofit根据用户的需求对结果进行解析</li></ul><p><img src="https://upload-images.jianshu.io/upload_images/5549640-93219ec2c71748f1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="请求流程"></p><h2 id="具体使用"><a href="#具体使用" class="headerlink" title="具体使用"></a>具体使用</h2><h3 id="1-添加Retrofit库的依赖"><a href="#1-添加Retrofit库的依赖" class="headerlink" title="1.添加Retrofit库的依赖"></a>1.添加Retrofit库的依赖</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">dependencies &#123;</span><br><span class="line">      implementation &apos;com.squareup.retrofit2:retrofit:2.5.0&apos;</span><br><span class="line">     api &apos;com.squareup.retrofit2:converter-gson:2.0.2&apos;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-添加-网络权限"><a href="#2-添加-网络权限" class="headerlink" title="2. 添加 网络权限"></a>2. 添加 网络权限</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;uses-permission android:name=&quot;android.permission.INTERNET&quot;/&gt;</span><br></pre></td></tr></table></figure><h3 id="3-创建-装载服务器返回数据-的类"><a href="#3-创建-装载服务器返回数据-的类" class="headerlink" title="3. 创建 装载服务器返回数据 的类"></a>3. 创建 装载服务器返回数据 的类</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">public class ResultData&#123;</span><br><span class="line">    ...</span><br><span class="line">    // 根据返回数据的格式和数据解析方式（Json、XML等）定义</span><br><span class="line"></span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><h3 id="4-创建-用于配置网络请求-的接口"><a href="#4-创建-用于配置网络请求-的接口" class="headerlink" title="4. 创建 用于配置网络请求 的接口"></a>4. 创建 用于配置网络请求 的接口</h3><ul><li>Retrofit将 Http请求 抽象成 Java接口：采用 注解 描述网络请求参数 和配置网络请求参数<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">public interface GetRequestInterface &#123;</span><br><span class="line"></span><br><span class="line">    @GET(&quot;openapi.do?keyfrom=Yanzhikai&amp;key=2032414398&amp;type=data&amp;doctype=json&amp;version=1.1&amp;q=car&quot;)</span><br><span class="line">    Call&lt;ResultData&gt;  getCall();</span><br><span class="line">    // @GET注解的作用:采用Get方法发送网络请求</span><br><span class="line"> </span><br><span class="line">    // getCall() = 接收网络请求数据的方法</span><br><span class="line">    // 其中返回类型为Call&lt;*&gt;，*是接收数据的类（即上面定义的Translation类）</span><br><span class="line">    // 如果想直接获得Responsebody中的内容，可以定义网络请求返回值为Call&lt;ResponseBody&gt;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="注解说明"><a href="#注解说明" class="headerlink" title="注解说明"></a>注解说明</h4><ul><li>网络请求方法:@GET、@POST、@PUT、@DELETE、@HEAD(常用)</li><li>网络请求标记: @FormUrlEncoded、@Multipart、@Streaming</li><li>网络请求参数:  @Header &amp;、@Headers、 @Body、@Field 、 @FieldMap、@Part 、 @PartMap、@Query、@QueryMap、@Path、@Url</li></ul><p>具体作用以及解释请自行前往官方文档查看,这里就不一一解释了</p><h3 id="5-创建-Retrofit-实例"><a href="#5-创建-Retrofit-实例" class="headerlink" title="5. 创建 Retrofit 实例"></a>5. 创建 Retrofit 实例</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Retrofit retrofit = new Retrofit.Builder()</span><br><span class="line">                .baseUrl(&quot;http://fanyi.youdao.com/&quot;) // 设置网络请求的公共Url地址</span><br><span class="line">                .addConverterFactory(GsonConverterFactory.create()) // 设置数据解析器</span><br><span class="line">                .addCallAdapterFactory(RxJavaCallAdapterFactory.create()) // 支持RxJava平台</span><br><span class="line">                .build();</span><br></pre></td></tr></table></figure><ul><li>数据解析器说明<br>Retrofit支持多种数据解析方式,使用时需要在Gradle添加依赖</li></ul><p>数据解析器<br>Gradle依赖</p><p>Gson<br>com.squareup.retrofit2:converter-gson:2.0.2</p><hr><p>Jackson</p><h2 id="com-squareup-retrofit2-converter-jackson-2-0-2"><a href="#com-squareup-retrofit2-converter-jackson-2-0-2" class="headerlink" title="com.squareup.retrofit2:converter-jackson:2.0.2"></a>com.squareup.retrofit2:converter-jackson:2.0.2</h2><p>Simple XML<br>com.squareup.retrofit2:converter-simplexml:2.0.2</p><hr><p>Protobuf<br>com.squareup.retrofit2:converter-protobuf:2.0.2</p><hr><p>Moshi</p><h2 id="com-squareup-retrofit2-converter-moshi-2-0-2"><a href="#com-squareup-retrofit2-converter-moshi-2-0-2" class="headerlink" title="com.squareup.retrofit2:converter-moshi:2.0.2"></a>com.squareup.retrofit2:converter-moshi:2.0.2</h2><p>Wire<br>com.squareup.retrofit2:converter-wire:2.0.2</p><hr><p>Scalars</p><h2 id="com-squareup-retrofit2-converter-scalars-2-0-2"><a href="#com-squareup-retrofit2-converter-scalars-2-0-2" class="headerlink" title="com.squareup.retrofit2:converter-scalars:2.0.2"></a>com.squareup.retrofit2:converter-scalars:2.0.2</h2><ul><li>网络适配器说明<br>Retrofit支持多种网络请求适配器方式：guava、Java8和rxjava<br>Android 提供默认的 CallAdapter，不需要添加网络请求适配器的依赖，若要使用其他网络适配器,则需要按照需求在Gradle添加依赖</li></ul><p>网络请求适配器<br>Gradle依赖</p><p>guava</p><h2 id="com-squareup-retrofit2-adapter-guava-2-0-2"><a href="#com-squareup-retrofit2-adapter-guava-2-0-2" class="headerlink" title="com.squareup.retrofit2:adapter-guava:2.0.2"></a>com.squareup.retrofit2:adapter-guava:2.0.2</h2><p>Java8<br>com.squareup.retrofit2:adapter-java8:2.0.2</p><hr><p>rxjava</p><h2 id="com-squareup-retrofit2-adapter-rxjava-2-0-2"><a href="#com-squareup-retrofit2-adapter-rxjava-2-0-2" class="headerlink" title="com.squareup.retrofit2:adapter-rxjava:2.0.2"></a>com.squareup.retrofit2:adapter-rxjava:2.0.2</h2><h3 id="6-创建-网络请求接口实例"><a href="#6-创建-网络请求接口实例" class="headerlink" title="6.创建 网络请求接口实例"></a>6.创建 网络请求接口实例</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">// 创建 网络请求接口 的实例</span><br><span class="line">        GetRequestInterface request = retrofit.create(GetRequestInterface.class);</span><br><span class="line"></span><br><span class="line">        //对 发送请求 进行封装</span><br><span class="line">        Call&lt;ResultData&gt; call = request.getCall();</span><br></pre></td></tr></table></figure><h3 id="7-发起网络请求（异步-同步）"><a href="#7-发起网络请求（异步-同步）" class="headerlink" title="7.  发起网络请求（异步 / 同步）"></a>7.  发起网络请求（异步 / 同步）</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">/发送网络请求(异步)</span><br><span class="line">        call.enqueue(new Callback&lt;ResultData&gt;() &#123;</span><br><span class="line">            //请求成功时回调</span><br><span class="line">            @Override</span><br><span class="line">            public void onResponse(Call&lt;ResultData&gt; call, Response&lt;ResultData&gt; response) &#123;</span><br><span class="line">                //处理结果</span><br><span class="line">         </span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            //请求失败时候的回调</span><br><span class="line">            @Override</span><br><span class="line">            public void onFailure(Call&lt;ResultData&gt; call, Throwable throwable) &#123;</span><br><span class="line">             //提示失败</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">// 发送网络请求（同步）</span><br><span class="line">Response&lt;ResultData&gt; response = call.execute();</span><br></pre></td></tr></table></figure><h3 id="8-处理返回数据"><a href="#8-处理返回数据" class="headerlink" title="8. 处理返回数据"></a>8. 处理返回数据</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">//发送网络请求(异步)</span><br><span class="line">        call.enqueue(new Callback&lt;ResultData&gt;() &#123;</span><br><span class="line">            //请求成功时回调</span><br><span class="line">            @Override</span><br><span class="line">            public void onResponse(Call&lt;ResultData&gt; call, Response&lt;ResultData&gt; response) &#123;</span><br><span class="line">                // 对返回数据进行处理</span><br><span class="line">                response.body();//拿到ResultData对象进行数据操作</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            //请求失败时候的回调</span><br><span class="line">            @Override</span><br><span class="line">            public void onFailure(Call&lt;ResultData&gt; call, Throwable throwable) &#123;</span><br><span class="line">                System.out.println(&quot;连接失败&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">// 发送网络请求（同步）</span><br><span class="line">  Response&lt;ResultData&gt; response = call.execute();</span><br><span class="line">  // 对返回数据进行处理</span><br><span class="line">  response.body().blabla;</span><br></pre></td></tr></table></figure><hr><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul><li>Retrofit 是一个 restful 的 HTTP 网络请求框架的封装。</li><li>网络请求的工作本质上是 OkHttp 完成，而 Retrofit 仅负责 网络请求接口的封装</li><li>App应用程序通过 Retrofit 请求网络，实际上是使用 Retrofit 接口层封装请求参数、Header、Url 等信息，之后由 OkHttp 完成后续的请求操作</li><li>在服务端返回数据之后，OkHttp 将原始的结果交给 Retrofit，Retrofit根据用户的需求对结果进行解析</li><li>相对其他开源库而言代码简洁使用更加方便.</li></ul><blockquote><p>关于Retrofit 2.5的简单介绍到这里就结束了,感谢阅读.</p></blockquote><h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章:"></a>参考文章:</h2><ul><li><a href="https://www.jianshu.com/p/a3e162261ab6" target="_blank" rel="noopener">Android Retrofit 2.0 的详细 使用攻略（含实例讲解）</a></li><li><a href="https://www.jianshu.com/p/0c055ad46b6c" target="_blank" rel="noopener">Android：手把手带你 深入读懂 Retrofit 2.0 源码</a></li></ul><p>欢迎关注作者<a href="http://www.darryrzhong.site" target="_blank" rel="noopener">darryrzhong</a>,更多干货等你来拿哟.</p><h3 id="请赏个小红心！因为你的鼓励是我写作的最大动力！"><a href="#请赏个小红心！因为你的鼓励是我写作的最大动力！" class="headerlink" title="请赏个小红心！因为你的鼓励是我写作的最大动力！"></a>请赏个小红心！因为你的鼓励是我写作的最大动力！</h3><blockquote><p>更多精彩文章请关注</p><ul><li><a href="http://www.darryrzhong.xyz" target="_blank" rel="noopener">个人博客:darryrzhong</a></li><li><a href="https://juejin.im/user/5a6c3b19f265da3e49804988" target="_blank" rel="noopener">掘金</a></li><li><a href="https://www.jianshu.com/users/b7fdf53ec0b9/timeline" target="_blank" rel="noopener">简书</a></li><li><a href="https://segmentfault.com/u/darryrzhong_5ac59892a5882/articles" target="_blank" rel="noopener">SegmentFault</a></li><li><a href="https://www.imooc.com/u/6733207" target="_blank" rel="noopener">慕课网手记</a></li></ul></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;在Andrroid开发中，网络请求必不可少&lt;/li&gt;
&lt;li&gt;而在Android所有网络请求库中，&lt;code&gt;Retrofit&lt;/code&gt;是最受开发者欢迎的一个网络请求库&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href=&quot;https://square.github.io/retrofit/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;retrofit:2.5.0 官方文档&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/square/retrofit&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;retrofit:2.5.0 - github&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Retrofit&lt;/code&gt;是Square公司开发的一款针对Android网络请求的框架,遵循Restful设计风格,底层基于OkHttp.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;功能&quot;&gt;&lt;a href=&quot;#功能&quot; class=&quot;headerlink&quot; title=&quot;功能&quot;&gt;&lt;/a&gt;功能&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;支持同步/异步网络请求&lt;/li&gt;
&lt;li&gt;支持多种数据的解析&amp;amp;序列化格式(Gson、json、XML等等)&lt;/li&gt;
&lt;li&gt;通过注解配置网络请求参数&lt;/li&gt;
&lt;li&gt;提供对Rxjava的支持&lt;/li&gt;
&lt;li&gt;高度解耦,使用方便&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;对比其他网络请求框架&quot;&gt;&lt;a href=&quot;#对比其他网络请求框架&quot; class=&quot;headerlink&quot; title=&quot;对比其他网络请求框架&quot;&gt;&lt;/a&gt;对比其他网络请求框架&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;性能最好,速度最快&lt;/li&gt;
&lt;li&gt;高度封装导致扩展性差&lt;/li&gt;
&lt;li&gt;简洁易用,代码简化&lt;/li&gt;
&lt;li&gt;解耦彻底,职责细分&lt;/li&gt;
&lt;li&gt;易与其他框架联用(Rxjava)&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="Android" scheme="http://darryrzhong.xyz/categories/Android/"/>
    
    
      <category term="Retrofit" scheme="http://darryrzhong.xyz/tags/Retrofit/"/>
    
  </entry>
  
  <entry>
    <title>Android自定义View:快递时间轴实现</title>
    <link href="http://darryrzhong.xyz/2019/03/28/Android%E8%87%AA%E5%AE%9A%E4%B9%89View-%E5%BF%AB%E9%80%92%E6%97%B6%E9%97%B4%E8%BD%B4%E5%AE%9E%E7%8E%B0/"/>
    <id>http://darryrzhong.xyz/2019/03/28/Android自定义View-快递时间轴实现/</id>
    <published>2019-03-27T16:15:56.000Z</published>
    <updated>2019-03-27T16:17:04.204Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><ul><li><p>在Android开发中，时间轴的 UI非常常见，如下图：<br><img src="https://upload-images.jianshu.io/upload_images/5549640-d7336ab6e9d578b9.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="TIM图片20190327232833.jpg"></p></li><li><p>储备知识:<br>1.自定义view基础<br>2.RecyclerView的使用<br>3.自定义RecyclerView.ItemDecoration</p></li></ul><h2 id="具体实现"><a href="#具体实现" class="headerlink" title="具体实现"></a>具体实现</h2><p>1.最终效果如下:<br><img src="https://upload-images.jianshu.io/upload_images/5549640-7dcc8332e13a4132.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="TIM截图20190327231820.png"></p><a id="more"></a><p>2.实现思路</p><ul><li>使用RecyclerView,自定义RecyclerView.ItemDecoration</li><li>复习ItemDecoration中getItemOffsets()方法,重写onDraw()方法</li><li>实现RecyclerView.Adapter,绑定数据</li></ul><p>3.详细设计</p><p><img src="https://upload-images.jianshu.io/upload_images/5549640-4cbf9b5b5d1c47a7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="TIM截图20190327235039.png"></p><p><img src="https://upload-images.jianshu.io/upload_images/5549640-da8c7743a4115fff.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="TIM截图20190327235010.png"></p><p>4.具体实现</p><ul><li><p>引入RecyclerView依赖包</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">dependencies &#123;</span><br><span class="line">     ..........</span><br><span class="line">    api &apos;com.android.support:recyclerview-v7:28.0.0&apos;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>在布局文件中使用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;RelativeLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;</span><br><span class="line">    xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot;</span><br><span class="line">    xmlns:tools=&quot;http://schemas.android.com/tools&quot;</span><br><span class="line">    android:layout_width=&quot;match_parent&quot;</span><br><span class="line">    android:layout_height=&quot;match_parent&quot;</span><br><span class="line">    tools:context=&quot;.MainActivity&quot;&gt;</span><br><span class="line"></span><br><span class="line">    &lt;android.support.v7.widget.RecyclerView</span><br><span class="line">        android:id=&quot;@+id/my_recycler_view&quot;</span><br><span class="line">        android:layout_width=&quot;match_parent&quot;</span><br><span class="line">        android:layout_height=&quot;match_parent&quot;</span><br><span class="line">        android:scrollbars=&quot;horizontal&quot;</span><br><span class="line">        /&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;/RelativeLayout&gt;</span><br></pre></td></tr></table></figure></li><li><p>设置item布局</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">&lt;LinearLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;</span><br><span class="line">    android:layout_width=&quot;match_parent&quot;</span><br><span class="line">    android:layout_height=&quot;match_parent&quot;</span><br><span class="line">    android:orientation=&quot;vertical&quot;</span><br><span class="line">    &gt;</span><br><span class="line"></span><br><span class="line">    &lt;TextView</span><br><span class="line">        android:id=&quot;@+id/item_title&quot;</span><br><span class="line">        android:text=&quot;New Text&quot;</span><br><span class="line">        android:textSize=&quot;15sp&quot;</span><br><span class="line">        android:layout_marginLeft=&quot;30dp&quot;</span><br><span class="line">        android:layout_width=&quot;wrap_content&quot;</span><br><span class="line">        android:layout_height=&quot;wrap_content&quot; /&gt;</span><br><span class="line"></span><br><span class="line">    &lt;TextView</span><br><span class="line">        android:layout_width=&quot;wrap_content&quot;</span><br><span class="line">        android:layout_height=&quot;wrap_content&quot;</span><br><span class="line">        android:text=&quot;New Text&quot;</span><br><span class="line">        android:layout_marginLeft=&quot;30dp&quot;</span><br><span class="line">        android:textSize=&quot;15sp&quot;</span><br><span class="line">        android:id=&quot;@+id/item_text&quot;</span><br><span class="line">        android:layout_below=&quot;@+id/item_title&quot;</span><br><span class="line">        /&gt;</span><br><span class="line"></span><br><span class="line">&lt;/LinearLayout&gt;</span><br></pre></td></tr></table></figure></li><li><p>实现RecyclerView.Adapter</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">public class MyAdapter extends RecyclerView.Adapter &#123;</span><br><span class="line">    private LayoutInflater inflater;</span><br><span class="line">    private ArrayList&lt;HashMap&lt;String,Object&gt;&gt; listitem;</span><br><span class="line"></span><br><span class="line">    //构造函数,传入数据</span><br><span class="line">    public MyAdapter(Context context,ArrayList&lt;HashMap&lt;String, Object&gt;&gt; listitem) &#123;</span><br><span class="line">        this.inflater = LayoutInflater.from(context);</span><br><span class="line">        this.listitem = listitem;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    class ViewHolder extends RecyclerView.ViewHolder&#123;</span><br><span class="line">        private TextView title,text;</span><br><span class="line"></span><br><span class="line">        public ViewHolder(@NonNull View itemView) &#123;</span><br><span class="line">            super(itemView);</span><br><span class="line">            title = itemView.findViewById(R.id.item_title);</span><br><span class="line">            text = itemView.findViewById(R.id.item_text);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        public TextView getTitle() &#123;</span><br><span class="line">            return title;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        public TextView getText() &#123;</span><br><span class="line">            return text;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    @NonNull</span><br><span class="line">    @Override</span><br><span class="line">    public RecyclerView.ViewHolder onCreateViewHolder(@NonNull ViewGroup viewGroup, int i) &#123;</span><br><span class="line">        return new ViewHolder(inflater.inflate(R.layout.list_cell,null));</span><br><span class="line">        //绑定item布局</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void onBindViewHolder(@NonNull RecyclerView.ViewHolder viewHolder, int i) &#123;</span><br><span class="line">          //绑定数据到ViewHolder</span><br><span class="line">        ViewHolder  vh = (ViewHolder) viewHolder;</span><br><span class="line">        vh.title.setText((CharSequence) listitem.get(i).get(&quot;ItemTitle&quot;));</span><br><span class="line">        vh.text.setText((CharSequence) listitem.get(i).get(&quot;ItemText&quot;));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public int getItemCount() &#123;</span><br><span class="line">        return listitem.size();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>自定义RecyclerView.ItemDecoration</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br></pre></td><td class="code"><pre><span class="line">public class DividerItemDecoration extends RecyclerView.ItemDecoration &#123;</span><br><span class="line"></span><br><span class="line">    //轴点画笔</span><br><span class="line">    private final Paint mPaint;</span><br><span class="line">    //时分画笔</span><br><span class="line">    private final Paint mPaint1;</span><br><span class="line">    //年月画笔</span><br><span class="line">    private final Paint mPaint2;</span><br><span class="line">    //itemView 左 上 偏移量</span><br><span class="line">    private int itemView_leftinterval;</span><br><span class="line">    private int itemView_topintervarl;</span><br><span class="line">    //轴点半径</span><br><span class="line">    private  int circle_radius;</span><br><span class="line">    private final Bitmap mIcon;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    //在构造函数里初始化需要属性</span><br><span class="line">    public DividerItemDecoration(Context context)&#123;</span><br><span class="line">        mPaint = new Paint();</span><br><span class="line">        mPaint.setColor(Color.RED);//设置画笔颜色为红色</span><br><span class="line"></span><br><span class="line">        mPaint1 = new Paint();</span><br><span class="line">        mPaint1.setColor(Color.BLUE);</span><br><span class="line">        mPaint1.setTextSize(30);//设置绘制字体大小</span><br><span class="line"></span><br><span class="line">        mPaint2 = new Paint();</span><br><span class="line">        mPaint2.setColor(Color.BLUE);</span><br><span class="line">        mPaint2.setTextSize(15);</span><br><span class="line"></span><br><span class="line">        itemView_leftinterval = 200; //左偏移长度200</span><br><span class="line">        itemView_topintervarl = 50; //上偏移长度50</span><br><span class="line"></span><br><span class="line">        circle_radius = 10;//轴点半径为10</span><br><span class="line">        mIcon = BitmapFactory.decodeResource(context.getResources(),R.mipmap.logo);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void getItemOffsets(@NonNull Rect outRect, @NonNull View view, @NonNull RecyclerView parent, @NonNull RecyclerView.State state) &#123;</span><br><span class="line">        super.getItemOffsets(outRect, view, parent, state);</span><br><span class="line"></span><br><span class="line">        //设置itemview的左上偏移量,即为onDraw可绘制的区域</span><br><span class="line">        outRect.set(itemView_leftinterval,itemView_topintervarl,0,0);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void onDraw(@NonNull Canvas c, @NonNull RecyclerView parent, @NonNull RecyclerView.State state) &#123;</span><br><span class="line">        super.onDraw(c, parent, state);</span><br><span class="line"></span><br><span class="line">        //获取RecyclerView的Child的个数</span><br><span class="line">        int childCount = parent.getChildCount();</span><br><span class="line">        //遍历每个item,分别获取他们的位置信息,然后在绘制对应的分割线</span><br><span class="line">        for (int i=0;i&lt;childCount;i++)&#123;</span><br><span class="line">            View view = parent.getChildAt(i);//获取每个item对象</span><br><span class="line"></span><br><span class="line">            /**</span><br><span class="line">             * 绘制轴点</span><br><span class="line">             */</span><br><span class="line">            // 轴点 = 圆 = 圆心(x,y)</span><br><span class="line"></span><br><span class="line">            float centerX = view.getLeft() - itemView_leftinterval/3;</span><br><span class="line">            float centerY = view.getTop() - itemView_topintervarl+(itemView_topintervarl+view.getHeight()/2);</span><br><span class="line">            // 绘制轴点圆</span><br><span class="line">            //c.drawCircle(centerX,centerY,circle_radius,mPaint);</span><br><span class="line">            c.drawBitmap(mIcon,centerX-circle_radius,centerY-circle_radius,mPaint);</span><br><span class="line"></span><br><span class="line">            /**</span><br><span class="line">             * 绘制上半轴线</span><br><span class="line">             */</span><br><span class="line">            // 上端点坐标(x,y)</span><br><span class="line">            float upLine_up_x = centerX;</span><br><span class="line">            float upLine_up_y =view.getTop()-itemView_topintervarl;</span><br><span class="line"></span><br><span class="line">            // 下端点坐标(x,y)</span><br><span class="line">            float upLine_down_x = centerX;</span><br><span class="line">            float upLine_down_y = centerY-circle_radius;</span><br><span class="line"></span><br><span class="line">            c.drawLine(upLine_up_x,upLine_up_y,upLine_down_x,upLine_down_y,mPaint);//绘制下半轴线</span><br><span class="line"></span><br><span class="line">            /**</span><br><span class="line">             * 绘制下半轴线</span><br><span class="line">             */</span><br><span class="line">            // 上端点坐标(x,y)</span><br><span class="line">            float bottomLine_up_x = centerX;</span><br><span class="line">            float bottom_up_y = centerY + circle_radius;</span><br><span class="line"></span><br><span class="line">            // 下端点坐标(x,y)</span><br><span class="line">            float bottomLine_bottom_x = centerX;</span><br><span class="line">            float bottomLine_bottom_y = view.getBottom();</span><br><span class="line"></span><br><span class="line">            //绘制下半部轴线</span><br><span class="line">            c.drawLine(bottomLine_up_x, bottom_up_y, bottomLine_bottom_x, bottomLine_bottom_y, mPaint);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            /**</span><br><span class="line">             * 绘制左边时间文本</span><br><span class="line">             */</span><br><span class="line">          int index =  parent.getChildAdapterPosition(view);</span><br><span class="line">          //绘制时间文本起始位置</span><br><span class="line">          float Text_x = view.getLeft()-itemView_leftinterval*5/6;</span><br><span class="line">          float Text_y = upLine_down_y;</span><br><span class="line"></span><br><span class="line">          //根据item位置设置时间</span><br><span class="line"></span><br><span class="line">            switch (index)&#123;</span><br><span class="line">                case 0:</span><br><span class="line">                    //设置绘制日期</span><br><span class="line">                    c.drawText(&quot;13:40&quot;,Text_x,Text_y,mPaint1);</span><br><span class="line">                    c.drawText(&quot;2018.4.03&quot;,Text_x+5,Text_y+20,mPaint2);</span><br><span class="line">                    break;</span><br><span class="line">                case 1:</span><br><span class="line">                    //设置绘制日期</span><br><span class="line">                    c.drawText(&quot;13:40&quot;,Text_x,Text_y,mPaint1);</span><br><span class="line">                    c.drawText(&quot;2018.4.03&quot;,Text_x+5,Text_y+20,mPaint2);</span><br><span class="line">                    break;</span><br><span class="line">                case 2:</span><br><span class="line">                    //设置绘制日期</span><br><span class="line">                    c.drawText(&quot;13:40&quot;,Text_x,Text_y,mPaint1);</span><br><span class="line">                    c.drawText(&quot;2018.4.03&quot;,Text_x+5,Text_y+20,mPaint2);</span><br><span class="line">                    break;</span><br><span class="line">                case 3:</span><br><span class="line">                    //设置绘制日期</span><br><span class="line">                    c.drawText(&quot;13:40&quot;,Text_x,Text_y,mPaint1);</span><br><span class="line">                    c.drawText(&quot;2018.4.03&quot;,Text_x+5,Text_y+20,mPaint2);</span><br><span class="line">                    break;</span><br><span class="line">                case 4:</span><br><span class="line">                    //设置绘制日期</span><br><span class="line">                    c.drawText(&quot;13:40&quot;,Text_x,Text_y,mPaint1);</span><br><span class="line">                    c.drawText(&quot;2018.4.03&quot;,Text_x+5,Text_y+20,mPaint2);</span><br><span class="line">                    break;</span><br><span class="line">                case 5:</span><br><span class="line">                    //设置绘制日期</span><br><span class="line">                    c.drawText(&quot;13:40&quot;,Text_x,Text_y,mPaint1);</span><br><span class="line">                    c.drawText(&quot;2018.4.03&quot;,Text_x+5,Text_y+20,mPaint2);</span><br><span class="line">                    break;</span><br><span class="line">                    default:</span><br><span class="line">                        c.drawText(&quot;已签收&quot;,Text_x,Text_y,mPaint1);</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>初始化数据,绑定RecyclerView</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line">public class MainActivity extends AppCompatActivity &#123;</span><br><span class="line"></span><br><span class="line">    private ArrayList&lt;HashMap&lt;String, Object&gt;&gt; itemlist;</span><br><span class="line">    private RecyclerView rl;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    protected void onCreate(Bundle savedInstanceState) &#123;</span><br><span class="line">        super.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line">        initData();</span><br><span class="line">        initView();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private void initData() &#123;</span><br><span class="line">        itemlist = new ArrayList&lt;HashMap&lt;String, Object&gt;&gt;();</span><br><span class="line">        HashMap&lt;String, Object&gt; map1 = new HashMap&lt;String, Object&gt;();</span><br><span class="line">        HashMap&lt;String, Object&gt; map2 = new HashMap&lt;String, Object&gt;();</span><br><span class="line">        HashMap&lt;String, Object&gt; map3 = new HashMap&lt;String, Object&gt;();</span><br><span class="line">        HashMap&lt;String, Object&gt; map4 = new HashMap&lt;String, Object&gt;();</span><br><span class="line">        HashMap&lt;String, Object&gt; map5 = new HashMap&lt;String, Object&gt;();</span><br><span class="line">        HashMap&lt;String, Object&gt; map6 = new HashMap&lt;String, Object&gt;();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        map1.put(&quot;ItemTitle&quot;, &quot;中国广州公司已发出&quot;);</span><br><span class="line">        map1.put(&quot;ItemText&quot;, &quot;发件人:妙卡迪文化公司&quot;);</span><br><span class="line">        itemlist.add(map1);</span><br><span class="line"></span><br><span class="line">        map2.put(&quot;ItemTitle&quot;, &quot;国际顺丰已收入&quot;);</span><br><span class="line">        map2.put(&quot;ItemText&quot;, &quot;等待中转&quot;);</span><br><span class="line">        itemlist.add(map2);</span><br><span class="line"></span><br><span class="line">        map3.put(&quot;ItemTitle&quot;, &quot;国际顺丰转件中&quot;);</span><br><span class="line">        map3.put(&quot;ItemText&quot;, &quot;下一站中国&quot;);</span><br><span class="line">        itemlist.add(map3);</span><br><span class="line"></span><br><span class="line">        map4.put(&quot;ItemTitle&quot;, &quot;中国顺丰已收入&quot;);</span><br><span class="line">        map4.put(&quot;ItemText&quot;, &quot;下一站江苏理工大学&quot;);</span><br><span class="line">        itemlist.add(map4);</span><br><span class="line"></span><br><span class="line">        map5.put(&quot;ItemTitle&quot;, &quot;中国顺丰派件中&quot;);</span><br><span class="line">        map5.put(&quot;ItemText&quot;, &quot;等待派件&quot;);</span><br><span class="line">        itemlist.add(map5);</span><br><span class="line"></span><br><span class="line">        map6.put(&quot;ItemTitle&quot;, &quot;江苏理工大学已签收&quot;);</span><br><span class="line">        map6.put(&quot;ItemText&quot;, &quot;收件人:darryrzhong&quot;);</span><br><span class="line">        itemlist.add(map6);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private void initView() &#123;</span><br><span class="line">        rl = findViewById(R.id.my_recycler_view);</span><br><span class="line">        LinearLayoutManager manager = new LinearLayoutManager(this);</span><br><span class="line">        rl.setLayoutManager(manager);</span><br><span class="line">        //当知道Adapter内Item的改变不会影响RecyclerView宽高的时候，可以设置为true让RecyclerView避免重新计算大小。</span><br><span class="line">        rl.setHasFixedSize(true);</span><br><span class="line">        rl.addItemDecoration(new DividerItemDecoration(this));//设置自定义分割线</span><br><span class="line">        MyAdapter adapter =  new MyAdapter(this,itemlist);</span><br><span class="line">        rl.setAdapter(adapter);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>至此,自定义RecyclerView就实现完成了.<br><img src="https://upload-images.jianshu.io/upload_images/5549640-97c34967e42aef5f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="TIM截图20190327231820.png"></p><h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章:"></a>参考文章:</h2><p><a href="https://www.jianshu.com/p/655ea359e3db" target="_blank" rel="noopener">Android 自定义View实战系列 ：时间轴</a></p><p>欢迎关注作者<a href="http://www.darryrzhong.site" target="_blank" rel="noopener">darryrzhong</a>,更多干货等你来拿哟.</p><h3 id="请赏个小红心！因为你的鼓励是我写作的最大动力！"><a href="#请赏个小红心！因为你的鼓励是我写作的最大动力！" class="headerlink" title="请赏个小红心！因为你的鼓励是我写作的最大动力！"></a>请赏个小红心！因为你的鼓励是我写作的最大动力！</h3><blockquote><p>更多精彩文章请关注</p><ul><li><a href="http://www.darryrzhong.xyz" target="_blank" rel="noopener">个人博客:darryrzhong</a></li><li><a href="https://juejin.im/user/5a6c3b19f265da3e49804988" target="_blank" rel="noopener">掘金</a></li><li><a href="https://www.jianshu.com/users/b7fdf53ec0b9/timeline" target="_blank" rel="noopener">简书</a></li><li><a href="https://segmentfault.com/u/darryrzhong_5ac59892a5882/articles" target="_blank" rel="noopener">SegmentFault</a></li><li><a href="https://www.imooc.com/u/6733207" target="_blank" rel="noopener">慕课网手记</a></li></ul></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;在Android开发中，时间轴的 UI非常常见，如下图：&lt;br&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/5549640-d7336ab6e9d578b9.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;TIM图片20190327232833.jpg&quot;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;储备知识:&lt;br&gt;1.自定义view基础&lt;br&gt;2.RecyclerView的使用&lt;br&gt;3.自定义RecyclerView.ItemDecoration&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;具体实现&quot;&gt;&lt;a href=&quot;#具体实现&quot; class=&quot;headerlink&quot; title=&quot;具体实现&quot;&gt;&lt;/a&gt;具体实现&lt;/h2&gt;&lt;p&gt;1.最终效果如下:&lt;br&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/5549640-7dcc8332e13a4132.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;TIM截图20190327231820.png&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Android" scheme="http://darryrzhong.xyz/categories/Android/"/>
    
    
      <category term="自定义view" scheme="http://darryrzhong.xyz/tags/%E8%87%AA%E5%AE%9A%E4%B9%89view/"/>
    
  </entry>
  
  <entry>
    <title>Android入门开源项目之仿开眼视频APP</title>
    <link href="http://darryrzhong.xyz/2019/03/27/Android%E5%85%A5%E9%97%A8%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AE%E4%B9%8B%E4%BB%BF%E5%BC%80%E7%9C%BC%E8%A7%86%E9%A2%91APP/"/>
    <id>http://darryrzhong.xyz/2019/03/27/Android入门开源项目之仿开眼视频APP/</id>
    <published>2019-03-27T03:49:03.000Z</published>
    <updated>2019-03-27T03:50:20.523Z</updated>
    
    <content type="html"><![CDATA[<h1 id="开眼短视频-OpenEyes"><a href="#开眼短视频-OpenEyes" class="headerlink" title="开眼短视频(OpenEyes)"></a>开眼短视频(OpenEyes)</h1><blockquote><p>仿照(开眼视频)Android端(<code>旧版UI,新版UI已改变</code>)做的一个App，每天更新一个精美短视频应用，一个非常美的短视频应用，UI界面基本上是参照开眼视频Android端来做的。 在该项目中，我采用的是Vitamio的视频播放器框架，下面具体介绍一下项目结构及实现功能和第三方引用.</p></blockquote><h2 id="项目结构"><a href="#项目结构" class="headerlink" title="项目结构"></a>项目结构</h2><p>1.主界面主要分【每日精选】 【发现更多】 【热门排行】三个模块.<br>效果图如下:<br><img src="https://upload-images.jianshu.io/upload_images/5549640-ef22c0941a6f9fdf.jpeg?imageMogr2/auto-orient/strip%7CimageView2/2/w/240" alt="每日精选.jpeg"></p><p><img src="https://upload-images.jianshu.io/upload_images/5549640-72381624c9e2d456.jpeg?imageMogr2/auto-orient/strip%7CimageView2/2/w/240" alt="发现更多.jpeg"></p><p><img src="https://upload-images.jianshu.io/upload_images/5549640-ea4e23af94e8b695.jpeg?imageMogr2/auto-orient/strip%7CimageView2/2/w/240" alt="热门排行.jpeg"></p><a id="more"></a><p>2.侧滑菜单界面:主要分【离线缓存】 【观看记录】 【热映电影】【分享】 【更多】 【天气】【关于】 【主题】 【个人中心】九个模块.<br>侧滑菜单界面如下:<br><img src="https://upload-images.jianshu.io/upload_images/5549640-f25802fff596cf38.jpeg?imageMogr2/auto-orient/strip%7CimageView2/2/w/240" alt="侧滑.jpeg"></p><p><img src="https://upload-images.jianshu.io/upload_images/5549640-e73fa825ffc5e8ba.jpeg?imageMogr2/auto-orient/strip%7CimageView2/2/w/240" alt="侧滑.jpeg"></p><h2 id="UI效果展示"><a href="#UI效果展示" class="headerlink" title="UI效果展示:"></a>UI效果展示:</h2><p>1.【离线缓存】:支持视频下载、存储空间提示、文件删除等功能</p><p><img src="https://upload-images.jianshu.io/upload_images/5549640-e6f0aa7c95496414.jpeg?imageMogr2/auto-orient/strip%7CimageView2/2/w/240" alt="无下载记录.jpeg"></p><p><img src="https://upload-images.jianshu.io/upload_images/5549640-22502ad67bd27a00.jpeg?imageMogr2/auto-orient/strip%7CimageView2/2/w/240" alt="已下载.jpeg"></p><p><img src="https://upload-images.jianshu.io/upload_images/5549640-6df934bdec5af60f.jpeg?imageMogr2/auto-orient/strip%7CimageView2/2/w/240" alt="删除.jpeg"></p><p>2.【观看记录】:实现账号同步观看记录、清空记录等功能</p><p><img src="https://upload-images.jianshu.io/upload_images/5549640-758ce1156da9ebf9.jpeg?imageMogr2/auto-orient/strip%7CimageView2/2/w/240" alt="观看记录.jpeg"></p><p><img src="https://upload-images.jianshu.io/upload_images/5549640-3e1ff91fa7453947.jpeg?imageMogr2/auto-orient/strip%7CimageView2/2/w/240" alt="观看记录.jpeg"></p><p>3.【热映电影】:实现最近影院热播电影介绍及预告片观看<br><img src="https://upload-images.jianshu.io/upload_images/5549640-35a505ad49db12ef.jpeg?imageMogr2/auto-orient/strip%7CimageView2/2/w/240" alt="电影介绍.jpeg"></p><p><img src="https://upload-images.jianshu.io/upload_images/5549640-394b659973461ca5.jpeg?imageMogr2/auto-orient/strip%7CimageView2/2/w/480" alt="预告观看.jpeg"></p><p>4.【分享】:实现微信、朋友圈、QQ空间、微博的第三方分享<br><img src="https://upload-images.jianshu.io/upload_images/5549640-62bf4c03c3bad879.jpeg?imageMogr2/auto-orient/strip%7CimageView2/2/w/240" alt="分享.jpeg"></p><p><img src="https://upload-images.jianshu.io/upload_images/5549640-7dda606a6448a767.jpeg?imageMogr2/auto-orient/strip%7CimageView2/2/w/240" alt="视频分享.jpeg"></p><p><img src="https://upload-images.jianshu.io/upload_images/5549640-63ba699c652a2db7.jpeg?imageMogr2/auto-orient/strip%7CimageView2/2/w/240" alt="朋友圈分享.jpeg"></p><p>5.【关键词搜索】:实现关键词搜索相关视频,同步搜索历史记录<br><img src="https://upload-images.jianshu.io/upload_images/5549640-200de7d533d9df94.jpeg?imageMogr2/auto-orient/strip%7CimageView2/2/w/240" alt="关键词搜索.jpeg"></p><p><img src="https://upload-images.jianshu.io/upload_images/5549640-b91201187b55d9b6.jpeg?imageMogr2/auto-orient/strip%7CimageView2/2/w/240" alt="搜索结果.jpeg"></p><p>6.【个人中心】 实现实名制手机注册登录,第三方qq登录,同步用户观看动态等功能</p><p><img src="https://upload-images.jianshu.io/upload_images/5549640-c5dab18383a13bc0.jpeg?imageMogr2/auto-orient/strip%7CimageView2/2/w/240" alt="Screenshot_2018-09-17-12-10-45.jpeg"></p><p><img src="https://upload-images.jianshu.io/upload_images/5549640-f74b79b7053f6f34.jpeg?imageMogr2/auto-orient/strip%7CimageView2/2/w/240" alt="Screenshot_2018-09-17-12-10-56.jpeg"></p><h1 id="主要技术介绍"><a href="#主要技术介绍" class="headerlink" title="主要技术介绍:"></a>主要技术介绍:</h1><p>1.使用到的第三方开源框架有：</p><ul><li><p><a href="https://github.com/ogaclejapan/SmartTabLayout" target="_blank" rel="noopener">Smarttablayout</a> <code>自定义ViewPager标题条，在滚动时为用户提供持续反馈</code></p></li><li><p><a href="https://github.com/JakeWharton/butterknife" target="_blank" rel="noopener">Butterknife</a>  <code>Android视图的字段和方法绑定</code></p></li><li><p><a href="https://github.com/mcxiaoke/android-volley" target="_blank" rel="noopener">Volley</a>  <code>android 网络加载框架</code></p></li><li><a href="https://github.com/liaohuqiu/android-Ultra-Pull-To-Refresh" target="_blank" rel="noopener">Ultra-Pull-To-Refresh</a> <code>下拉刷新框架</code></li><li><a href="https://github.com/facebook/fresco" target="_blank" rel="noopener">Fresco</a> <code>图片加载框架</code></li><li><a href="https://github.com/yixia/VitamioBundle" target="_blank" rel="noopener">Vitamio</a> <code>视频播放器框架</code></li><li><a href="https://github.com/rengwuxian/MaterialEditText" target="_blank" rel="noopener">MaterialEditText</a> <code>集成MaterialDesign风格的自定义EditText</code></li><li><a href="https://github.com/amitshekhariitbhu/Android-Debug-Database" target="_blank" rel="noopener">Android-Debug-Database</a><code>Debug版本下 实现网页查询数据库</code></li><li><a href="https://github.com/ikew0ng/SwipeBackLayout" target="_blank" rel="noopener">SwipeBackLayout</a> <code>ios右滑返回效果</code></li><li><a href="https://github.com/square/okhttp" target="_blank" rel="noopener">okhttp</a> <code>android 网络加载框架</code></li><li><a href="https://github.com/wyouflf/xUtils3" target="_blank" rel="noopener">xUtils3</a> <code>Android 集成工具类</code></li><li><a href="http://www.mob.com/" target="_blank" rel="noopener">MobSDK</a> <code>第三方sdk集成支持</code></li></ul><h1 id="APK下载地址"><a href="#APK下载地址" class="headerlink" title="APK下载地址:"></a>APK下载地址:</h1><p> <a href="https://fir.im/8psl" target="_blank" rel="noopener">点击下载</a></p><h1 id="项目地址"><a href="#项目地址" class="headerlink" title="项目地址"></a>项目地址</h1><p><a href="https://github.com/darryrzhong/OpenEyes" target="_blank" rel="noopener">github</a></p><h1 id="声明"><a href="#声明" class="headerlink" title="声明"></a>声明</h1><blockquote><p>【开眼短视频】是一款提供每日精选视频应用的app，非官方版本，仅作学习交流之用，数据来源于开眼视频App，数据接口均属于非正常渠道获取，请勿用于商业用途，原作公司拥有所有权利。如涉及侵权问题,请及时联系作者,感谢支持.</p></blockquote><h1 id="此项目属于入门级练手项目-不涉及复杂开发架构-如常用Retrfit-Rxjava-Okhttp-Mvp等-适合刚入门级别独立开发-项目中还存在少数bug-若发现-欢迎指正交流"><a href="#此项目属于入门级练手项目-不涉及复杂开发架构-如常用Retrfit-Rxjava-Okhttp-Mvp等-适合刚入门级别独立开发-项目中还存在少数bug-若发现-欢迎指正交流" class="headerlink" title="此项目属于入门级练手项目,不涉及复杂开发架构,如常用Retrfit+Rxjava+Okhttp+Mvp等,适合刚入门级别独立开发,项目中还存在少数bug,若发现,欢迎指正交流"></a><code>此项目属于入门级练手项目,不涉及复杂开发架构,如常用Retrfit+Rxjava+Okhttp+Mvp等,适合刚入门级别独立开发,项目中还存在少数bug,若发现,欢迎指正交流</code></h1><p>欢迎关注作者<a href="http://www.darryrzhong.site" target="_blank" rel="noopener">darryrzhong</a>,更多干货等你来拿哟.</p><h3 id="请赏个小红心！因为你的鼓励是我写作的最大动力！"><a href="#请赏个小红心！因为你的鼓励是我写作的最大动力！" class="headerlink" title="请赏个小红心！因为你的鼓励是我写作的最大动力！"></a>请赏个小红心！因为你的鼓励是我写作的最大动力！</h3><blockquote><p>更多精彩文章请关注</p><ul><li><a href="http://www.darryrzhong.xyz" target="_blank" rel="noopener">个人博客:darryrzhong</a></li><li><a href="https://juejin.im/user/5a6c3b19f265da3e49804988" target="_blank" rel="noopener">掘金</a></li><li><a href="https://www.jianshu.com/users/b7fdf53ec0b9/timeline" target="_blank" rel="noopener">简书</a></li><li><a href="https://segmentfault.com/u/darryrzhong_5ac59892a5882/articles" target="_blank" rel="noopener">SegmentFault</a></li><li><a href="https://www.imooc.com/u/6733207" target="_blank" rel="noopener">慕课网手记</a></li></ul></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;开眼短视频-OpenEyes&quot;&gt;&lt;a href=&quot;#开眼短视频-OpenEyes&quot; class=&quot;headerlink&quot; title=&quot;开眼短视频(OpenEyes)&quot;&gt;&lt;/a&gt;开眼短视频(OpenEyes)&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;仿照(开眼视频)Android端(&lt;code&gt;旧版UI,新版UI已改变&lt;/code&gt;)做的一个App，每天更新一个精美短视频应用，一个非常美的短视频应用，UI界面基本上是参照开眼视频Android端来做的。 在该项目中，我采用的是Vitamio的视频播放器框架，下面具体介绍一下项目结构及实现功能和第三方引用.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;项目结构&quot;&gt;&lt;a href=&quot;#项目结构&quot; class=&quot;headerlink&quot; title=&quot;项目结构&quot;&gt;&lt;/a&gt;项目结构&lt;/h2&gt;&lt;p&gt;1.主界面主要分【每日精选】 【发现更多】 【热门排行】三个模块.&lt;br&gt;效果图如下:&lt;br&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/5549640-ef22c0941a6f9fdf.jpeg?imageMogr2/auto-orient/strip%7CimageView2/2/w/240&quot; alt=&quot;每日精选.jpeg&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/5549640-72381624c9e2d456.jpeg?imageMogr2/auto-orient/strip%7CimageView2/2/w/240&quot; alt=&quot;发现更多.jpeg&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/5549640-ea4e23af94e8b695.jpeg?imageMogr2/auto-orient/strip%7CimageView2/2/w/240&quot; alt=&quot;热门排行.jpeg&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="开源Demo" scheme="http://darryrzhong.xyz/categories/%E5%BC%80%E6%BA%90Demo/"/>
    
    
      <category term="开源demo" scheme="http://darryrzhong.xyz/tags/%E5%BC%80%E6%BA%90demo/"/>
    
  </entry>
  
  <entry>
    <title>Android之AppBarLayout实现悬停吸附伸缩效果</title>
    <link href="http://darryrzhong.xyz/2019/03/27/Android%E4%B9%8BAppBarLayout%E5%AE%9E%E7%8E%B0%E6%82%AC%E5%81%9C%E5%90%B8%E9%99%84%E4%BC%B8%E7%BC%A9%E6%95%88%E6%9E%9C/"/>
    <id>http://darryrzhong.xyz/2019/03/27/Android之AppBarLayout实现悬停吸附伸缩效果/</id>
    <published>2019-03-27T03:47:26.000Z</published>
    <updated>2019-03-27T03:48:25.688Z</updated>
    
    <content type="html"><![CDATA[<p>前几天看到这样一个UI效果,然后自己也仿照实现了下:</p><p><img src="https://upload-images.jianshu.io/upload_images/5549640-9e3cecfad8df9334.gif?imageMogr2/auto-orient/strip" alt="开眼app个人中心.gif"></p><blockquote><p>看着挺酷的,也有很多App都用到了这个UI效果,比如开眼App和沪江开心词场就用到了.<br>所以下面就来简单实现一下这个UI效果吧.</p></blockquote><h1 id="组合三剑客"><a href="#组合三剑客" class="headerlink" title="组合三剑客"></a>组合三剑客</h1><p> 1.<a href="https://developer.android.google.cn/reference/android/support/design/widget/AppBarLayout" target="_blank" rel="noopener">AppBarLayout</a><br>2.CoordinatorLayout<br>3.<a href="https://developer.android.google.cn/reference/android/support/design/widget/CollapsingToolbarLayout" target="_blank" rel="noopener">CollapsingToolbarLayout</a></p><p>实现上面的UI效果需要将这三剑客的组合起来用,下面先介绍下这三个控件:</p><h2 id="AppBarLayout"><a href="#AppBarLayout" class="headerlink" title="AppBarLayout:"></a>AppBarLayout:</h2><p>1.AppBarLayout简单介绍</p><p>AppBarLayout是<code>android.support:design</code>包中的支持的控件,继承自LinearLayout,实际上就是一个垂直分布的LinearLayout.父类视图结构如下:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">public class AppBarLayout </span><br><span class="line">extends LinearLayout</span><br><span class="line"></span><br><span class="line">java.lang.Object </span><br><span class="line">   ↳  android.view.View</span><br><span class="line">      ↳ android.view.ViewGroup</span><br><span class="line">           ↳  android.widget.LinearLayout  </span><br><span class="line">              ↳ android.support.design.widget.AppBarLayout</span><br></pre></td></tr></table></figure></p><p>其中官方文档中有这么两句话尤为重要:</p><blockquote><p>This view depends heavily on being used as a direct child within a <code>CoordinatorLayout</code>. If you use AppBarLayout within a different <code>ViewGroup</code>, most of it’s functionality will not work.</p></blockquote><blockquote><p><code>AppBarLayout</code> also requires a separate scrolling sibling in order to know when to scroll. The binding is done through the <code>AppBarLayout.ScrollingViewBehavior</code> behavior class, meaning that you should set your scrolling view’s behavior to be an instance of <code>AppBarLayout.ScrollingViewBehavior</code>.</p></blockquote><p>意思就是说AppBarLayout 必须作为<code>CoordinatorLayout</code>的直接子类,否则很多功能是无法实现的.并且AppBarLayout 必须有一个能滚动的兄第ScrollView (实现了<code>NestedScrollView</code>,listview不可以哦),以此来通知AppBarLayout 何时进行滚动,兄弟View必须实现以下标识:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">app:layout_behavior=&quot;@string/appbar_scrolling_view_behavior&quot;</span><br></pre></td></tr></table></figure><a id="more"></a><p>官方给出的例子如下:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">&lt;android.support.design.widget.CoordinatorLayout</span><br><span class="line">         xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;</span><br><span class="line">         xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot;</span><br><span class="line">         android:layout_width=&quot;match_parent&quot;</span><br><span class="line">         android:layout_height=&quot;match_parent&quot;&gt;</span><br><span class="line"></span><br><span class="line">     &lt;android.support.v4.widget.NestedScrollView</span><br><span class="line">             android:layout_width=&quot;match_parent&quot;</span><br><span class="line">             android:layout_height=&quot;match_parent&quot;</span><br><span class="line">             app:layout_behavior=&quot;@string/appbar_scrolling_view_behavior&quot;&gt;</span><br><span class="line"></span><br><span class="line">         &lt;!-- Your scrolling content --&gt;</span><br><span class="line"></span><br><span class="line">     &lt;/android.support.v4.widget.NestedScrollView&gt;</span><br><span class="line"></span><br><span class="line">     &lt;android.support.design.widget.AppBarLayout</span><br><span class="line">             android:layout_height=&quot;wrap_content&quot;</span><br><span class="line">             android:layout_width=&quot;match_parent&quot;&gt;</span><br><span class="line"></span><br><span class="line">         &lt;android.support.v7.widget.Toolbar</span><br><span class="line">                 ...</span><br><span class="line">                 app:layout_scrollFlags=&quot;scroll|enterAlways&quot;/&gt;</span><br><span class="line"></span><br><span class="line">         &lt;android.support.design.widget.TabLayout</span><br><span class="line">                 ...</span><br><span class="line">                 app:layout_scrollFlags=&quot;scroll|enterAlways&quot;/&gt;</span><br><span class="line"></span><br><span class="line">     &lt;/android.support.design.widget.AppBarLayout&gt;</span><br><span class="line"></span><br><span class="line"> &lt;/android.support.design.widget.CoordinatorLayout&gt;</span><br></pre></td></tr></table></figure></p><p>2.AppBarLayout的具体使用</p><ul><li>AppBarLayout直接子View的几种响应方式<blockquote><p>AppbarLayout 可以指定当某个可滑动的兄弟View滑动手势改变时AppbarLayout 内部直接子View的响应动作,只要通过<code>app:layout_scrollFlags</code>属性来指定响应动作,<code>layout_scrollFlags</code>有5种响应动作,下面简单介绍下:</p></blockquote></li></ul><ol><li><p>app:layout_scrollFlags=”scroll”<br>当子view设置响应动作为<code>app:layout_scrollFlags=&quot;scroll&quot;</code>时,子view会随ScrollView 的滚动而滚动,就相当于这时的子view变成了ScrollView 的item了,会跟随item一起滚动.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;android.support.v7.widget.Toolbar</span><br><span class="line">                   android:layout_width=&quot;match_parent&quot;</span><br><span class="line">                   android:layout_height=&quot;?attr/actionBarSize&quot;</span><br><span class="line">                   app:title=&quot;AppbarLayout&quot;</span><br><span class="line">                   app:titleTextColor=&quot;@color/white&quot;</span><br><span class="line">                   app:layout_scrollFlags=&quot;scroll&quot;</span><br><span class="line">                   &gt;</span><br><span class="line"></span><br><span class="line">               &lt;/android.support.v7.widget.Toolbar&gt;</span><br></pre></td></tr></table></figure></li><li><p>app:layout_scrollFlags=”scroll|enterAlways”<br>当子view设置响应动作为<code>app:layout_scrollFlags=&quot;scroll|enterAlways&quot;</code>时,当ScrollView 向下滑动时，子View 将直接向下滑动，而不管ScrollView 是否在滑动。</p></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;android.support.v7.widget.Toolbar</span><br><span class="line">                   android:layout_width=&quot;match_parent&quot;</span><br><span class="line">                   android:layout_height=&quot;?attr/actionBarSize&quot;</span><br><span class="line">                   app:title=&quot;AppbarLayout&quot;</span><br><span class="line">                   app:titleTextColor=&quot;@color/white&quot;</span><br><span class="line">                   app:layout_scrollFlags=&quot;scroll|enterAlways&quot;</span><br><span class="line">                   /&gt;</span><br></pre></td></tr></table></figure><p>3.app:layout_scrollFlags=”scroll|enterAlways|enterAlwaysCollapsed”<br>当子view设置响应动作为<code>app:layout_scrollFlags=&quot;scroll|enterAlways|enterAlwaysCollapsed&quot;</code>时,<br>当ScrollView 向下滑动的时候，子View（设置了enterAlwaysCollapsed 的子View）下滑至折叠的高度，当ScrollView 到达滑动范围的结束值的时候，滑动View剩下的部分开始滑动。这个折叠的高度是通过子View的minimum height （最小高度）指定的。</p><p>简单来说,就是第二种的加强版,当ScrollView 向下滑动时候,子view先露出半个头,当ScrollView 下滑到顶时,子view的头就全露出来了.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;android.support.v7.widget.Toolbar</span><br><span class="line">                   android:layout_width=&quot;match_parent&quot;</span><br><span class="line">                   android:layout_height=&quot;200dp&quot;</span><br><span class="line">                   android:minHeight=&quot;?attr/actionBarSize&quot;</span><br><span class="line">                   app:title=&quot;AppbarLayout&quot;</span><br><span class="line">                   android:gravity=&quot;bottom&quot;</span><br><span class="line">                   android:layout_marginBottom=&quot;25dp&quot;</span><br><span class="line">                   app:titleTextColor=&quot;@color/white&quot;</span><br><span class="line">                   app:layout_scrollFlags=&quot;scroll|enterAlways|enterAlwaysCollapsed&quot;</span><br><span class="line">                   /&gt;</span><br></pre></td></tr></table></figure><p>4.app:layout_scrollFlags=”scroll|exitUntilCollapsed”<br>当子view设置响应动作为<code>app:layout_scrollFlags=&quot;scroll|exitUntilCollapsed&quot;</code>时,<br> 当ScrollView 向上滑动时，子View先响应滑动事件，滑动至折叠高度，也就是通过minimum height 设置的最小高度后，就固定不动了，再把滑动事件交给 scrollview,然后 scrollview才开始滑动。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;android.support.v7.widget.Toolbar</span><br><span class="line">                   android:layout_width=&quot;match_parent&quot;</span><br><span class="line">                   android:layout_height=&quot;200dp&quot;</span><br><span class="line">                   android:minHeight=&quot;?attr/actionBarSize&quot;</span><br><span class="line">                   app:title=&quot;AppbarLayout&quot;</span><br><span class="line">                   android:gravity=&quot;bottom&quot;</span><br><span class="line">                   app:titleTextColor=&quot;@color/white&quot;</span><br><span class="line">                   app:layout_scrollFlags=&quot;scroll|exitUntilCollapsed&quot;</span><br><span class="line">                   /&gt;</span><br></pre></td></tr></table></figure><ol start="5"><li>app:layout_scrollFlags=”scroll|snap”<br>当子view设置响应动作为<code>app:layout_scrollFlags=&quot;scroll|snap&quot;</code>时,当ScrollView 下滑到顶部时,如果子view只露出30%的话,子view就会自动折叠回去,如果露出60%的话,就会自动展开.</li></ol><p>简单来说,就是具有弹性且遵守就近原则,露的小就干脆不露头了,露的大,就全部出来了.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;android.support.v7.widget.Toolbar</span><br><span class="line">                   android:layout_width=&quot;match_parent&quot;</span><br><span class="line">                   android:layout_height=&quot;200dp&quot;</span><br><span class="line">                   android:minHeight=&quot;?attr/actionBarSize&quot;</span><br><span class="line">                   app:title=&quot;AppbarLayout&quot;</span><br><span class="line">                   android:gravity=&quot;bottom&quot;</span><br><span class="line">                   app:titleTextColor=&quot;@color/white&quot;</span><br><span class="line">                   app:layout_scrollFlags=&quot;scroll|snap&quot;</span><br><span class="line">                   /&gt;</span><br></pre></td></tr></table></figure><h2 id="CoordinatorLayout"><a href="#CoordinatorLayout" class="headerlink" title="CoordinatorLayout"></a>CoordinatorLayout</h2><p>CoordinatorLayout 用来调节和控制子View的滚动，而这些子View 的具体响应动作是通过 behavior 属性来指定的,你也可以根据需求自定义自己的behavior, 简单使用如下:,</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;android.support.design.widget.CoordinatorLayout</span><br><span class="line">         xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;</span><br><span class="line">         xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot;</span><br><span class="line">         android:layout_width=&quot;match_parent&quot;</span><br><span class="line">         android:layout_height=&quot;match_parent&quot;&gt;</span><br><span class="line"></span><br><span class="line">     &lt;android.support.v4.widget.NestedScrollView</span><br><span class="line">             android:layout_width=&quot;match_parent&quot;</span><br><span class="line">             android:layout_height=&quot;match_parent&quot;</span><br><span class="line">             app:layout_behavior=&quot;@string/appbar_scrolling_view_behavior&quot; &gt;</span><br><span class="line"> &lt;!-- 使用此属性指定响应 --&gt;</span><br><span class="line"></span><br><span class="line">         &lt;!-- Your scrolling content --&gt;</span><br><span class="line"></span><br><span class="line">     &lt;/android.support.v4.widget.NestedScrollView&gt;</span><br><span class="line"></span><br><span class="line"> &lt;/android.support.design.widget.CoordinatorLayout&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">   app:layout_behavior=&quot;@string/appbar_scrolling_view_behavior&quot; &gt;</span><br><span class="line">&lt;!-- 使用此属性指定响应 --&gt;</span><br></pre></td></tr></table></figure><h2 id="CollapsingToolbarLayout"><a href="#CollapsingToolbarLayout" class="headerlink" title="CollapsingToolbarLayout:"></a>CollapsingToolbarLayout:</h2><p>CollapsingToolbarLayout也是<code>android.support:design</code>包中的支持的控件,继承自FrameLayout.主要用于实现ToolBar的伸缩效果,而且必须为<code>AppBarLayout</code>的直接子View;</p><p>继承结构图如下:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">java.lang.Object </span><br><span class="line">   ↳ android.view.View  </span><br><span class="line">    ↳ android.view.ViewGroup  </span><br><span class="line">       ↳ android.widget.FrameLayout   </span><br><span class="line">          ↳  android.support.design.widget.CollapsingToolbarLayout</span><br></pre></td></tr></table></figure></p><p>主要使用到的方法如下:</p><ol><li>setCollapsedTitleGravity</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">void setCollapsedTitleGravity（int gravity）</span><br></pre></td></tr></table></figure><p>设置折叠标题和垂直重力的水平对齐方式，当折叠边界中有额外空间超出标题本身所需的空间时，将使用该对齐方式<br>相关的XML属性：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CollapsingToolbarLayout_collapsedTitleGravity</span><br></pre></td></tr></table></figure></p><p>2.setExpandedTitleGravity<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">void setExpandedTitleGravity（int gravity）</span><br></pre></td></tr></table></figure></p><p>设置展开标题和垂直重力的水平对齐方式，当扩展边界中有额外空间超出标题本身所需的空间时，将使用该对齐方式。<br>相关的XML属性：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CollapsingToolbarLayout_expandedTitleGravity</span><br></pre></td></tr></table></figure></p><p>3.setExpandedTitleTextColor<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">void setExpandedTitleTextColor（ColorStateList colors）</span><br></pre></td></tr></table></figure></p><p>设置展开标题的文本颜色。</p><p>4.setCollapsedTitleTextColor<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">void setCollapsedTitleTextColor（ColorStateList colors）</span><br></pre></td></tr></table></figure></p><p>设置折叠标题的文本颜色。</p><p>5.setCollapsedTitleTypeface<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">void setCollapsedTitleTypeface（字体字体）</span><br></pre></td></tr></table></figure></p><p>设置用于折叠标题的字体。</p><p>5.setExpandedTitleMarginBottom<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">void setExpandedTitleMarginBottom（int margin）</span><br></pre></td></tr></table></figure></p><p>以像素为单位设置底部展开的标题边距。<br>相关的XML属性：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CollapsingToolbarLayout_expandedTitleMarginBottom</span><br></pre></td></tr></table></figure></p><ol start="6"><li>固定Toolbar <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">app:layout_collapseMode=&quot;pin&quot;</span><br></pre></td></tr></table></figure></li></ol><p>6.<a href="https://developer.android.google.cn/reference/android/support/design/widget/CollapsingToolbarLayout.html#setExpandedTitleMargin(int,%20int,%20int,%20int" target="_blank" rel="noopener">更多方法见文档</a>)</p><blockquote><p>关于AppBarLayout的三剑客组合就介绍的差不多了,想进一步了解的可以去查阅官方文档,上面都给出了连接的.</p></blockquote><h3 id="特别说明"><a href="#特别说明" class="headerlink" title="特别说明:"></a>特别说明:</h3><p>三剑客配合使用，可以做出一些很炫酷的UI效果.<br>但是前提必须满足:AppbarLayout 要作为CoordinatorLayout 的直接子View，而CollapsingToolbarLayout 要作为AppbarLayout 的直接子View ，否则，上面展示的效果将实现不了.</p><h1 id="AppbarLayout实例展示"><a href="#AppbarLayout实例展示" class="headerlink" title="AppbarLayout实例展示"></a>AppbarLayout实例展示</h1><p>1.仿 [开眼App]个人中心效果</p><ul><li>.xml布局文件:</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span><br><span class="line">&lt;android.support.design.widget.CoordinatorLayout</span><br><span class="line"></span><br><span class="line">    xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;</span><br><span class="line">    android:layout_width=&quot;match_parent&quot;</span><br><span class="line">    android:layout_height=&quot;match_parent&quot;</span><br><span class="line">    xmlns:fresco=&quot;http://schemas.android.com/apk/res-auto&quot;</span><br><span class="line">    xmlns:imagetext=&quot;http://schemas.android.com/apk/res-auto&quot;</span><br><span class="line">    xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot;</span><br><span class="line">    android:orientation=&quot;vertical&quot;</span><br><span class="line">    android:background=&quot;@color/colorWhite&quot;</span><br><span class="line"></span><br><span class="line">    &gt;</span><br><span class="line"></span><br><span class="line">&lt;android.support.design.widget.AppBarLayout</span><br><span class="line">    android:id=&quot;@+id/center_appbar_layout&quot;</span><br><span class="line">    android:layout_width=&quot;match_parent&quot;</span><br><span class="line">    android:layout_height=&quot;wrap_content&quot;</span><br><span class="line">    app:elevation=&quot;0dp&quot;</span><br><span class="line">    android:background=&quot;@color/colorWhite&quot;</span><br><span class="line">    android:fitsSystemWindows=&quot;true&quot;</span><br><span class="line"></span><br><span class="line">    &gt;</span><br><span class="line"></span><br><span class="line">    &lt;android.support.design.widget.CollapsingToolbarLayout</span><br><span class="line">        android:id=&quot;@+id/collapsing_toobar&quot;</span><br><span class="line">        android:layout_width=&quot;match_parent&quot;</span><br><span class="line">        android:layout_height=&quot;260dp&quot;</span><br><span class="line">        app:layout_scrollFlags=&quot;scroll|exitUntilCollapsed&quot;</span><br><span class="line">        app:contentScrim=&quot;@color/colorGraylight&quot;</span><br><span class="line">        fresco:expandedTitleTextAppearance=&quot;@style/style_textsize1&quot;</span><br><span class="line">        fresco:collapsedTitleTextAppearance=&quot;@style/style_textsize&quot;</span><br><span class="line">        fresco:collapsedTitleGravity=&quot;left&quot;</span><br><span class="line">       fresco:expandedTitleMarginTop=&quot;185dp&quot;</span><br><span class="line">        fresco:expandedTitleGravity=&quot;left&quot;</span><br><span class="line">        fresco:expandedTitleMarginStart=&quot;30dp&quot;</span><br><span class="line">        &gt;</span><br><span class="line">        &lt;FrameLayout</span><br><span class="line">            app:layout_scrollFlags=&quot;scroll&quot;</span><br><span class="line">            android:layout_width=&quot;match_parent&quot;</span><br><span class="line">            android:layout_height=&quot;180dp&quot;&gt;</span><br><span class="line"></span><br><span class="line">            &lt;com.facebook.drawee.view.SimpleDraweeView</span><br><span class="line">                android:id=&quot;@+id/avatar_max&quot;</span><br><span class="line">                android:layout_width=&quot;match_parent&quot;</span><br><span class="line">                android:layout_height=&quot;170dp&quot; /&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            &lt;com.facebook.drawee.view.SimpleDraweeView</span><br><span class="line">                android:layout_marginLeft=&quot;20dp&quot;</span><br><span class="line">                android:layout_gravity=&quot;bottom&quot;</span><br><span class="line">                android:id=&quot;@+id/avatar_min&quot;</span><br><span class="line">                android:layout_width=&quot;70dp&quot;</span><br><span class="line">                android:layout_height=&quot;70dp&quot;</span><br><span class="line">                fresco:actualImageScaleType=&quot;centerCrop&quot;</span><br><span class="line">                fresco:placeholderImageScaleType=&quot;centerCrop&quot;</span><br><span class="line">                fresco:roundedCornerRadius=&quot;50dp&quot;</span><br><span class="line">                /&gt;</span><br><span class="line">        &lt;/FrameLayout&gt;</span><br><span class="line"></span><br><span class="line">        &lt;FrameLayout</span><br><span class="line">            android:layout_marginTop=&quot;180dp&quot;</span><br><span class="line">            app:layout_scrollFlags=&quot;scroll&quot;</span><br><span class="line">            android:layout_width=&quot;match_parent&quot;</span><br><span class="line">            android:layout_height=&quot;50dp&quot;</span><br><span class="line">            &gt;</span><br><span class="line"></span><br><span class="line">            &lt;Button</span><br><span class="line">                android:id=&quot;@+id/edit_btn&quot;</span><br><span class="line">                android:layout_width=&quot;60dp&quot;</span><br><span class="line">                android:layout_height=&quot;20dp&quot;</span><br><span class="line">                android:layout_marginRight=&quot;20dp&quot;</span><br><span class="line">                android:layout_gravity=&quot;right|center_vertical&quot;</span><br><span class="line">                android:background=&quot;@drawable/login_btn&quot;</span><br><span class="line">                android:gravity=&quot;center&quot;</span><br><span class="line">                android:text=&quot;编辑资料&quot;</span><br><span class="line">                android:textColor=&quot;@color/colorBlacklight&quot;</span><br><span class="line">                android:textSize=&quot;10sp&quot; /&gt;</span><br><span class="line">        &lt;/FrameLayout&gt;</span><br><span class="line"></span><br><span class="line">        &lt;TextView</span><br><span class="line">           android:layout_marginTop=&quot;230dp&quot;</span><br><span class="line">            app:layout_scrollFlags=&quot;scroll&quot;</span><br><span class="line">            android:textSize=&quot;10sp&quot;</span><br><span class="line">            android:id=&quot;@+id/date&quot;</span><br><span class="line">            android:layout_marginLeft=&quot;20dp&quot;</span><br><span class="line">            android:text=&quot;2018.07.08注册&quot;</span><br><span class="line">            android:textColor=&quot;@color/colorGraylight&quot;</span><br><span class="line">            android:layout_width=&quot;match_parent&quot;</span><br><span class="line">            android:layout_height=&quot;wrap_content&quot; /&gt;</span><br><span class="line"></span><br><span class="line">        &lt;android.support.v7.widget.Toolbar</span><br><span class="line">            android:id=&quot;@+id/toolbar&quot;</span><br><span class="line">            android:layout_width=&quot;match_parent&quot;</span><br><span class="line">            app:layout_collapseMode=&quot;pin&quot;</span><br><span class="line">            android:layout_height=&quot;?attr/actionBarSize&quot;</span><br><span class="line">            &gt;</span><br><span class="line">        &lt;/android.support.v7.widget.Toolbar&gt;</span><br><span class="line">    &lt;/android.support.design.widget.CollapsingToolbarLayout&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &lt;LinearLayout</span><br><span class="line">        android:gravity=&quot;center_vertical&quot;</span><br><span class="line">        android:layout_marginTop=&quot;20dp&quot;</span><br><span class="line">        android:background=&quot;@color/colorGrayalpha&quot;</span><br><span class="line">        android:layout_width=&quot;match_parent&quot;</span><br><span class="line">        android:layout_height=&quot;70dp&quot;&gt;</span><br><span class="line"></span><br><span class="line">        &lt;openeyes.dr.openeyes.widget.CustomImageTextView</span><br><span class="line">            android:id=&quot;@+id/works&quot;</span><br><span class="line">            android:layout_marginLeft=&quot;40dp&quot;</span><br><span class="line">            android:layout_width=&quot;wrap_content&quot;</span><br><span class="line">            android:layout_height=&quot;wrap_content&quot;</span><br><span class="line">            imagetext:image=&quot;@drawable/works2&quot;</span><br><span class="line">            imagetext:text=&quot;@string/works&quot;</span><br><span class="line">            imagetext:textColor=&quot;@color/colorGraylight&quot;</span><br><span class="line">            &gt;</span><br><span class="line">        &lt;/openeyes.dr.openeyes.widget.CustomImageTextView&gt;</span><br><span class="line"></span><br><span class="line">        &lt;openeyes.dr.openeyes.widget.CustomImageTextView</span><br><span class="line">            android:id=&quot;@+id/attention&quot;</span><br><span class="line">            android:layout_marginLeft=&quot;90dp&quot;</span><br><span class="line">            android:layout_width=&quot;wrap_content&quot;</span><br><span class="line">            android:layout_height=&quot;wrap_content&quot;</span><br><span class="line">            imagetext:image=&quot;@drawable/attention6&quot;</span><br><span class="line">            imagetext:text=&quot;@string/attention&quot;</span><br><span class="line">            imagetext:textColor=&quot;@color/colorGraylight&quot;</span><br><span class="line">            &gt;</span><br><span class="line">        &lt;/openeyes.dr.openeyes.widget.CustomImageTextView&gt;</span><br><span class="line">        &lt;openeyes.dr.openeyes.widget.CustomImageTextView</span><br><span class="line">            android:id=&quot;@+id/fans&quot;</span><br><span class="line">            android:layout_marginLeft=&quot;90dp&quot;</span><br><span class="line">            android:layout_width=&quot;wrap_content&quot;</span><br><span class="line">            android:layout_height=&quot;wrap_content&quot;</span><br><span class="line">            imagetext:image=&quot;@drawable/works2&quot;</span><br><span class="line">            imagetext:text=&quot;@string/fans&quot;</span><br><span class="line">            imagetext:textColor=&quot;@color/colorGraylight&quot;</span><br><span class="line">            &gt;</span><br><span class="line">        &lt;/openeyes.dr.openeyes.widget.CustomImageTextView&gt;</span><br><span class="line">    &lt;/LinearLayout&gt;</span><br><span class="line"></span><br><span class="line">&lt;/android.support.design.widget.AppBarLayout&gt;</span><br><span class="line"></span><br><span class="line">    &lt;android.support.v7.widget.RecyclerView</span><br><span class="line">        android:id=&quot;@+id/recycle_state&quot;</span><br><span class="line">        android:layout_width=&quot;match_parent&quot;</span><br><span class="line">        android:layout_height=&quot;match_parent&quot;</span><br><span class="line"></span><br><span class="line">        app:layout_behavior=&quot;@string/appbar_scrolling_view_behavior&quot;</span><br><span class="line">        /&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;/android.support.design.widget.CoordinatorLayout&gt;</span><br></pre></td></tr></table></figure><ul><li>java文件:</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * Created by darryrzhong on 2018/9/5.</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line">public class PersonPageActivity extends SwipeBackActivity &#123;</span><br><span class="line"></span><br><span class="line">    @BindView(R.id.avatar_max)</span><br><span class="line">    SimpleDraweeView avatarBackground;</span><br><span class="line">    @BindView(R.id.avatar_min)</span><br><span class="line">    SimpleDraweeView avatarUser;</span><br><span class="line">    @BindView(R.id.date)</span><br><span class="line">    TextView registerDate;</span><br><span class="line">    @BindView(R.id.works)</span><br><span class="line">    CustomImageTextView works;</span><br><span class="line">    @BindView(R.id.attention)</span><br><span class="line">    CustomImageTextView attention;</span><br><span class="line">    @BindView(R.id.fans)</span><br><span class="line">    CustomImageTextView fans;</span><br><span class="line">    @BindView(R.id.center_appbar_layout)</span><br><span class="line">    AppBarLayout appBarLayout;</span><br><span class="line">    @BindView(R.id.collapsing_toobar)</span><br><span class="line">    CollapsingToolbarLayout collToobar;</span><br><span class="line">    @BindView(R.id.toolbar)</span><br><span class="line">    Toolbar toolbar;</span><br><span class="line">    @BindView(R.id.recycle_state)</span><br><span class="line">    RecyclerView recyclerView;</span><br><span class="line">    private SharedPreferences sharedPreferences = MyApplication.sharedPreferences;</span><br><span class="line">    private HistoryDB db;</span><br><span class="line">    private List&lt;HistoryDetails&gt; details  = null;</span><br><span class="line">    private DynamicStateRecyclerAdapter adapter;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    protected void onCreate(Bundle savedInstanceState) &#123;</span><br><span class="line">        super.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_person_page);</span><br><span class="line">        ButterKnife.bind(this);</span><br><span class="line">        initView();</span><br><span class="line">        initData();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private void initData() &#123;</span><br><span class="line">        db = new HistoryDB();</span><br><span class="line">        details= db.loadHistoryByUserId(sharedPreferences.getString(&quot;userId&quot;,&quot;000&quot;));</span><br><span class="line">        if (details==null||details.size()==0)&#123;</span><br><span class="line"></span><br><span class="line">        &#125;else &#123;</span><br><span class="line">            Collections.reverse(details);</span><br><span class="line">            adapter = new DynamicStateRecyclerAdapter(details,this);</span><br><span class="line">            LinearLayoutManager manager = new LinearLayoutManager(this);</span><br><span class="line">            manager.setOrientation(LinearLayoutManager.VERTICAL);</span><br><span class="line">            recyclerView.setLayoutManager(manager);</span><br><span class="line">            recyclerView.setAdapter(adapter);</span><br><span class="line">            recyclerView.setItemAnimator(new DefaultItemAnimator());//添加默认动画</span><br><span class="line">            //设置RecyclerView的item监听事件</span><br><span class="line">            setOnItemClickListener();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private void setOnItemClickListener() &#123;</span><br><span class="line"></span><br><span class="line">        adapter.setOnItemClickListener(new DynamicStateRecyclerAdapter.OnItemClickListener() &#123;</span><br><span class="line">            @Override</span><br><span class="line">            public void onItemClick(View itemview, DynamicStateRecyclerAdapter.MyViewHolder childview, int position) &#123;</span><br><span class="line">                initVideoDetail( position);//初始化视频详情界面数据并实现跳转</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 初始化视频详情界面数据,跳转至视频详情界面</span><br><span class="line">     * */</span><br><span class="line">    private void initVideoDetail(int position) &#123;</span><br><span class="line">        Intent intent = new Intent(PersonPageActivity.this, VideoDetailActivity.class);</span><br><span class="line">        Bundle bundle = new Bundle();</span><br><span class="line">        bundle.putString(&quot;title&quot;,details.get(position).getTitle());//获取标题</span><br><span class="line">        bundle.putString(&quot;time&quot;, details.get(position).getDetail());</span><br><span class="line">        bundle.putString(&quot;desc&quot;, details.get(position).getDesc());//视频描述</span><br><span class="line">        bundle.putString(&quot;blurred&quot;, details.get(position).getBlurred());//模糊图片地址</span><br><span class="line">        bundle.putString(&quot;feed&quot;, details.get(position).getPhoto());//图片地址</span><br><span class="line">        bundle.putString(&quot;video&quot;, details.get(position).getVideo());//视频播放地址</span><br><span class="line">        bundle.putInt(&quot;collect&quot;, details.get(position).getCollect());//收藏量</span><br><span class="line">        bundle.putInt(&quot;share&quot;, details.get(position).getShare());//分享量</span><br><span class="line">        bundle.putInt(&quot;reply&quot;, details.get(position).getReply());//回复数量</span><br><span class="line">        intent.putExtras(bundle);</span><br><span class="line">        startActivity(intent);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private void initView() &#123;</span><br><span class="line">        avatarBackground.setImageURI(Uri.parse(sharedPreferences.getString(&quot;userIcon&quot;,&quot;&quot;)));</span><br><span class="line">        avatarUser.setImageURI(Uri.parse(sharedPreferences.getString(&quot;userIcon&quot;,&quot;&quot;)));</span><br><span class="line">        toolbar.setTitle(sharedPreferences.getString(&quot;userName&quot;,&quot;&quot;));//设置标题</span><br><span class="line">        collToobar.setExpandedTitleColor(getResources().getColor(R.color.colorBlack));</span><br><span class="line">        setSupportActionBar(toolbar);</span><br><span class="line">        getSupportActionBar().setDisplayShowHomeEnabled(true);</span><br><span class="line">        toolbar.setNavigationIcon(R.drawable.back_black);</span><br><span class="line">        toolbar.setNavigationOnClickListener(new View.OnClickListener() &#123;</span><br><span class="line">            @Override</span><br><span class="line">            public void onClick(View view) &#123;</span><br><span class="line">                finish();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @OnClick(R.id.attention)</span><br><span class="line">    public void onClick()&#123;</span><br><span class="line">        startActivity(new Intent(this,MyAttentionActivity.class));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>效果展示:</p><p><img src="https://upload-images.jianshu.io/upload_images/5549640-7e47a81560bdce78.gif?imageMogr2/auto-orient/strip" alt="开眼app个人中心.gif"></p><p>2.仿[开眼App]搜索悬停界面:</p><ul><li><p>.xml布局文件:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span><br><span class="line">&lt;LinearLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;</span><br><span class="line">    android:layout_width=&quot;match_parent&quot;</span><br><span class="line">    android:layout_height=&quot;match_parent&quot;</span><br><span class="line">    xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot;</span><br><span class="line">    android:orientation=&quot;vertical&quot;&gt;</span><br><span class="line"></span><br><span class="line">    &lt;LinearLayout</span><br><span class="line">        android:layout_width=&quot;match_parent&quot;</span><br><span class="line">        android:layout_height=&quot;50dp&quot;&gt;</span><br><span class="line">        &lt;openeyes.dr.openeyes.widget.SearchEditText</span><br><span class="line">            android:id=&quot;@+id/search_editext&quot;</span><br><span class="line">            android:layout_marginLeft=&quot;20dp&quot;</span><br><span class="line">            android:background=&quot;@drawable/shape_search&quot;</span><br><span class="line">            android:layout_width=&quot;300dp&quot;</span><br><span class="line">            android:layout_height=&quot;30dp&quot;</span><br><span class="line">            android:paddingLeft=&quot;15dp&quot;</span><br><span class="line">            android:paddingRight=&quot;15dp&quot;</span><br><span class="line">            android:gravity=&quot;start|center_vertical&quot;</span><br><span class="line">            android:imeOptions=&quot;actionSearch&quot;</span><br><span class="line">            android:singleLine=&quot;true&quot;</span><br><span class="line">            android:hint=&quot;搜索视频、作者、用户及标签&quot;</span><br><span class="line">            android:textSize=&quot;13sp&quot;</span><br><span class="line"></span><br><span class="line">            /&gt;</span><br><span class="line"></span><br><span class="line">        &lt;TextView</span><br><span class="line">            android:id=&quot;@+id/cancle_main&quot;</span><br><span class="line">            android:textColor=&quot;@color/colorBlacklight&quot;</span><br><span class="line">            android:gravity=&quot;center&quot;</span><br><span class="line">            android:text=&quot;取消&quot;</span><br><span class="line">            android:layout_width=&quot;match_parent&quot;</span><br><span class="line">            android:layout_height=&quot;match_parent&quot; /&gt;</span><br><span class="line"></span><br><span class="line">    &lt;/LinearLayout&gt;</span><br><span class="line"></span><br><span class="line">    &lt;FrameLayout</span><br><span class="line">        android:id=&quot;@+id/history_fl&quot;</span><br><span class="line">        android:visibility=&quot;gone&quot;</span><br><span class="line">        android:layout_width=&quot;match_parent&quot;</span><br><span class="line">        android:layout_height=&quot;50dp&quot;</span><br><span class="line">        &gt;</span><br><span class="line"></span><br><span class="line">        &lt;TextView</span><br><span class="line">            android:layout_gravity=&quot;center_vertical&quot;</span><br><span class="line">            android:layout_marginLeft=&quot;20dp&quot;</span><br><span class="line">            android:textSize=&quot;20sp&quot;</span><br><span class="line">            android:text=&quot;搜索历史&quot;</span><br><span class="line">            android:textColor=&quot;@color/colorBlack&quot;</span><br><span class="line">            android:layout_width=&quot;wrap_content&quot;</span><br><span class="line">            android:layout_height=&quot;wrap_content&quot; /&gt;</span><br><span class="line">        &lt;TextView</span><br><span class="line">            android:id=&quot;@+id/delete_history&quot;</span><br><span class="line">            android:layout_marginRight=&quot;20dp&quot;</span><br><span class="line">            android:layout_gravity=&quot;center_vertical|right&quot;</span><br><span class="line">            android:textColor=&quot;@color/colorAniBtns&quot;</span><br><span class="line">            android:gravity=&quot;center&quot;</span><br><span class="line">            android:text=&quot;清空&quot;</span><br><span class="line">            android:textSize=&quot;13sp&quot;</span><br><span class="line">            android:layout_width=&quot;50dp&quot;</span><br><span class="line">            android:layout_height=&quot;wrap_content&quot; /&gt;</span><br><span class="line">    &lt;/FrameLayout&gt;</span><br><span class="line"></span><br><span class="line">    &lt;android.support.design.widget.CoordinatorLayout</span><br><span class="line">        android:layout_width=&quot;match_parent&quot;</span><br><span class="line">        android:layout_height=&quot;match_parent&quot;</span><br><span class="line">        android:orientation=&quot;vertical&quot;</span><br><span class="line">        android:background=&quot;@color/colorWhite&quot;</span><br><span class="line">        &gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &lt;android.support.design.widget.AppBarLayout</span><br><span class="line">            android:layout_width=&quot;match_parent&quot;</span><br><span class="line">            android:layout_height=&quot;wrap_content&quot;</span><br><span class="line">            android:background=&quot;@color/colorWhite&quot;</span><br><span class="line"></span><br><span class="line">            &gt;</span><br><span class="line">            &lt;android.support.v7.widget.RecyclerView</span><br><span class="line">                android:id=&quot;@+id/search_history_rv&quot;</span><br><span class="line">                android:layout_width=&quot;match_parent&quot;</span><br><span class="line">                android:layout_height=&quot;wrap_content&quot;</span><br><span class="line">                app:layout_scrollFlags=&quot;scroll&quot;</span><br><span class="line">                &gt;</span><br><span class="line"></span><br><span class="line">            &lt;/android.support.v7.widget.RecyclerView&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            &lt;TextView</span><br><span class="line">                android:layout_marginLeft=&quot;20dp&quot;</span><br><span class="line">                android:text=&quot;热搜关键词&quot;</span><br><span class="line">                android:textSize=&quot;20sp&quot;</span><br><span class="line">                android:textColor=&quot;@color/colorBlack&quot;</span><br><span class="line">                android:layout_width=&quot;match_parent&quot;</span><br><span class="line">                android:layout_height=&quot;wrap_content&quot; /&gt;</span><br><span class="line"></span><br><span class="line">        &lt;/android.support.design.widget.AppBarLayout&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &lt;android.support.v7.widget.RecyclerView</span><br><span class="line">            android:id=&quot;@+id/hot_search_rv&quot;</span><br><span class="line">            android:layout_width=&quot;match_parent&quot;</span><br><span class="line">            android:layout_height=&quot;match_parent&quot;</span><br><span class="line">            app:layout_behavior=&quot;@string/appbar_scrolling_view_behavior&quot;</span><br><span class="line">            &gt;</span><br><span class="line"></span><br><span class="line">        &lt;/android.support.v7.widget.RecyclerView&gt;</span><br><span class="line"></span><br><span class="line">    &lt;/android.support.design.widget.CoordinatorLayout&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;/LinearLayout&gt;</span><br></pre></td></tr></table></figure></li><li><p>java文件:</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br></pre></td><td class="code"><pre><span class="line">package openeyes.dr.openeyes.view.activity;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * Created by darryrzhong on 2018/9/10.</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line">public class SearchActivity extends AppCompatActivity &#123;</span><br><span class="line"></span><br><span class="line">    @BindView(R.id.search_editext)</span><br><span class="line">    SearchEditText searchEditText;</span><br><span class="line">    @BindView(R.id.cancle_main)</span><br><span class="line">    TextView cancleMain;</span><br><span class="line">    @BindView(R.id.history_fl)</span><br><span class="line">    FrameLayout hintLayout;</span><br><span class="line">    @BindView(R.id.delete_history)</span><br><span class="line">    TextView deleteHistory;</span><br><span class="line">    @BindView(R.id.search_history_rv)</span><br><span class="line">    RecyclerView recyclerSearch;</span><br><span class="line">    @BindView(R.id.hot_search_rv)</span><br><span class="line">    RecyclerView recyclerHot;</span><br><span class="line">    private String [] hotKeyWord = &#123;&quot;美食&quot;,&quot;旅行&quot;,&quot;生活小技巧&quot;,&quot;健身&quot;,&quot;汽车&quot;,&quot;广告&quot;,&quot;动画&quot;,</span><br><span class="line">            &quot;创意灵感&quot;,&quot;当下乱码&quot;,&quot;一条&quot;,&quot;日食记&quot;,&quot;视知TV&quot;&#125;;</span><br><span class="line">    private List&lt;SearchHistory&gt; searchHistories;</span><br><span class="line">    private List&lt;SearchHistory&gt; hotKeyWords = new ArrayList&lt;&gt;();;</span><br><span class="line">    private SearchRecyclerAdapter adapter;</span><br><span class="line">    private SearchDB db;</span><br><span class="line">    private SearchRecyclerAdapter adapter1;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    protected void onCreate(@Nullable Bundle savedInstanceState) &#123;</span><br><span class="line">        super.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_search);</span><br><span class="line">        ButterKnife.bind(this);</span><br><span class="line">        initData();</span><br><span class="line">        setListener();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private void initData() &#123;</span><br><span class="line">        db = new SearchDB();</span><br><span class="line">        hotKeyWords.clear();</span><br><span class="line">        for (String keyWord:hotKeyWord)&#123;</span><br><span class="line">            hotKeyWords.add(new SearchHistory(keyWord));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        LinearLayoutManager manager = new LinearLayoutManager(this);</span><br><span class="line">        manager.setOrientation(LinearLayout.VERTICAL);</span><br><span class="line">        recyclerHot.setLayoutManager(manager);</span><br><span class="line">        adapter = new SearchRecyclerAdapter(hotKeyWords);</span><br><span class="line">        recyclerHot.setAdapter(adapter);</span><br><span class="line">        recyclerHot.setItemAnimator(new DefaultItemAnimator());</span><br><span class="line"></span><br><span class="line">        searchHistories = db.loadSearchHistoryAll();</span><br><span class="line">        if (searchHistories==null||searchHistories.size()==0)&#123;</span><br><span class="line">            hintLayout.setVisibility(View.GONE);</span><br><span class="line">            recyclerSearch.setVisibility(View.GONE);</span><br><span class="line">        &#125;else &#123;</span><br><span class="line">            hintLayout.setVisibility(View.VISIBLE);</span><br><span class="line">            Collections.reverse(searchHistories);</span><br><span class="line">            LinearLayoutManager manager1 = new LinearLayoutManager(this);</span><br><span class="line">            manager.setOrientation(LinearLayout.VERTICAL);</span><br><span class="line">            recyclerSearch.setLayoutManager(manager1);</span><br><span class="line">            adapter1 = new SearchRecyclerAdapter(searchHistories);</span><br><span class="line">            recyclerSearch.setAdapter(adapter1);</span><br><span class="line">            recyclerSearch.setItemAnimator(new DefaultItemAnimator());//添加默认动画</span><br><span class="line">            adapter1.setOnItemClickListener(new SearchRecyclerAdapter.OnItemClickListener() &#123;</span><br><span class="line">                @Override</span><br><span class="line">                public void onItemClick(View itemview, SearchRecyclerAdapter.MyViewHolder childview, int position) &#123;</span><br><span class="line">                    Intent intent = new Intent(SearchActivity.this,SearchResultActivity.class);</span><br><span class="line">                    Bundle bundle = new Bundle();</span><br><span class="line">                    bundle.putString(&quot;keyWord&quot;,searchHistories.get(position).getKeyWord());</span><br><span class="line">                    intent.putExtras(bundle);</span><br><span class="line">                    startActivity(intent);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private void setListener() &#123;</span><br><span class="line">        searchEditText.setOnKeyListener(new View.OnKeyListener() &#123;</span><br><span class="line">            @Override</span><br><span class="line">            public boolean onKey(View view, int keyCode, KeyEvent keyEvent) &#123;</span><br><span class="line">                if (keyCode==KeyEvent.KEYCODE_ENTER&amp;&amp;keyEvent.getAction()==KeyEvent.ACTION_DOWN)&#123;</span><br><span class="line">                       String keyWord = searchEditText.getText().toString().trim();</span><br><span class="line">                       if (&quot;&quot;.equals(keyWord))&#123;</span><br><span class="line">                           ToastUtil.showToast(SearchActivity.this,&quot;请输入搜索内容&quot;);</span><br><span class="line">                       &#125;else &#123;</span><br><span class="line">                           SearchHistory searchHistory = new SearchHistory(keyWord);</span><br><span class="line">                           List&lt;SearchHistory&gt; temp = db.loadSearchByKeyWord(keyWord);</span><br><span class="line">                           if (temp==null)&#123;</span><br><span class="line">                               db.saveOrUpdate(searchHistory);</span><br><span class="line">                           &#125;else if (temp.size()==0)&#123;</span><br><span class="line">                               db.saveOrUpdate(searchHistory);</span><br><span class="line">                           &#125;</span><br><span class="line">                           Intent intent = new Intent(SearchActivity.this,SearchResultActivity.class);</span><br><span class="line">                           Bundle bundle = new Bundle();</span><br><span class="line">                           bundle.putString(&quot;keyWord&quot;,keyWord);</span><br><span class="line">                           intent.putExtras(bundle);</span><br><span class="line">                           startActivity(intent);</span><br><span class="line">                       &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                return false;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        adapter.setOnItemClickListener(new SearchRecyclerAdapter.OnItemClickListener() &#123;</span><br><span class="line">            @Override</span><br><span class="line">            public void onItemClick(View itemview, SearchRecyclerAdapter.MyViewHolder childview, int position) &#123;</span><br><span class="line">                Intent intent = new Intent(SearchActivity.this,SearchResultActivity.class);</span><br><span class="line">                Bundle bundle = new Bundle();</span><br><span class="line">                bundle.putString(&quot;keyWord&quot;,hotKeyWords.get(position).getKeyWord());</span><br><span class="line">                intent.putExtras(bundle);</span><br><span class="line">                startActivity(intent);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @OnClick(&#123;R.id.cancle_main,R.id.delete_history,R.id.search_editext&#125;)</span><br><span class="line">    public void onClick(View v)&#123;</span><br><span class="line">        switch (v.getId())&#123;</span><br><span class="line">            case R.id.cancle_main:</span><br><span class="line">                finish();</span><br><span class="line">                break;</span><br><span class="line">            case R.id.delete_history:</span><br><span class="line">                try &#123;</span><br><span class="line">                    db.delTable();</span><br><span class="line">                &#125; catch (DbException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">                initData();</span><br><span class="line"></span><br><span class="line">                break;</span><br><span class="line">            case R.id.search_editext:</span><br><span class="line">                break;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    protected void onResume() &#123;</span><br><span class="line">        super.onResume();</span><br><span class="line">        initData();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>效果展示:</p><p><img src="https://upload-images.jianshu.io/upload_images/5549640-1e6bdf17608d33ae.gif?imageMogr2/auto-orient/strip" alt="开眼app搜索记录.gif"></p><blockquote><p>好了,到这里关于AppBarLayout三剑客的基本使用就介绍完了,使用三剑客能够实现许多炫酷的UI效果,感兴趣的朋友可以自行自定义.</p></blockquote><p>欢迎关注作者<a href="http://www.darryrzhong.site" target="_blank" rel="noopener">darryrzhong</a>,更多干货等你来拿哟.</p><h3 id="请赏个小红心！因为你的鼓励是我写作的最大动力！"><a href="#请赏个小红心！因为你的鼓励是我写作的最大动力！" class="headerlink" title="请赏个小红心！因为你的鼓励是我写作的最大动力！"></a>请赏个小红心！因为你的鼓励是我写作的最大动力！</h3><blockquote><p>更多精彩文章请关注</p><ul><li><a href="http://www.darryrzhong.xyz" target="_blank" rel="noopener">个人博客:darryrzhong</a></li><li><a href="https://juejin.im/user/5a6c3b19f265da3e49804988" target="_blank" rel="noopener">掘金</a></li><li><a href="https://www.jianshu.com/users/b7fdf53ec0b9/timeline" target="_blank" rel="noopener">简书</a></li><li><a href="https://segmentfault.com/u/darryrzhong_5ac59892a5882/articles" target="_blank" rel="noopener">SegmentFault</a></li><li><a href="https://www.imooc.com/u/6733207" target="_blank" rel="noopener">慕课网手记</a></li></ul></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;前几天看到这样一个UI效果,然后自己也仿照实现了下:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/5549640-9e3cecfad8df9334.gif?imageMogr2/auto-orient/strip&quot; alt=&quot;开眼app个人中心.gif&quot;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;看着挺酷的,也有很多App都用到了这个UI效果,比如开眼App和沪江开心词场就用到了.&lt;br&gt;所以下面就来简单实现一下这个UI效果吧.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;组合三剑客&quot;&gt;&lt;a href=&quot;#组合三剑客&quot; class=&quot;headerlink&quot; title=&quot;组合三剑客&quot;&gt;&lt;/a&gt;组合三剑客&lt;/h1&gt;&lt;p&gt; 1.&lt;a href=&quot;https://developer.android.google.cn/reference/android/support/design/widget/AppBarLayout&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;AppBarLayout&lt;/a&gt;&lt;br&gt;2.CoordinatorLayout&lt;br&gt;3.&lt;a href=&quot;https://developer.android.google.cn/reference/android/support/design/widget/CollapsingToolbarLayout&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;CollapsingToolbarLayout&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;实现上面的UI效果需要将这三剑客的组合起来用,下面先介绍下这三个控件:&lt;/p&gt;
&lt;h2 id=&quot;AppBarLayout&quot;&gt;&lt;a href=&quot;#AppBarLayout&quot; class=&quot;headerlink&quot; title=&quot;AppBarLayout:&quot;&gt;&lt;/a&gt;AppBarLayout:&lt;/h2&gt;&lt;p&gt;1.AppBarLayout简单介绍&lt;/p&gt;
&lt;p&gt;AppBarLayout是&lt;code&gt;android.support:design&lt;/code&gt;包中的支持的控件,继承自LinearLayout,实际上就是一个垂直分布的LinearLayout.父类视图结构如下:&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;public class AppBarLayout &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;extends LinearLayout&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;java.lang.Object &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   ↳  android.view.View&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      ↳ android.view.ViewGroup&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           ↳  android.widget.LinearLayout  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;              ↳ android.support.design.widget.AppBarLayout&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;其中官方文档中有这么两句话尤为重要:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;This view depends heavily on being used as a direct child within a &lt;code&gt;CoordinatorLayout&lt;/code&gt;. If you use AppBarLayout within a different &lt;code&gt;ViewGroup&lt;/code&gt;, most of it’s functionality will not work.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;AppBarLayout&lt;/code&gt; also requires a separate scrolling sibling in order to know when to scroll. The binding is done through the &lt;code&gt;AppBarLayout.ScrollingViewBehavior&lt;/code&gt; behavior class, meaning that you should set your scrolling view’s behavior to be an instance of &lt;code&gt;AppBarLayout.ScrollingViewBehavior&lt;/code&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;意思就是说AppBarLayout 必须作为&lt;code&gt;CoordinatorLayout&lt;/code&gt;的直接子类,否则很多功能是无法实现的.并且AppBarLayout 必须有一个能滚动的兄第ScrollView (实现了&lt;code&gt;NestedScrollView&lt;/code&gt;,listview不可以哦),以此来通知AppBarLayout 何时进行滚动,兄弟View必须实现以下标识:&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;app:layout_behavior=&amp;quot;@string/appbar_scrolling_view_behavior&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="Android" scheme="http://darryrzhong.xyz/categories/Android/"/>
    
    
      <category term="AppBarLayout" scheme="http://darryrzhong.xyz/tags/AppBarLayout/"/>
    
  </entry>
  
  <entry>
    <title>Android之xUtils-3.0数据库框架详解</title>
    <link href="http://darryrzhong.xyz/2019/03/27/Android%E4%B9%8BxUtils-3-0%E6%95%B0%E6%8D%AE%E5%BA%93%E6%A1%86%E6%9E%B6%E8%AF%A6%E8%A7%A3/"/>
    <id>http://darryrzhong.xyz/2019/03/27/Android之xUtils-3-0数据库框架详解/</id>
    <published>2019-03-27T03:45:54.000Z</published>
    <updated>2019-03-27T03:46:40.074Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>在Android 开发中,数据库模块是必不可少的.现在也有许多非常好用流行的数据库快速开发框架.今天主要介绍下xUtils下封装的数据库模块.</p></blockquote><h1 id="Android-常用数据库开发框架"><a href="#Android-常用数据库开发框架" class="headerlink" title="Android 常用数据库开发框架"></a>Android 常用数据库开发框架</h1><p>在这里列一下Android开发中常用的数据库框架,有情趣的可以自行了解下,顺便储备点知识.</p><p>1.<a href="http://ormlite.com/" target="_blank" rel="noopener">OrmLite</a><br>对象关系映射Lite（ORM Lite）提供了一些简单，轻量级的功能，用于将Java对象持久保存到SQL数据库，同时避免了更多标准ORM包的复杂性和开销。</p><p>2.<a href="https://github.com/LitePalFramework/LitePal" target="_blank" rel="noopener">LitePal</a><br>LitePal是一个开源的Android库，允许开发人员非常容易地使用SQLite数据库。您可以完成大部分数据库操作，而无需编写SQL语句，包括创建或升级表，crud操作，聚合函数等.LitePal的设置也非常简单，您可以在不到5分钟中将其集成到项目中。</p><p>3.<a href="https://github.com/greenrobot/greenDAO" target="_blank" rel="noopener">GreenDao</a><br>greenDAO是一款轻巧快捷的Android版ORM，可将对象映射到SQLite数据库。greenDAO针对Android进行了高度优化，性能卓越，占用内存极少。</p><p>4.<a href="https://github.com/Raizlabs/DBFlow" target="_blank" rel="noopener">DBFlow</a><br>一个功能强大，功能强大且非常简单的ORM android数据库库，带有注释处理功能。<br>该库建立在速度，性能和可接近性的基础之上。它不仅消除了大多数用于处理数据库的样板代码，而且还提供了一个强大而简单的API来管理交互。</p><p>5.<a href="https://github.com/realm/realm-java" target="_blank" rel="noopener">Realm</a><br>Realm是一个直接在手机，平板电脑或可穿戴设备中运行的移动数据库。此存储库包含Realm的Java版本的源代码，该版本目前仅在Android上运行。</p><hr><h1 id="xutils3-0数据库模块详解"><a href="#xutils3-0数据库模块详解" class="headerlink" title="xutils3.0数据库模块详解"></a>xutils3.0数据库模块详解</h1><h2 id="项目加载"><a href="#项目加载" class="headerlink" title="项目加载"></a>项目加载</h2><p>1.添加依赖<br>在app的build.gradle下添加以下依赖:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">compile &apos;org.xutils:xutils:3.5.0&apos;</span><br></pre></td></tr></table></figure></p><p><code>对于gradle3.0以上,compile已经被废弃了,需要使用api</code><br>如下:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">api &apos;org.xutils:xutils:3.5.0&apos;</span><br></pre></td></tr></table></figure></p><a id="more"></a><p>2.配置权限<br>在AndroidManifest中添加权限:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;uses-permission android:name=&quot;android.permission.WRITE_EXTERNAL_STORAGE&quot; /&gt;</span><br><span class="line">    </span><br><span class="line">&lt;uses-permission android:name=&quot;android.permission.READ_EXTERNAL_STORAGE&quot;/&gt;</span><br></pre></td></tr></table></figure></p><p>3.初始化<br>在application的onCreate中初始化:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">public void onCreate() &#123;</span><br><span class="line">    super.onCreate();</span><br><span class="line">    x.Ext.init(this);</span><br><span class="line">    x.Ext.setDebug(BuildConfig.DEBUG); // 是否输出debug日志, 开启debug会影响性能.</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><blockquote><p>以上就是xutils3.0的使用配置了,配置好并且初始化好下面我们就可以愉快的使用了</p></blockquote><h2 id="xutils-DB使用"><a href="#xutils-DB使用" class="headerlink" title="xutils-DB使用"></a>xutils-DB使用</h2><p>1.创建数据库帮助类:DatabaseOpenHelper<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 数据库帮助类</span><br><span class="line"> * Created by darryrzhong on 2018/9/23.</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line">public class DatabaseOpenHelper &#123;</span><br><span class="line">  private DbManager.DaoConfig daoConfig;</span><br><span class="line">  private static DbManager dbManager;</span><br><span class="line">  private final String DB_NAME=&quot;history.db&quot;;//数据库名</span><br><span class="line">  private final int VERSION = 1;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  private DatabaseOpenHelper()&#123;</span><br><span class="line">      //初始化数据库配置信息</span><br><span class="line">      daoConfig = new DbManager.DaoConfig()</span><br><span class="line">              .setDbName(DB_NAME)//设置数据库名称</span><br><span class="line">              .setDbVersion(VERSION)//设置初始版本号</span><br><span class="line">              .setDbOpenListener(new DbManager.DbOpenListener() &#123;//监听数据库打开</span><br><span class="line">                  @Override</span><br><span class="line">                  public void onDbOpened(DbManager db) &#123;</span><br><span class="line">                     db.getDatabase().enableWriteAheadLogging();</span><br><span class="line">                      //开启WAL, 对写入加速提升巨大(作者原话)</span><br><span class="line">                  &#125;</span><br><span class="line">              &#125;)</span><br><span class="line">              .setDbUpgradeListener(new DbManager.DbUpgradeListener() &#123;//监听数据库更新</span><br><span class="line">                  @Override</span><br><span class="line">                  public void onUpgrade(DbManager db, int oldVersion, int newVersion) &#123;</span><br><span class="line"></span><br><span class="line">                  &#125;</span><br><span class="line">              &#125;);</span><br><span class="line">      dbManager= x.getDb(daoConfig);//获取数据库管理类</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  //单例设计</span><br><span class="line">  public static DbManager getInstance()&#123;</span><br><span class="line">     if (dbManager==null)&#123;</span><br><span class="line">         DatabaseOpenHelper databaseOpenHelper = new DatabaseOpenHelper();</span><br><span class="line">     &#125;</span><br><span class="line">     return dbManager;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>2.创建JavaBean数据实体类<br>先介绍下注解字段意思:</p><blockquote><p>注意必须添加注解字段,否则数据库无法识别,且实体类必须要有无参构造,否则数据库可能创建不成功<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">@Table(name = &quot;details&quot;) 表名</span><br><span class="line"></span><br><span class="line"> @Column(name = &quot;userid&quot;) 字段名</span><br></pre></td></tr></table></figure></p></blockquote><p>实体类如下:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 历史记录详情表</span><br><span class="line"> * Created by darryrzhong on 2018/7/23.</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">@Table(name = &quot;details&quot;)//表名即实体类名</span><br><span class="line">public class HistoryDetails &#123;</span><br><span class="line">    @Column(name = &quot;id&quot;,isId = true,autoGen = true)//主键,自增</span><br><span class="line">    private int id;</span><br><span class="line">    @Column(name = &quot;userid&quot;)</span><br><span class="line">    private String userid;</span><br><span class="line">    @Column(name = &quot;photo&quot;)</span><br><span class="line">    private String photo;//视频封面</span><br><span class="line">    @Column(name = &quot;title&quot;)</span><br><span class="line">    private String title;//视频标题</span><br><span class="line">    @Column( name = &quot;detail&quot;)</span><br><span class="line">    private String detail;//视频分类and时长</span><br><span class="line">    @Column(name = &quot;date&quot;)</span><br><span class="line">    private String date;//观看日期</span><br><span class="line">    @Column(name = &quot;desc&quot;)</span><br><span class="line">    private String desc;//视频详情</span><br><span class="line">    @Column(name = &quot;blurred&quot;)</span><br><span class="line">    private String blurred;//模糊图片</span><br><span class="line">    @Column(name = &quot;video&quot;)</span><br><span class="line">    private String video;//视频播放地址</span><br><span class="line">    @Column(name = &quot;collect&quot;)</span><br><span class="line">    private int collect;//收藏量</span><br><span class="line">    @Column(name = &quot;share&quot;)</span><br><span class="line">    private int share;//分享量</span><br><span class="line">    @Column(name = &quot;reply&quot;)</span><br><span class="line">    private int reply;//回复量</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 无参数构造法不可私有化，否则数据库表格创建异常</span><br><span class="line">     * 若使用无参构造，容易引起数据插入只有一条。</span><br><span class="line">     */</span><br><span class="line">    public HistoryDetails()&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">    *</span><br><span class="line">    * @param photo 视频封面</span><br><span class="line">    * @param title 视频标题</span><br><span class="line">    * @param detail 视频分类And时间</span><br><span class="line">     *@param date 观看日期</span><br><span class="line">    * @param desc 视频详情</span><br><span class="line">    *@param blurred 迷糊图片</span><br><span class="line">    * @param video 视频播放地址</span><br><span class="line">    * @param collect 收藏量</span><br><span class="line">    * @param share 分享量</span><br><span class="line">    * @param reply 回复量</span><br><span class="line">    * */</span><br><span class="line"></span><br><span class="line">    public HistoryDetails(String photo, String title, String detail, String date, String desc, String blurred, String video, int collect, int share, int reply,String userid) &#123;</span><br><span class="line">        this.photo = photo;</span><br><span class="line">        this.title = title;</span><br><span class="line">        this.detail = detail;</span><br><span class="line">        this.date = date;</span><br><span class="line">        this.desc = desc;</span><br><span class="line">        this.blurred = blurred;</span><br><span class="line">        this.video = video;</span><br><span class="line">        this.collect = collect;</span><br><span class="line">        this.share = share;</span><br><span class="line">        this.reply = reply;</span><br><span class="line">        this.userid = userid;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getPhoto() &#123;</span><br><span class="line">        return photo;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setPhoto(String photo) &#123;</span><br><span class="line">        this.photo = photo;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getTitle() &#123;</span><br><span class="line">        return title;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setTitle(String title) &#123;</span><br><span class="line">        this.title = title;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getDetail() &#123;</span><br><span class="line">        return detail;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setDetail(String detail) &#123;</span><br><span class="line">        this.detail = detail;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getDate() &#123;</span><br><span class="line">        return date;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setDate(String date) &#123;</span><br><span class="line">        this.date = date;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getDesc() &#123;</span><br><span class="line">        return desc;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setDesc(String desc) &#123;</span><br><span class="line">        this.desc = desc;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getBlurred() &#123;</span><br><span class="line">        return blurred;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setBlurred(String blurred) &#123;</span><br><span class="line">        this.blurred = blurred;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getVideo() &#123;</span><br><span class="line">        return video;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setVideo(String video) &#123;</span><br><span class="line">        this.video = video;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public int getCollect() &#123;</span><br><span class="line">        return collect;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setCollect(int collect) &#123;</span><br><span class="line">        this.collect = collect;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public int getShare() &#123;</span><br><span class="line">        return share;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setShare(int share) &#123;</span><br><span class="line">        this.share = share;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public int getReply() &#123;</span><br><span class="line">        return reply;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setReply(int reply) &#123;</span><br><span class="line">        this.reply = reply;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getUserid() &#123;</span><br><span class="line">        return userid;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setUserid(String userid) &#123;</span><br><span class="line">        this.userid = userid;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3.创建数据操作类</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br></pre></td><td class="code"><pre><span class="line">public class HistoryDB &#123;</span><br><span class="line"></span><br><span class="line">    private DbManager dbManager;</span><br><span class="line">    private boolean succeed;//操作是否成功</span><br><span class="line">    boolean idDesc = true;//是否倒序，默认false</span><br><span class="line">    private List&lt;HistoryDetails&gt;  details =null;</span><br><span class="line">    private HistoryDetails historyDetails;</span><br><span class="line">    long count=0;</span><br><span class="line"></span><br><span class="line">    //初始化的DbManager对象</span><br><span class="line">    public HistoryDB()&#123;</span><br><span class="line">        dbManager=DatabaseOpenHelper.getInstance();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 将HistoryDetails实例存进数据库</span><br><span class="line">     * 保存新增</span><br><span class="line">     * @param historyDetails</span><br><span class="line">     *</span><br><span class="line">     */</span><br><span class="line"></span><br><span class="line">    public void saveHistory(HistoryDetails historyDetails)&#123;</span><br><span class="line"></span><br><span class="line">        try &#123;</span><br><span class="line">            dbManager.save(historyDetails);</span><br><span class="line">        &#125; catch (DbException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 新增或更新</span><br><span class="line">     *</span><br><span class="line">     * @param historyDetails</span><br><span class="line">     */</span><br><span class="line"></span><br><span class="line">    public void saveOrUpdate(HistoryDetails historyDetails)&#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            dbManager.saveOrUpdate(historyDetails);</span><br><span class="line">           // Log.e(&quot;log&quot;,&quot;save succeed!&quot;);</span><br><span class="line">        &#125; catch (DbException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 读取所有HistoryDetails信息</span><br><span class="line">     *</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">  public List&lt;HistoryDetails&gt; loadHistoryAll()&#123;</span><br><span class="line">      try &#123;</span><br><span class="line">          details=dbManager.selector(HistoryDetails.class).findAll();</span><br><span class="line">      &#125; catch (DbException e) &#123;</span><br><span class="line">          e.printStackTrace();</span><br><span class="line">      &#125;</span><br><span class="line">      return details;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 根据视频标题读取HistoryDetails信息</span><br><span class="line">     *</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line"></span><br><span class="line">    public List&lt;HistoryDetails&gt; loadHistoryByTitle(String title)&#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            details=dbManager.selector(HistoryDetails.class).where(&quot;title&quot;,&quot;==&quot;,title).findAll();</span><br><span class="line">        &#125; catch (DbException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        return details;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 根据用户id读取HistoryDetails信息</span><br><span class="line">     *</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line"></span><br><span class="line">    public List&lt;HistoryDetails&gt; loadHistoryByUserId(String userid)&#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            details=dbManager.selector(HistoryDetails.class).where(&quot;userid&quot;,&quot;==&quot;,userid).findAll();</span><br><span class="line">        &#125; catch (DbException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        return details;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 删除对象数据</span><br><span class="line">     *</span><br><span class="line">     *</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    public boolean delete(HistoryDetails historyDetails)&#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            dbManager.delete(historyDetails);</span><br><span class="line">            succeed=true;</span><br><span class="line">        &#125; catch (DbException e) &#123;</span><br><span class="line">            succeed=false;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        return succeed;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 删除表</span><br><span class="line">     *</span><br><span class="line">     * @throws DbException</span><br><span class="line">     */</span><br><span class="line"></span><br><span class="line">    private void delTable() throws  DbException&#123;</span><br><span class="line">        dbManager.dropTable(HistoryDetails.class);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    //关闭数据库</span><br><span class="line">    public void close()&#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            dbManager.close();</span><br><span class="line">        &#125; catch (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>4.使用数据库</p><p>创建以上操作类,就可以愉快的快速使用数据库了.</p><p>值得注意的是,xutils3并没有提供单独创建一张表的方法,他是在你调插入数据库操作的时候会判断是否存在这张表,如果不存在就会去创建,所以我们在取数据的时候需要判断表是否存在<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">db = new HistoryDB();</span><br><span class="line">       details= db.loadHistoryByUserId(sharedPreferences.getString(&quot;userId&quot;,&quot;000&quot;));</span><br><span class="line">      if (details==null||details.size()==0)&#123;//如果表为空的话则为null,</span><br><span class="line">          tvHint.setVisibility(View.VISIBLE);</span><br><span class="line">          compile.setVisibility(View.GONE);</span><br><span class="line">          cleanHint.setVisibility(View.GONE);</span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure></p><p>还有一点值得注意就是,xutils插入数据库时,相同数据是会重复插入的,<br>所以我们可以按自身需求去解决,例如我这里保存视频观看记录不需要重复插入数据.<br>所以我根据id判断数据是否存在,不存在则插入数据库保存:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">List&lt;HistoryDetails&gt; temp = hdb.loadHistoryByTitle(title);//同步默认账户观看记录</span><br><span class="line">                 if (temp==null)&#123;</span><br><span class="line">                     hdb.saveOrUpdate(historyDetails);//判断表是否存在</span><br><span class="line">                 &#125;else if (temp.size()==0)&#123;</span><br><span class="line">                     hdb.saveOrUpdate(historyDetails);//判断数据是否存在</span><br><span class="line">                 &#125;</span><br></pre></td></tr></table></figure></p><blockquote><p>xutils使用就这么简单的完成了数据库的编写,使用起来步骤简单明了,当然还有很多缺憾,所以数据库模块比较繁重的话还是推荐以上介绍的几种开发框架.</p></blockquote><p>欢迎关注作者<a href="http://www.darryrzhong.site" target="_blank" rel="noopener">darryrzhong</a>,更多干货等你来拿哟.</p><h3 id="请赏个小红心！因为你的鼓励是我写作的最大动力！"><a href="#请赏个小红心！因为你的鼓励是我写作的最大动力！" class="headerlink" title="请赏个小红心！因为你的鼓励是我写作的最大动力！"></a>请赏个小红心！因为你的鼓励是我写作的最大动力！</h3><blockquote><p>更多精彩文章请关注</p><ul><li><a href="http://www.darryrzhong.xyz" target="_blank" rel="noopener">个人博客:darryrzhong</a></li><li><a href="https://juejin.im/user/5a6c3b19f265da3e49804988" target="_blank" rel="noopener">掘金</a></li><li><a href="https://www.jianshu.com/users/b7fdf53ec0b9/timeline" target="_blank" rel="noopener">简书</a></li><li><a href="https://segmentfault.com/u/darryrzhong_5ac59892a5882/articles" target="_blank" rel="noopener">SegmentFault</a></li><li><a href="https://www.imooc.com/u/6733207" target="_blank" rel="noopener">慕课网手记</a></li></ul></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;在Android 开发中,数据库模块是必不可少的.现在也有许多非常好用流行的数据库快速开发框架.今天主要介绍下xUtils下封装的数据库模块.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;Android-常用数据库开发框架&quot;&gt;&lt;a href=&quot;#Android-常用数据库开发框架&quot; class=&quot;headerlink&quot; title=&quot;Android 常用数据库开发框架&quot;&gt;&lt;/a&gt;Android 常用数据库开发框架&lt;/h1&gt;&lt;p&gt;在这里列一下Android开发中常用的数据库框架,有情趣的可以自行了解下,顺便储备点知识.&lt;/p&gt;
&lt;p&gt;1.&lt;a href=&quot;http://ormlite.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;OrmLite&lt;/a&gt;&lt;br&gt;对象关系映射Lite（ORM Lite）提供了一些简单，轻量级的功能，用于将Java对象持久保存到SQL数据库，同时避免了更多标准ORM包的复杂性和开销。&lt;/p&gt;
&lt;p&gt;2.&lt;a href=&quot;https://github.com/LitePalFramework/LitePal&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;LitePal&lt;/a&gt;&lt;br&gt;LitePal是一个开源的Android库，允许开发人员非常容易地使用SQLite数据库。您可以完成大部分数据库操作，而无需编写SQL语句，包括创建或升级表，crud操作，聚合函数等.LitePal的设置也非常简单，您可以在不到5分钟中将其集成到项目中。&lt;/p&gt;
&lt;p&gt;3.&lt;a href=&quot;https://github.com/greenrobot/greenDAO&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;GreenDao&lt;/a&gt;&lt;br&gt;greenDAO是一款轻巧快捷的Android版ORM，可将对象映射到SQLite数据库。greenDAO针对Android进行了高度优化，性能卓越，占用内存极少。&lt;/p&gt;
&lt;p&gt;4.&lt;a href=&quot;https://github.com/Raizlabs/DBFlow&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;DBFlow&lt;/a&gt;&lt;br&gt;一个功能强大，功能强大且非常简单的ORM android数据库库，带有注释处理功能。&lt;br&gt;该库建立在速度，性能和可接近性的基础之上。它不仅消除了大多数用于处理数据库的样板代码，而且还提供了一个强大而简单的API来管理交互。&lt;/p&gt;
&lt;p&gt;5.&lt;a href=&quot;https://github.com/realm/realm-java&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Realm&lt;/a&gt;&lt;br&gt;Realm是一个直接在手机，平板电脑或可穿戴设备中运行的移动数据库。此存储库包含Realm的Java版本的源代码，该版本目前仅在Android上运行。&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&quot;xutils3-0数据库模块详解&quot;&gt;&lt;a href=&quot;#xutils3-0数据库模块详解&quot; class=&quot;headerlink&quot; title=&quot;xutils3.0数据库模块详解&quot;&gt;&lt;/a&gt;xutils3.0数据库模块详解&lt;/h1&gt;&lt;h2 id=&quot;项目加载&quot;&gt;&lt;a href=&quot;#项目加载&quot; class=&quot;headerlink&quot; title=&quot;项目加载&quot;&gt;&lt;/a&gt;项目加载&lt;/h2&gt;&lt;p&gt;1.添加依赖&lt;br&gt;在app的build.gradle下添加以下依赖:&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;compile &amp;apos;org.xutils:xutils:3.5.0&amp;apos;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;对于gradle3.0以上,compile已经被废弃了,需要使用api&lt;/code&gt;&lt;br&gt;如下:&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;api &amp;apos;org.xutils:xutils:3.5.0&amp;apos;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Android" scheme="http://darryrzhong.xyz/categories/Android/"/>
    
    
      <category term="xUtils" scheme="http://darryrzhong.xyz/tags/xUtils/"/>
    
  </entry>
  
  <entry>
    <title>Android常用之Butterknife使用详解</title>
    <link href="http://darryrzhong.xyz/2019/03/27/Android%E5%B8%B8%E7%94%A8%E4%B9%8BButterknife%E4%BD%BF%E7%94%A8%E8%AF%A6%E8%A7%A3/"/>
    <id>http://darryrzhong.xyz/2019/03/27/Android常用之Butterknife使用详解/</id>
    <published>2019-03-27T03:44:19.000Z</published>
    <updated>2019-03-27T03:45:13.792Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Butterknife简介"><a href="#Butterknife简介" class="headerlink" title="Butterknife简介"></a>Butterknife简介</h1><p><a href="https://github.com/JakeWharton/butterknife" target="_blank" rel="noopener">Butterknife</a>中文又名黄油刀,是 <a href="https://github.com/JakeWharton" target="_blank" rel="noopener">JakeWharton</a>大神开源的一款<code>Android视图的字段和方法绑定</code>快速注解框架.也是Android开发中比较常用的一款快速注解框架了,可以不用不断的重复<code>findViewById</code>,在各种场合下快速绑定view的多种事件,大大提高了开发的效率.</p><blockquote><p>为什么开发用Butterknife?</p></blockquote><p>1、强大的View绑定和Click事件处理功能，简化代码，提升开发效率<br>2、方便的处理Adapter里的ViewHolder绑定问题<br>3、运行时不会影响APP效率，使用配置方便<br>4、代码清晰，可读性强<br>5、…………</p><blockquote><p> 使用配置</p></blockquote><h2 id="在-Android-studio-项目中配置-Butterknife"><a href="#在-Android-studio-项目中配置-Butterknife" class="headerlink" title="在 Android studio 项目中配置:Butterknife:"></a>在 Android studio 项目中配置:Butterknife:</h2><h2 id="一-在主Moduel中的build-gradle中添加如下配置"><a href="#一-在主Moduel中的build-gradle中添加如下配置" class="headerlink" title="一.在主Moduel中的build.gradle中添加如下配置:"></a>一.在主Moduel中的<code>build.gradle</code>中添加如下配置:</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">dependencies &#123;</span><br><span class="line">    </span><br><span class="line">    implementation &apos;com.jakewharton:butterknife:8.8.1&apos;</span><br><span class="line">    annotationProcessor &apos;com.jakewharton:butterknife-compiler:8.8.1&apos;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>简单使用如下:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">class ExampleActivity extends Activity &#123;</span><br><span class="line">  @BindView(R.id.user) EditText username;</span><br><span class="line">  @BindView(R.id.pass) EditText password;</span><br><span class="line"></span><br><span class="line">  @BindString(R.string.login_error) String loginErrorMessage;</span><br><span class="line"></span><br><span class="line">  @OnClick(R.id.submit) void submit() &#123;</span><br><span class="line">    // TODO call server...</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  @Override public void onCreate(Bundle savedInstanceState) &#123;</span><br><span class="line">    super.onCreate(savedInstanceState);</span><br><span class="line">    setContentView(R.layout.simple_activity);</span><br><span class="line">    ButterKnife.bind(this);</span><br><span class="line">    // TODO Use fields...</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><a id="more"></a><h2 id="二-在Library-projects中使用-按个人需求而定"><a href="#二-在Library-projects中使用-按个人需求而定" class="headerlink" title="二.在Library projects中使用(按个人需求而定)"></a>二.在Library projects中使用(按个人需求而定)</h2><p>1.在 Android project的<code>build.gradle</code>中添加如下配置:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">buildscript &#123;</span><br><span class="line">  repositories &#123;</span><br><span class="line">    mavenCentral()</span><br><span class="line">   &#125;</span><br><span class="line">  dependencies &#123;</span><br><span class="line">    classpath &apos;com.jakewharton:butterknife-gradle-plugin:8.8.1&apos;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>2.在Library的<code>build.gradle</code>中添加如下配置:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">apply plugin: &apos;com.android.library&apos;</span><br><span class="line">apply plugin: &apos;com.jakewharton.butterknife&apos;</span><br></pre></td></tr></table></figure></p><blockquote><p>值得注意的是,在Library中使用Butterknife注解使用的是R2.而不是R.</p></blockquote><p>如下:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">class ExampleActivity extends Activity &#123;</span><br><span class="line">  @BindView(R2.id.user) EditText username;</span><br><span class="line">  @BindView(R2.id.pass) EditText password;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h1 id="ButterKnife的基本使用详解"><a href="#ButterKnife的基本使用详解" class="headerlink" title="ButterKnife的基本使用详解"></a>ButterKnife的基本使用详解</h1><blockquote><p> ButterKnife使用场景如下:</p></blockquote><p>1.在Activity中绑定ButterKnife:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">public class MainActivity extends AppCompatActivity &#123;</span><br><span class="line">  @BindView(R.id.butter)</span><br><span class="line">    Button button;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    protected void onCreate(Bundle savedInstanceState) &#123;</span><br><span class="line">        super.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line">        ButterKnife.bind(this);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @OnClick(R.id.butter)</span><br><span class="line">    public void onClick()&#123;</span><br><span class="line">        Log.e(&quot;111111&quot;,&quot;11111&quot;);</span><br><span class="line">        Toast.makeText(this, &quot;绑定单个view事件&quot;, Toast.LENGTH_SHORT).show();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><blockquote><p>值得注意的是:ButterKnife.bind(this)必须在初始化绑定布局文件之后,否则会报错</p></blockquote><p>2.在Fragment中绑定ButterKnife:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">public class ExampleFragment extends Fragment &#123;</span><br><span class="line"></span><br><span class="line">    private Unbinder unbinder;</span><br><span class="line">    @BindView(R.id.example)</span><br><span class="line">    Button example;</span><br><span class="line"></span><br><span class="line">    @Nullable</span><br><span class="line">    @Override</span><br><span class="line">    public View onCreateView(LayoutInflater inflater, @Nullable ViewGroup container, @Nullable Bundle savedInstanceState) &#123;</span><br><span class="line">       View view = View.inflate(getContext(),R.layout.fragment_example,null);</span><br><span class="line">        unbinder = ButterKnife.bind(this,view);</span><br><span class="line">        return view;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void onDestroyView() &#123;</span><br><span class="line">        super.onDestroyView();</span><br><span class="line">        unbinder.unbind();//视图销毁时必须解绑</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><blockquote><p>值得注意的是:在Fragment中需要在视图销毁时解绑Butterknife,否则会造成内存泄漏.</p></blockquote><p>3.在Adapter的ViewHolder中绑定Butterknife:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"> @NonNull</span><br><span class="line">    @Override</span><br><span class="line">    public MyViewHolder onCreateViewHolder(@NonNull ViewGroup parent, int viewType) &#123;</span><br><span class="line">        View itemView = LayoutInflater.from(parent.getContext()).inflate(R.layout.recy_dynamic_state_item,parent,false);</span><br><span class="line">        MyViewHolder myViewHolder = new MyViewHolder(itemView);//此处将view传入</span><br><span class="line">        itemView.setOnClickListener(this);</span><br><span class="line">        return myViewHolder;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">public class MyViewHolder extends RecyclerView.ViewHolder &#123;</span><br><span class="line">         @BindView(R.id.iv_photo)</span><br><span class="line">        SimpleDraweeView simpleDraweeView;</span><br><span class="line">         @BindView(R.id.tv_title)</span><br><span class="line">        TextView tvTitle;</span><br><span class="line">         @BindView(R.id.tv_detail)</span><br><span class="line">         TextView tvDetail;</span><br><span class="line">         @BindView(R.id.date)</span><br><span class="line">         TextView date;</span><br><span class="line">         @BindView(R.id.avatar_user)</span><br><span class="line">         SimpleDraweeView avatarUser;</span><br><span class="line">         @BindView(R.id.username)</span><br><span class="line">         TextView userName;</span><br><span class="line"></span><br><span class="line">         public MyViewHolder(View itemView) &#123;</span><br><span class="line">             super(itemView);</span><br><span class="line">             ButterKnife.bind(this,itemView);//此处进行绑定</span><br><span class="line">         &#125;</span><br></pre></td></tr></table></figure></p><h2 id="Butterknife具体使用"><a href="#Butterknife具体使用" class="headerlink" title="Butterknife具体使用"></a>Butterknife具体使用</h2><h3 id="绑定View："><a href="#绑定View：" class="headerlink" title="绑定View："></a>绑定View：</h3><p>1.单个控件id 注解： @BindView（）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">@BindView(R.id.example)</span><br><span class="line">    Button example;</span><br></pre></td></tr></table></figure><p>2.布局内多个控件id 注解： @BindViews（）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">@BindViews(&#123;R.id.butter,R.id.butter1,R.id.butter2&#125;)</span><br><span class="line">    List&lt;Button&gt; buttons;</span><br></pre></td></tr></table></figure></p><h3 id="绑定资源文件"><a href="#绑定资源文件" class="headerlink" title="绑定资源文件"></a>绑定资源文件</h3><p>1.绑定string 字符串：@BindString()<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">@BindString(R.string.app_name) //绑定资源文件中string字符串</span><br><span class="line">String name;</span><br></pre></td></tr></table></figure></p><p>2.绑定array数组：@BindArray()<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;resources&gt;</span><br><span class="line">&lt;string name=&quot;app_name&quot;&gt;开眼视频&lt;/string&gt;</span><br><span class="line"></span><br><span class="line">&lt;string-array name=&quot;weather&quot;&gt;</span><br><span class="line">&lt;item&gt;高温&lt;/item&gt;</span><br><span class="line">&lt;item&gt;低温&lt;/item&gt;</span><br><span class="line">&lt;item&gt;阴天&lt;/item&gt;</span><br><span class="line">&lt;item&gt;雨天&lt;/item&gt;</span><br><span class="line">&lt;item&gt;晴天&lt;/item&gt;</span><br><span class="line">&lt;/string-array&gt;</span><br><span class="line"></span><br><span class="line">&lt;/resources&gt;</span><br></pre></td></tr></table></figure></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">@BindArray(R.array.weather) //绑定string资源里面array数组</span><br><span class="line">String [] weathers ;</span><br></pre></td></tr></table></figure><p>3.绑定颜色值：@BindColor( )<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">@BindColor( R.color.colorPrimary) //绑定color文件中颜色值</span><br><span class="line">int colorPrimary;</span><br></pre></td></tr></table></figure></p><p>4.绑定Bitmap：@BindBitmap( )<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">@BindBitmap(R.mipmap.ic_launcher)</span><br><span class="line">    Bitmap bitmap;</span><br></pre></td></tr></table></figure></p><p>5.其他资源绑定:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">@BindBool(R.bool.is_tablet) boolean isTablet; //绑定真假boolean</span><br><span class="line"></span><br><span class="line">@BindFont(R.font.comic_sans) Typeface comicSans; //绑定字体文字</span><br><span class="line"></span><br><span class="line">@BindDimen(R.dimen.horizontal_gap) int gapPx //绑定尺寸</span><br><span class="line">@BindDimen(R.dimen.horizontal_gap) float gap; //绑定尺寸</span><br><span class="line"></span><br><span class="line">@BindAnim(R.anim.fade_in) Animation fadeIn; //绑定动画</span><br><span class="line"></span><br><span class="line">@BindDrawable(R.drawable.placeholder) Drawable placeholder;//绑定Drawable</span><br></pre></td></tr></table></figure></p><h3 id="绑定监听事件"><a href="#绑定监听事件" class="headerlink" title="绑定监听事件"></a>绑定监听事件</h3><p>1.绑定控件点击事件：@OnClick( )</p><ul><li><p>单个控件点击事件:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">@OnClick(R.id.butter)</span><br><span class="line">   public void onClick()&#123;</span><br><span class="line">       Toast.makeText(this, &quot;绑定单个view事件&quot;, Toast.LENGTH_SHORT).show();</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></li><li><p>多个控件同一点击事件:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">@OnClick(&#123;R.id.share_wechat,R.id.share_moments,R.id.share_weibo&#125;)</span><br><span class="line"> public void onClick()&#123;</span><br><span class="line">        Toast.makeText(this, &quot;都执行此事件&quot;, Toast.LENGTH_SHORT).show();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li><li><p>多个控件点击事件:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">@OnClick(&#123;R.id.share_wechat,R.id.share_moments,R.id.share_weibo&#125;)</span><br><span class="line">  public void onClick(View v) &#123;</span><br><span class="line">      switch (v.getId())&#123;</span><br><span class="line">          case R.id.share_wechat:</span><br><span class="line">              sharePlatform(Wechat.NAME);</span><br><span class="line">              break;</span><br><span class="line">          case R.id.share_moments:</span><br><span class="line">              sharePlatform(WechatMoments.NAME);</span><br><span class="line">              break;</span><br><span class="line">          case R.id.share_weibo:</span><br><span class="line">              sharePlatform(SinaWeibo.NAME);</span><br><span class="line">              break;</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></li></ul><p>2.绑定控件长按事件：@OnLongClick( )<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">@OnLongClick( R.id.button1 ) //给 button1 设置一个长按事件</span><br><span class="line">public boolean onLongClick ()&#123;</span><br><span class="line">Toast.makeText(this, &quot;is a long click&quot;, Toast.LENGTH_SHORT).show();</span><br><span class="line">return true ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>3.其他事件绑定<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line">//选中，选中取消</span><br><span class="line">@OnCheckedChanged(R.id.example) </span><br><span class="line">public void onChecked(boolean checked) &#123;</span><br><span class="line">    Toast.makeText(this, checked ? &quot;Checked!&quot; : &quot;Unchecked!&quot;, Toast.LENGTH_SHORT).show();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//软键盘的功能按键</span><br><span class="line">@OnEditorAction(R.id.example)</span><br><span class="line">public  boolean onEditorAction(KeyEvent key) &#123;</span><br><span class="line">    Toast.makeText(this, &quot;Pressed: &quot; + key, Toast.LENGTH_SHORT).show();</span><br><span class="line">    return true;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">//焦点改变</span><br><span class="line">@OnFocusChange(R.id.example) </span><br><span class="line">public void onFocusChanged(boolean focused) &#123;</span><br><span class="line">   Toast.makeText(this, focused ? &quot;Gained focus&quot; : &quot;Lost focus&quot;, Toast.LENGTH_SHORT).show();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">//Item长按，返回true则可以拦截onItemClick</span><br><span class="line">@OnItemLongClick(R.id.example_list) </span><br><span class="line">public boolean onItemLongClick(int position) &#123;</span><br><span class="line">    Toast.makeText(this, &quot;Long clicked position &quot; + position + &quot;!&quot;, Toast.LENGTH_SHORT).show();</span><br><span class="line">    return true;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">//Item点击事件</span><br><span class="line">@OnItemClick(R.id.example_list) </span><br><span class="line">public void onItemClick(int position) &#123;</span><br><span class="line">   Toast.makeText(this, &quot;Clicked position &quot; + position + &quot;!&quot;, Toast.LENGTH_SHORT).show();</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line">//Item被选择事件</span><br><span class="line">@OnItemSelected(R.id.example_list) </span><br><span class="line">public void onItemSelected(int position) &#123;</span><br><span class="line">    Toast.makeText(this, &quot;Selected position &quot; + position + &quot;!&quot;, Toast.LENGTH_SHORT).show();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">//EditText里面的文本变化事件</span><br><span class="line">@OnTextChanged(R.id.example) </span><br><span class="line">public void onTextChanged(CharSequence text) &#123;</span><br><span class="line">    Toast.makeText(this, &quot;Text changed: &quot; + text, Toast.LENGTH_SHORT).show();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">//页面改变事件</span><br><span class="line">@OnPageChange(R.id.example_pager) </span><br><span class="line">public void onPageSelected(int position) &#123;</span><br><span class="line">   Toast.makeText(this, &quot;Selected &quot; + position + &quot;!&quot;, Toast.LENGTH_SHORT).show();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">//触摸事件</span><br><span class="line">@OnTouch(R.id.example)</span><br><span class="line">public  boolean onTouch() &#123;</span><br><span class="line">    Toast.makeText(this, &quot;Touched!&quot;, Toast.LENGTH_SHORT).show();</span><br><span class="line">    return false;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></p><h3 id="Action接口与Setter接口"><a href="#Action接口与Setter接口" class="headerlink" title="Action接口与Setter接口"></a>Action接口与Setter接口</h3><p>Action接口主要是为了对View或者Views进行管理初始化等操作，而Setter接口其实就是对view或者views的属性或者值进行操作.使用  ButterKnife.apply()方法启用接口.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">ButterKnife.Action&lt;View&gt; action = new ButterKnife.Action&lt;View&gt;() &#123;</span><br><span class="line">      @Override</span><br><span class="line">      public void apply(@NonNull View view, int index) &#123;</span><br><span class="line">          if (view instanceof Button )&#123;</span><br><span class="line">              Button button = (Button) view;</span><br><span class="line">              button.setText(&quot;点击我&quot;);</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">    ButterKnife.Setter&lt;View,Boolean&gt; setter = new ButterKnife.Setter&lt;View, Boolean&gt;() &#123;</span><br><span class="line">        @Override</span><br><span class="line">        public void set(@NonNull View view, Boolean value, int index) &#123;</span><br><span class="line">            view.setEnabled(value);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">    protected void onCreate(Bundle savedInstanceState) &#123;</span><br><span class="line">        super.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line">        ButterKnife.bind(this);</span><br><span class="line">        ButterKnife.apply(buttons,action);//初始化或修改每个view的属性值</span><br><span class="line">        ButterKnife.apply(buttons,setter,true);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="Butterknife-Zelezny插件使用"><a href="#Butterknife-Zelezny插件使用" class="headerlink" title="Butterknife  Zelezny插件使用"></a>Butterknife  Zelezny插件使用</h2><blockquote><p>当熟悉了Butterknife  的基本用法后,有时候还是要写很多@BindView()之类的,是不是很烦,没关系,最后教你们一招偷懒的方式,当然是用插件了,嘿嘿.</p></blockquote><p>1.安装插件<br>步骤如下:<br>打开Android studio:点击File—&gt;Settings—&gt;Plugins—&gt;搜索 Butterknife  Zelezny—&gt;下载安装—&gt;重启Android studio.</p><p><img src="https://upload-images.jianshu.io/upload_images/5549640-77e6a7632d8860a1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="TIM截图20180919210841.png"></p><p>做完以上步骤,就可以愉快的写代码了.</p><p>2.使用插件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">   protected void onCreate(Bundle savedInstanceState) &#123;</span><br><span class="line">       super.onCreate(savedInstanceState);</span><br><span class="line">       setContentView(R.layout.activity_main);//将光标移到布局文件处</span><br><span class="line">       ButterKnife.bind(this);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></p><p>右击Generate,如下:<br><img src="https://upload-images.jianshu.io/upload_images/5549640-379d8692a252c532.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="TIM截图20180919211418.png"></p><p>打开就看见我们布局文件中所有控件了.选择你需要的就可以开始了.<br><img src="https://upload-images.jianshu.io/upload_images/5549640-ff4ae2468ae4c241.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="TIM截图20180919211548.png"></p><blockquote><p>好了,关于Butterknife注解就结束到这里了,还有很多用法没有介绍到,不过并不妨碍我们愉快的使用Butterknife了,赶快去试试吧.</p></blockquote><p>欢迎关注作者<a href="http://www.darryrzhong.site" target="_blank" rel="noopener">darryrzhong</a>,更多干货等你来拿哟.</p><h3 id="请赏个小红心！因为你的鼓励是我写作的最大动力！"><a href="#请赏个小红心！因为你的鼓励是我写作的最大动力！" class="headerlink" title="请赏个小红心！因为你的鼓励是我写作的最大动力！"></a>请赏个小红心！因为你的鼓励是我写作的最大动力！</h3><blockquote><p>更多精彩文章请关注</p><ul><li><a href="http://www.darryrzhong.xyz" target="_blank" rel="noopener">个人博客:darryrzhong</a></li><li><a href="https://juejin.im/user/5a6c3b19f265da3e49804988" target="_blank" rel="noopener">掘金</a></li><li><a href="https://www.jianshu.com/users/b7fdf53ec0b9/timeline" target="_blank" rel="noopener">简书</a></li><li><a href="https://segmentfault.com/u/darryrzhong_5ac59892a5882/articles" target="_blank" rel="noopener">SegmentFault</a></li><li><a href="https://www.imooc.com/u/6733207" target="_blank" rel="noopener">慕课网手记</a></li></ul></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Butterknife简介&quot;&gt;&lt;a href=&quot;#Butterknife简介&quot; class=&quot;headerlink&quot; title=&quot;Butterknife简介&quot;&gt;&lt;/a&gt;Butterknife简介&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/JakeWharton/butterknife&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Butterknife&lt;/a&gt;中文又名黄油刀,是 &lt;a href=&quot;https://github.com/JakeWharton&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;JakeWharton&lt;/a&gt;大神开源的一款&lt;code&gt;Android视图的字段和方法绑定&lt;/code&gt;快速注解框架.也是Android开发中比较常用的一款快速注解框架了,可以不用不断的重复&lt;code&gt;findViewById&lt;/code&gt;,在各种场合下快速绑定view的多种事件,大大提高了开发的效率.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;为什么开发用Butterknife?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;1、强大的View绑定和Click事件处理功能，简化代码，提升开发效率&lt;br&gt;2、方便的处理Adapter里的ViewHolder绑定问题&lt;br&gt;3、运行时不会影响APP效率，使用配置方便&lt;br&gt;4、代码清晰，可读性强&lt;br&gt;5、…………&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt; 使用配置&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;在-Android-studio-项目中配置-Butterknife&quot;&gt;&lt;a href=&quot;#在-Android-studio-项目中配置-Butterknife&quot; class=&quot;headerlink&quot; title=&quot;在 Android studio 项目中配置:Butterknife:&quot;&gt;&lt;/a&gt;在 Android studio 项目中配置:Butterknife:&lt;/h2&gt;&lt;h2 id=&quot;一-在主Moduel中的build-gradle中添加如下配置&quot;&gt;&lt;a href=&quot;#一-在主Moduel中的build-gradle中添加如下配置&quot; class=&quot;headerlink&quot; title=&quot;一.在主Moduel中的build.gradle中添加如下配置:&quot;&gt;&lt;/a&gt;一.在主Moduel中的&lt;code&gt;build.gradle&lt;/code&gt;中添加如下配置:&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;dependencies &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    implementation &amp;apos;com.jakewharton:butterknife:8.8.1&amp;apos;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    annotationProcessor &amp;apos;com.jakewharton:butterknife-compiler:8.8.1&amp;apos;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;简单使用如下:&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;class ExampleActivity extends Activity &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  @BindView(R.id.user) EditText username;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  @BindView(R.id.pass) EditText password;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  @BindString(R.string.login_error) String loginErrorMessage;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  @OnClick(R.id.submit) void submit() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    // TODO call server...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  @Override public void onCreate(Bundle savedInstanceState) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    super.onCreate(savedInstanceState);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    setContentView(R.layout.simple_activity);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ButterKnife.bind(this);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    // TODO Use fields...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Android" scheme="http://darryrzhong.xyz/categories/Android/"/>
    
    
      <category term="Butterknife" scheme="http://darryrzhong.xyz/tags/Butterknife/"/>
    
  </entry>
  
  <entry>
    <title>Android之Handler消息传递机制详解</title>
    <link href="http://darryrzhong.xyz/2019/03/27/Android%E4%B9%8BHandler%E6%B6%88%E6%81%AF%E4%BC%A0%E9%80%92%E6%9C%BA%E5%88%B6%E8%AF%A6%E8%A7%A3/"/>
    <id>http://darryrzhong.xyz/2019/03/27/Android之Handler消息传递机制详解/</id>
    <published>2019-03-27T03:42:29.000Z</published>
    <updated>2019-03-27T03:43:23.728Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><ul><li>在Android开发中,多线程应用是非常频繁的,其中<code>Handler</code>机制随处可见.</li><li>下面就本人对Handle的一些理解与大家一起分享，共同回顾下<code>Handle异步消息传递机制</code>。</li></ul><hr><h2 id="1-Handler是什么？"><a href="#1-Handler是什么？" class="headerlink" title="1.Handler是什么？"></a>1.Handler是什么？</h2><ul><li>Handler是一套在 Android开发中 进行异步消息传递的机制。</li></ul><hr><h2 id="2-Handler在Android中的作用"><a href="#2-Handler在Android中的作用" class="headerlink" title="2.Handler在Android中的作用"></a>2.Handler在Android中的作用</h2><ul><li>在Android开发中多线程的应用中，将工作线程中需更新UI的操作信息 传递到 UI主线程，从而实现 工作线程对UI的更新处理，最终实现异步消息的处理。</li></ul><hr><h2 id="3-我们为什么要使用Handler去处理更新UI操作呢？"><a href="#3-我们为什么要使用Handler去处理更新UI操作呢？" class="headerlink" title="3. 我们为什么要使用Handler去处理更新UI操作呢？"></a>3. 我们为什么要使用Handler去处理更新UI操作呢？</h2><ul><li>在多个线程并发更新UI的同时 保证线程安全。</li></ul><hr><h2 id="4-Handler异步消息传递所涉及的相关概念"><a href="#4-Handler异步消息传递所涉及的相关概念" class="headerlink" title="4.Handler异步消息传递所涉及的相关概念"></a>4.Handler异步消息传递所涉及的相关概念</h2><ul><li>MainThread （主线程）<code>UI线程，程序启动时自动创建。</code></li><li>工作线程，<code>开发者自己开启的线程，执行耗时操作等。</code></li><li>Handler（处理者） <code>UI线程与子线程通信的媒介，添加消息到消息队列（Message Queue）处理循环器分发过来的消息（Looper）。</code></li><li>Message （消息） <code>Handler接受&amp;处理的对象，存储需要操作的消息。</code></li><li>Message Queue（消息队列） <code>数据存储结构，采用先进先出方式，存储Handler发过来的消息。</code></li><li>Looper（循坏器）<code>消息队列与处理者的媒介，从消息队列中循环取出消息并发送给Handler处理。</code></li></ul><hr><a id="more"></a><h2 id="5-使用方式"><a href="#5-使用方式" class="headerlink" title="5.使用方式"></a>5.使用方式</h2><ul><li>Handler的使用方式 因发送消息到消息队列的方式不同而不同（两种）</li><li><code>使用Handler.sendMessage（）、使用Handler.post（）</code></li></ul><h3 id="1-使用-Handler-sendMessage（）方式"><a href="#1-使用-Handler-sendMessage（）方式" class="headerlink" title="1.使用 Handler.sendMessage（）方式"></a>1.使用 Handler.sendMessage（）方式</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">/** </span><br><span class="line">  * 方式1：新建Handler子类（内部类）</span><br><span class="line">  */</span><br><span class="line"></span><br><span class="line">    // 步骤1：自定义Handler子类（继承Handler类） &amp; 复写handleMessage（）方法</span><br><span class="line">    class mHandler extends Handler &#123;</span><br><span class="line"></span><br><span class="line">        // 通过复写handlerMessage() 从而确定更新UI的操作</span><br><span class="line">        @Override</span><br><span class="line">        public void handleMessage(Message msg) &#123;</span><br><span class="line">         ...// 执行UI操作</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // 步骤2：在主线程中创建Handler实例</span><br><span class="line">        private Handler mhandler = new mHandler();</span><br><span class="line"></span><br><span class="line">    // 步骤3：创建所需的消息对象</span><br><span class="line">        Message msg = Message.obtain(); // 实例化消息对象</span><br><span class="line">        msg.what = 1; // 消息标识</span><br><span class="line">        msg.obj = &quot;AA&quot;; // 消息内容存放</span><br><span class="line"></span><br><span class="line">    // 步骤4：在工作线程中 通过Handler发送消息到消息队列中</span><br><span class="line">        mHandler.sendMessage(msg);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">/** </span><br><span class="line">  * 方式2：匿名内部类</span><br><span class="line">  */</span><br><span class="line">   // 步骤1：在主线程中 通过匿名内部类 创建Handler类对象</span><br><span class="line">            private Handler mhandler = new  Handler()&#123;</span><br><span class="line">                // 通过复写handlerMessage()</span><br><span class="line">                @Override</span><br><span class="line">                public void handleMessage(Message msg) &#123;</span><br><span class="line">                        ...// 需执行UI操作</span><br><span class="line">                    &#125;</span><br><span class="line">            &#125;;</span><br><span class="line"></span><br><span class="line">  // 步骤2：创建消息对象</span><br><span class="line">    Message msg = Message.obtain(); // 实例化消息对象</span><br><span class="line">  msg.what = 1; // 消息标识</span><br><span class="line">  msg.obj = &quot;AA&quot;; // 消息内容存放</span><br><span class="line">  // 步骤3：在工作线程中 通过Handler发送消息到消息队列中</span><br><span class="line">   mHandler.sendMessage(msg);</span><br></pre></td></tr></table></figure><h3 id="2-使用Handler-post（）"><a href="#2-使用Handler-post（）" class="headerlink" title="2.使用Handler.post（）"></a>2.使用Handler.post（）</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">new Thread() &#123;</span><br><span class="line">           @Override</span><br><span class="line">           public void run() &#123;</span><br><span class="line">               try &#123;</span><br><span class="line">                   Thread.sleep(5000);</span><br><span class="line">               &#125; catch (InterruptedException e) &#123;</span><br><span class="line">                   e.printStackTrace();</span><br><span class="line">               &#125;</span><br><span class="line">               // 通过psot（）发送，传入1个Runnable对象</span><br><span class="line">               mHandler.post(new Runnable() &#123;</span><br><span class="line">                   @Override</span><br><span class="line">                   public void run() &#123;</span><br><span class="line">                       // 指定操作UI内容</span><br><span class="line">                  </span><br><span class="line">                   &#125;</span><br><span class="line"></span><br><span class="line">               &#125;);</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;.start();</span><br></pre></td></tr></table></figure><hr><h2 id="6-Handler底层原理及源码分析"><a href="#6-Handler底层原理及源码分析" class="headerlink" title="6.Handler底层原理及源码分析"></a>6.Handler底层原理及源码分析</h2><p>在源码分析前，先来了解Handler机制中的几个核心类</p><ul><li>处理器 （Handler）</li><li>消息队列 （MessageQueue）</li><li>循环器 （Looper）<br>关于这几个类的具体作用前面已经介绍过了就不再过多阐述了。</li></ul><p>下面开始源码分析，注意力集中了<br>上文中我们提到过Handler发送消息有两种方式，分别是</p><ul><li>Handler.sendMessage（）</li><li><p>使用Handler.post（）<br>下面先从第一种开始分析：</p><h3 id="方式1：使用-Handler-sendMessage（）"><a href="#方式1：使用-Handler-sendMessage（）" class="headerlink" title="方式1：使用 Handler.sendMessage（）"></a>方式1：使用 Handler.sendMessage（）</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">  //通过匿名内部类 创建Handler类对象</span><br><span class="line">    private Handler mhandler = new  Handler()&#123;</span><br><span class="line">        // 通过复写handlerMessage()从而确定更新UI的操作</span><br><span class="line">        @Override</span><br><span class="line">        public void handleMessage(Message msg) &#123;</span><br><span class="line">                ...// 需执行的UI操作</span><br><span class="line">            &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">----------&gt;&gt;开始源码分析</span><br><span class="line"></span><br><span class="line">public Handler() &#123;</span><br><span class="line"></span><br><span class="line">            this(null, false);</span><br><span class="line">            // -&gt;&gt;此处this指代的就是当前的Handler实例，调用有参构造</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">public Handler(Callback callback, boolean async) &#123;</span><br><span class="line"></span><br><span class="line">            ...// 无关代码我就不贴了</span><br><span class="line"></span><br><span class="line">            // 1. 指定Looper对象</span><br><span class="line">                mLooper = Looper.myLooper();</span><br><span class="line">                if (mLooper == null) &#123;</span><br><span class="line">                    throw new RuntimeException(</span><br><span class="line">                        &quot;Can&apos;t create handler inside thread that has not called Looper.prepare()&quot;);</span><br><span class="line">                &#125;</span><br><span class="line">                // Looper.myLooper()作用：获取当前线程的Looper对象；若线程无Looper对象则抛出异常</span><br><span class="line"></span><br><span class="line">                // 可通过执行Loop.getMainLooper()方法获得主线程的Looper对象</span><br><span class="line"></span><br><span class="line">            // 2. 绑定消息队列对象（MessageQueue）</span><br><span class="line">                mQueue = mLooper.mQueue;</span><br><span class="line">                // 获取该Looper对象中保存的消息队列对象（MessageQueue）</span><br><span class="line">                // 至此，完成了handler 与 Looper对象中MessageQueue的关联</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li><li><p>从上面的源码来看，当我们创建Handler对象后，通过Handler的构造方法系统就已经帮我们自动绑定了looper和对应的MessageQueue消息队列。我们只需拿着这个Handler对象执行我们所需的操作就可以了</p></li><li>但是，你肯定有疑问了，当前线程的Looper对象 &amp; 对应的消息队列对象（MessageQueue） 是哪来的呢？我既没有获取也没有创建啊？</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">            ... // 无关的代码</span><br><span class="line"></span><br><span class="line">            Looper.prepareMainLooper(); </span><br><span class="line">            // 1. 为主线程创建1个Looper对象，同时生成1个消息队列对象（MessageQueue）</span><br><span class="line"></span><br><span class="line">            ActivityThread thread = new ActivityThread(); </span><br><span class="line">            // 2. 创建主线程</span><br><span class="line"></span><br><span class="line">            Looper.loop(); </span><br><span class="line">            // 3. 自动开启 消息循环 </span><br><span class="line"></span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><ul><li><p>我们可以看到，其实在Android应用进程启动时，会默认创建1个主线程（ActivityThread，也叫UI线程） ，创建ActivityThread的时候，会自动调用ActivityThread的1个静态的main（）方法 = 应用程序的入口，而main（）方法内则会自动调用Looper.prepareMainLooper()为主线程生成1个Looper对象和MessageQueue队列。</p></li><li><p>而Handler对象创建时若不指定looper则默认绑定主线程的looper，从而可以执行主线程的UI更新操作。</p></li><li><p>若是在子线程中创建Handler实例，则需要指定looper了，所以就用上了Loop.getMainLooper()方法来获得主线程的Looper对象。</p></li></ul><h3 id="方式1：-使用Handler-post（）"><a href="#方式1：-使用Handler-post（）" class="headerlink" title="方式1： 使用Handler.post（）"></a>方式1： 使用Handler.post（）</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">public void dispatchMessage(Message msg) &#123;</span><br><span class="line"></span><br><span class="line">   // 1. 若msg.callback属性不为空，则代表使用了post（Runnable r）发送消息</span><br><span class="line">   // 则执行handleCallback(msg)，即回调Runnable对象里复写的run（）</span><br><span class="line">       if (msg.callback != null) &#123;</span><br><span class="line">           handleCallback(msg);</span><br><span class="line">       &#125; else &#123;</span><br><span class="line">           if (mCallback != null) &#123;</span><br><span class="line">               if (mCallback.handleMessage(msg)) &#123;</span><br><span class="line">                   return;</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line"></span><br><span class="line">           // 2. 若msg.callback属性为空，则代表使用了sendMessage（Message msg）发送消息，即回调复写的handleMessage(msg)</span><br><span class="line">           handleMessage(msg);</span><br><span class="line"></span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  public void handleMessage(Message msg) &#123;  </span><br><span class="line">         ... // 创建Handler实例时复写</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>从以上源码来看，使用Handler.post（）时，系统会自动回调Runnable对象里复写的run（）方法，将其打包成msg对象， 实际上和sendMessage（Message msg）发送方式相同。</p><blockquote><p>至此，关于Handler的异步消息传递机制的解析就完成了。</p></blockquote><hr><h2 id="7-关于Handler-内存泄露的原因"><a href="#7-关于Handler-内存泄露的原因" class="headerlink" title="7.关于Handler 内存泄露的原因"></a>7.关于Handler 内存泄露的原因</h2><ul><li>在Android开发中，内存泄露是 十分常见的</li><li><p>其中一种情况就是在Handler中发生的内存泄露</p></li><li><p>为什么会发生内存泄漏？<br>1.Handler的一般用法 ： 新建Handler子类（内部类） 、匿名Handler内部类，而在我们编写代码的时候，其实编译器就会提示我们这种操作可能会发生内存泄漏，在android studio中就是这块代码会变黄。<br>2.提示的原因是</p></li><li>该Handler类由于未设置为 静态类，从而导致了内存泄露</li><li>最终的内存泄露发生在Handler类的外部类：XXXActivity类中</li></ul><p>3.内存泄漏的原因<br>首先我们先要了解一些其他的知识点。</p><ul><li>主线程的Looper对象的生命周期 = 应该应用程序的生命周期</li><li>在Java中，非静态内部类 &amp; 匿名内部类都默认持有 外部类的引用，</li></ul><p>而在Handler处理消息的时候，Handler必须处理完所有消息才会与外部类解除引用关系，如果此时外部Activity需要提前被销毁了，而Handler因还未完成消息处理而继续持有外部Activity的引用。由于上述引用关系，垃圾回收器（GC）便无法回收MainActivity，从而造成内存泄漏。</p><hr><h2 id="8-如何解决Handler内存泄漏"><a href="#8-如何解决Handler内存泄漏" class="headerlink" title="8.如何解决Handler内存泄漏"></a>8.如何解决Handler内存泄漏</h2><h3 id="1-静态内部类-弱引用"><a href="#1-静态内部类-弱引用" class="headerlink" title="1.静态内部类+弱引用"></a>1.静态内部类+弱引用</h3><p>将Handler的子类设置成 静态内部类，同时，还可加上 使用WeakReference弱引用持有Activity实例。<br>原因：弱引用的对象拥有短暂的生命周期。在垃圾回收器线程扫描时，一旦发现了只具有弱引用的对象，不管当前内存空间足够与否，都会回收它的内存。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">// 设置为：静态内部类</span><br><span class="line">private static class FHandler extends Handler&#123;</span><br><span class="line"></span><br><span class="line">    // 定义 弱引用实例</span><br><span class="line">    private WeakReference&lt;Activity&gt; reference;</span><br><span class="line"></span><br><span class="line">    // 在构造方法中传入需持有的Activity实例</span><br><span class="line">    public FHandler(Activity activity) &#123;</span><br><span class="line">        // 使用WeakReference弱引用持有Activity实例</span><br><span class="line">        reference = new WeakReference&lt;Activity&gt;(activity); &#125;</span><br><span class="line"></span><br><span class="line">    // 复写handlerMessage() </span><br><span class="line">    @Override</span><br><span class="line">    public void handleMessage(Message msg) &#123;</span><br><span class="line">        switch (msg.what) &#123;</span><br><span class="line">            case 1:</span><br><span class="line">             //更新UI</span><br><span class="line">                break;</span><br><span class="line">            case 2:</span><br><span class="line">            //更新UI</span><br><span class="line">                break;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure></p><h3 id="2-当外部l类结束生命周期时，清空Handler内消息队列"><a href="#2-当外部l类结束生命周期时，清空Handler内消息队列" class="headerlink" title="2.当外部l类结束生命周期时，清空Handler内消息队列"></a>2.当外部l类结束生命周期时，清空Handler内消息队列</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">    protected void onDestroy() &#123;</span><br><span class="line">        super.onDestroy();</span><br><span class="line">        mHandler.removeCallbacksAndMessages(null);</span><br><span class="line">        // 外部类Activity生命周期结束时，同时清空消息队列 &amp; 结束Handler生命周期</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><blockquote><p>推荐使用上述解决方法一，以保证保证Handler中消息队列中的所有消息都能被执行</p></blockquote><hr><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>本文主要讲述了Handler的基本原理和使用方法，以及造成内存泄漏的原因和解决方案。</p><hr><p>欢迎关注作者<a href="http://www.darryrzhong.site" target="_blank" rel="noopener">darryrzhong</a>,更多干货等你来拿哟.</p><h3 id="请赏个小红心！因为你的鼓励是我写作的最大动力！"><a href="#请赏个小红心！因为你的鼓励是我写作的最大动力！" class="headerlink" title="请赏个小红心！因为你的鼓励是我写作的最大动力！"></a>请赏个小红心！因为你的鼓励是我写作的最大动力！</h3><blockquote><p>更多精彩文章请关注</p><ul><li><a href="http://www.darryrzhong.xyz" target="_blank" rel="noopener">个人博客:darryrzhong</a></li><li><a href="https://juejin.im/user/5a6c3b19f265da3e49804988" target="_blank" rel="noopener">掘金</a></li><li><a href="https://www.jianshu.com/users/b7fdf53ec0b9/timeline" target="_blank" rel="noopener">简书</a></li><li><a href="https://segmentfault.com/u/darryrzhong_5ac59892a5882/articles" target="_blank" rel="noopener">SegmentFault</a></li><li><a href="https://www.imooc.com/u/6733207" target="_blank" rel="noopener">慕课网手记</a></li></ul></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;在Android开发中,多线程应用是非常频繁的,其中&lt;code&gt;Handler&lt;/code&gt;机制随处可见.&lt;/li&gt;
&lt;li&gt;下面就本人对Handle的一些理解与大家一起分享，共同回顾下&lt;code&gt;Handle异步消息传递机制&lt;/code&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&quot;1-Handler是什么？&quot;&gt;&lt;a href=&quot;#1-Handler是什么？&quot; class=&quot;headerlink&quot; title=&quot;1.Handler是什么？&quot;&gt;&lt;/a&gt;1.Handler是什么？&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;Handler是一套在 Android开发中 进行异步消息传递的机制。&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&quot;2-Handler在Android中的作用&quot;&gt;&lt;a href=&quot;#2-Handler在Android中的作用&quot; class=&quot;headerlink&quot; title=&quot;2.Handler在Android中的作用&quot;&gt;&lt;/a&gt;2.Handler在Android中的作用&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;在Android开发中多线程的应用中，将工作线程中需更新UI的操作信息 传递到 UI主线程，从而实现 工作线程对UI的更新处理，最终实现异步消息的处理。&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&quot;3-我们为什么要使用Handler去处理更新UI操作呢？&quot;&gt;&lt;a href=&quot;#3-我们为什么要使用Handler去处理更新UI操作呢？&quot; class=&quot;headerlink&quot; title=&quot;3. 我们为什么要使用Handler去处理更新UI操作呢？&quot;&gt;&lt;/a&gt;3. 我们为什么要使用Handler去处理更新UI操作呢？&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;在多个线程并发更新UI的同时 保证线程安全。&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&quot;4-Handler异步消息传递所涉及的相关概念&quot;&gt;&lt;a href=&quot;#4-Handler异步消息传递所涉及的相关概念&quot; class=&quot;headerlink&quot; title=&quot;4.Handler异步消息传递所涉及的相关概念&quot;&gt;&lt;/a&gt;4.Handler异步消息传递所涉及的相关概念&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;MainThread （主线程）&lt;code&gt;UI线程，程序启动时自动创建。&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;工作线程，&lt;code&gt;开发者自己开启的线程，执行耗时操作等。&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Handler（处理者） &lt;code&gt;UI线程与子线程通信的媒介，添加消息到消息队列（Message Queue）处理循环器分发过来的消息（Looper）。&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Message （消息） &lt;code&gt;Handler接受&amp;amp;处理的对象，存储需要操作的消息。&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Message Queue（消息队列） &lt;code&gt;数据存储结构，采用先进先出方式，存储Handler发过来的消息。&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Looper（循坏器）&lt;code&gt;消息队列与处理者的媒介，从消息队列中循环取出消息并发送给Handler处理。&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
    
    </summary>
    
      <category term="Android" scheme="http://darryrzhong.xyz/categories/Android/"/>
    
    
      <category term="Handler" scheme="http://darryrzhong.xyz/tags/Handler/"/>
    
  </entry>
  
  <entry>
    <title>Android之Activity全面解析</title>
    <link href="http://darryrzhong.xyz/2019/03/27/Android%E4%B9%8BActivity%E5%85%A8%E9%9D%A2%E8%A7%A3%E6%9E%90/"/>
    <id>http://darryrzhong.xyz/2019/03/27/Android之Activity全面解析/</id>
    <published>2019-03-27T03:40:43.000Z</published>
    <updated>2019-03-27T03:41:48.326Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><blockquote><p>基于最近要准备去面试,特意系统的复习了下Android基础,看到Activity这块时,发现很多都忘了,而且之前也没有系统的学习和写笔记记录,所以,特此写下这篇关于Activity的一些理解,旨在帮助大家更好的理解Activity.</p></blockquote><h1 id="Activity是什么"><a href="#Activity是什么" class="headerlink" title="Activity是什么?"></a>Activity是什么?</h1><p><code>Activity</code>是一个Android应用程序组件(也称为Android四大组件之一)，它提供了一个屏幕，用户可以通过该屏幕进行交互以执行某些操作，例如拨打电话，拍照，发送电子邮件或查看地图。每个活动都有一个窗口，用于绘制其用户界面。窗口通常填满屏幕，但可能比屏幕小，并漂浮在其他窗口的顶部.</p><p>Android应用程序通常由多个彼此松散绑定的<code>Activity</code>组成。通常，应用程序中的一个<code>Activity</code>被指定为“主要”<code>Activity</code>，该<code>Activity</code>在首次启动应用程序时呈现给用户。然后，每个<code>Activity</code>可以启动另一个<code>Activity</code>以执行不同的操作。每次新<code>Activity</code>开始时，前一个<code>Activity</code>都会停止，但系统会将<code>Activity</code>保留在<code>后台堆栈中</code>（“后堆栈”）。当一个新的<code>Activity</code>开始时，它会被推到后面的堆栈上，并引起用户的注意。后栈遵循基本的“ <code>后进先出</code>”堆栈机制，因此，当用户完成当前活动并按下”后退按钮”时，它从堆栈弹出（并销毁），之前的活动恢复。（后台堆栈将在后面为大家详细介绍。）</p><h1 id="如何创建Activity"><a href="#如何创建Activity" class="headerlink" title="如何创建Activity"></a>如何创建Activity</h1><p>要创建Activity，您必须创建<code>Activity</code>（或其现有子类）的子类。在子类中，您需要实现当Activity在其生命周期的各个状态之间转换时系统调用的回调方法，例如在创建，停止，恢复或销毁活动时。两个最重要的回调方法是：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">public class ExampleActivity extends AppCompatActivity &#123;</span><br><span class="line"></span><br><span class="line"> @Override</span><br><span class="line">    public void onCreate(@Nullable Bundle savedInstanceState, @Nullable PersistableBundle persistentState) &#123;</span><br><span class="line">        super.onCreate(savedInstanceState, persistentState);</span><br><span class="line">//您必须实现此方法。系统在创建Activity时调用此方法。在您的实施中，您应该初始化Activity的基本组成部分。最重要的是，您必须在此处调用以定义Activity用户界面的布局。</span><br><span class="line">        setContentView();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//系统将此方法称为用户离开您的Activity的第一个指示（尽管并不总是意味着Activity正在被销毁）。这通常是您应该提交应该在当前用户会话之外保留的任何更改的地方（因为用户可能不会回来）。</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">    protected void onPause() &#123;</span><br><span class="line">        super.onPause();</span><br><span class="line">        //在此处应该提交应该在当前用户会话之外保留的任何更改的地方</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><a id="more"></a><blockquote><p>在访问Activity时,必须在manifest中声明此Activity,</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;manifest ... &gt;</span><br><span class="line"> &lt;application ... &gt; </span><br><span class="line">&lt;activity android：name = “.ExampleActivity” /&gt;       ..</span><br><span class="line">. &lt;/ application ... &gt;   .</span><br><span class="line">.. &lt;/ manifest &gt;</span><br></pre></td></tr></table></figure><p>你也可以指定Activity的<code>&lt;intent-filter&gt;</code>过滤器,如下:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;activity android：name = “. ExampleActivity ” android：icon = “@ drawable / app_icon” &gt;</span><br><span class="line"> &lt;intent-filter&gt; &lt;action android：name = “android.intent.action.MAIN” /&gt; </span><br><span class="line">&lt;category android：name = “ android.intent.category.LAUNCHER“ /&gt;</span><br><span class="line"> &lt;/ intent-filter&gt;</span><br><span class="line"> &lt;/ activity&gt;</span><br></pre></td></tr></table></figure></p><h1 id="如何启动Activity"><a href="#如何启动Activity" class="headerlink" title="如何启动Activity"></a>如何启动Activity</h1><p>您可以通过调用启动另一个Activity,通过<code>startActivity()</code>方法，并将<code>Intent</code>传递给您要启动的Activity。<code>intent</code>指定要启动的确切Activity或描述您要执行的操作类型（系统为您选择适当的活动，甚至可以来自不同的应用程序）。<code>Intent</code>(意图)还可以携带少量数据以供启动的活动使用。</p><ul><li>启动指定自建的Activity<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Intent intent = new Intent(this, SignInActivity.class);</span><br><span class="line">startActivity(intent);</span><br></pre></td></tr></table></figure></li></ul><p>此种启动又叫做显示Intent .</p><ul><li>启动其他类型的Activity<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Intent intent = new Intent(Intent.ACTION_SEND);</span><br><span class="line">intent.putExtra(Intent.EXTRA_EMAIL, recipientArray);</span><br><span class="line">startActivity(intent);</span><br></pre></td></tr></table></figure></li></ul><p>此种启动又叫做隐式Intent .</p><blockquote><p>有时候,我们可能需要从上一个Activity接收返回数据结果,这时,我们就需要另外一种启动方式了.</p></blockquote><p>在这种情况下，通过调用startActivityForResult()（而不是startActivity()）来启动Activity。然后，要从后续Activity接收结果，就需要实现onActivityResult()回调方法。完成后续Activity后，它会在您的onActivityResult() 方法中返回结果。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">private void pickContact() &#123;</span><br><span class="line">    // Create an intent to &quot;pick&quot; a contact, as defined by the content provider URI</span><br><span class="line">    Intent intent = new Intent(Intent.ACTION_PICK, Contacts.CONTENT_URI);</span><br><span class="line">    startActivityForResult(intent, PICK_CONTACT_REQUEST);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">protected void onActivityResult(int requestCode, int resultCode, Intent data) &#123;</span><br><span class="line">    // If the request went well (OK) and the request was PICK_CONTACT_REQUEST</span><br><span class="line">    if (resultCode == Activity.RESULT_OK &amp;&amp; requestCode == PICK_CONTACT_REQUEST) &#123;</span><br><span class="line">        // Perform a query to the contact&apos;s content provider for the contact&apos;s name</span><br><span class="line">        Cursor cursor = getContentResolver().query(data.getData(),</span><br><span class="line">        new String[] &#123;Contacts.DISPLAY_NAME&#125;, null, null, null);</span><br><span class="line">        if (cursor.moveToFirst()) &#123; // True if the cursor is not empty</span><br><span class="line">            int columnIndex = cursor.getColumnIndex(Contacts.DISPLAY_NAME);</span><br><span class="line">            String name = cursor.getString(columnIndex);</span><br><span class="line">            // Do something with the selected contact&apos;s name...</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="关闭Activity"><a href="#关闭Activity" class="headerlink" title="关闭Activity"></a>关闭Activity</h1><p>您可以通过调用其<code>finish()方</code>法来关闭活动。您还可以关闭之前通过调用启动的单独活动<code>finishActivity()。</code></p><blockquote><p>接下来便是整个Activity最核心的地方了,只要搞清楚一下内容,Activity也就理解的差不多了</p></blockquote><h1 id="Activity生命周期详解"><a href="#Activity生命周期详解" class="headerlink" title="Activity生命周期详解"></a>Activity生命周期详解</h1><p>Activity之所以能够成为Android四大组件之一,原因便是其具有非常灵活的生命周期回调方法,通过实现回调方法来管理Activity的生命周期对于开发强大而灵活的应用程序至关重要。Activity的生命周期直接受其与其他Activity，其任务和后台堆栈的关联的影响。</p><ul><li>Activity基本上存在于三种状态：</li></ul><ol><li>恢复 onResume()<br>Activity位于屏幕的前景并具有用户焦点。</li></ol><p>2.已暂停 onPause()<br>另一项Activity是在前台并具有焦点，但这一项仍然可见。也就是说，另一个Activity在这个Activity的顶部可见，该Activity部分透明或不覆盖整个屏幕。暂停的Activity完全处于活动状态（Activity 对象保留在内存中，它保留所有状态和成员信息，并保持附加到窗口管理器），但可以在极低内存情况下被系统杀死。</p><p>3.停止  onStop()<br>该Activity完全被另一个Activity遮挡（活动现在位于“背景”中）。停止的Activity也仍然存在（Activity 对象保留在内存中，它维护所有状态和成员信息，但不 附加到窗口管理器）。但是，它不再对用户可见，并且当其他地方需要内存时，它可能被系统杀死。<br>如果Activity暂停或停止，系统可以通过要求它完成（调用其finish()方法）或简单地终止其进程来从内存中删除它。当活动再次打开时（在完成或杀死之后），必须全部创建它。</p><h2 id="Activity完整生命周期回调方法"><a href="#Activity完整生命周期回调方法" class="headerlink" title="Activity完整生命周期回调方法"></a>Activity完整生命周期回调方法</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">public class ExampleActivity extends Activity &#123;</span><br><span class="line">    @Override</span><br><span class="line">    public void onCreate(Bundle savedInstanceState) &#123;</span><br><span class="line">        super.onCreate(savedInstanceState);</span><br><span class="line">        // The activity is being created.</span><br><span class="line">    &#125;</span><br><span class="line">    @Override</span><br><span class="line">    protected void onStart() &#123;</span><br><span class="line">        super.onStart();</span><br><span class="line">        // The activity is about to become visible.</span><br><span class="line">    &#125;</span><br><span class="line">    @Override</span><br><span class="line">    protected void onResume() &#123;</span><br><span class="line">        super.onResume();</span><br><span class="line">        // The activity has become visible (it is now &quot;resumed&quot;).</span><br><span class="line">    &#125;</span><br><span class="line">    @Override</span><br><span class="line">    protected void onPause() &#123;</span><br><span class="line">        super.onPause();</span><br><span class="line">        // Another activity is taking focus (this activity is about to be &quot;paused&quot;).</span><br><span class="line">    &#125;</span><br><span class="line">    @Override</span><br><span class="line">    protected void onStop() &#123;</span><br><span class="line">        super.onStop();</span><br><span class="line">        // The activity is no longer visible (it is now &quot;stopped&quot;)</span><br><span class="line">    &#125;</span><br><span class="line">    @Override</span><br><span class="line">    protected void onDestroy() &#123;</span><br><span class="line">        super.onDestroy();</span><br><span class="line">        // The activity is about to be destroyed.</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>注意：在执行任何工作之前，以上这些生命周期方法的实现必须始终调用超类实现，如上面的示例所示。</p></blockquote><ol><li>Activity中存在的三个循环生命周期</li></ol><ul><li><p>Activity的整个生命周期<br>Activity的整个生命周期发生在呼叫onCreate()和呼叫之间onDestroy()。您的Activity的整个生命周期应该执行“全局”状态的设置（例如定义布局）onCreate()，并释放所有剩余资源onDestroy()。</p></li><li><p>Activity的可见生命周期<br>Activity的可见生命周期发生在呼叫onStart()和呼叫之间onStop()。在此期间，用户可以在屏幕上看到Activity并与之交互。例如，onStop()在新Activity开始时调用，并且此Activity不再可见。在这两种方法之间，您可以维护向用户显示Activity所需的资源。例如，你可以注册一个 BroadcastReceiver在onStart()监视会影响您的用户界面的变化，并在注销它onStop()时，用户将不再能够看到你所显示的内容。该系统可能会调用onStart()和onStop()活动的整个生命周期内多次为可见和隐藏用户之间的活动交替。</p></li><li><p>Activity的前景生命周期<br>Activity的前景生命周期发生在调用onResume()和调用之间onPause()。在此期间，Activity位于屏幕上的所有其他活动之前，并且具有用户输入焦点。Activity可以频繁地进出前台 - 例如，onPause()当设备进入睡眠状态或出现对话框时调用。因为这种状态可以经常转换，所以这两种方法中的代码应该相当轻量级，以避免使用户等待的缓慢转换。</p></li></ul><p>2.Activity生命周期循环图<br><img src="https://upload-images.jianshu.io/upload_images/5549640-916e91d7d4c6f38b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="activity_lifecycle.png"></p><blockquote><p>图中说明了这些循环以及活动在状态之间可能采用的路径。矩形表示当活动在状态之间转换时可以实现的回调方法。</p></blockquote><p>3.Activity生命周期的回调方法摘要</p><table><thead><tr><th>Method</th><th>Description</th><th style="text-align:center">Killable after?</th><th>Next</th></tr></thead><tbody><tr><td>onCreate()</td><td>在第一次创建活动时调用。这是您应该进行所有常规静态设置的地方 - 创建视图，将数据绑定到列表等等。如果捕获了该状态，则此方法将传递包含活动先前状态的Bundle对象</td><td style="text-align:center">No</td><td>onStart()</td></tr><tr><td>onRestart()</td><td>在Activity停止后，再次启动之前调用。</td><td style="text-align:center">No</td><td>onStart()</td></tr><tr><td>onStart()</td><td>在活动变得对用户可见之前调用。</td><td style="text-align:center">No</td><td>onResume()或onStop()</td></tr><tr><td>onResume()</td><td>在活动开始与用户交互之前调用。此时，活动位于活动堆栈的顶部，用户输入转到活动堆栈。</td><td style="text-align:center">No</td><td>onPause()</td></tr><tr><td>onPause()</td><td>当系统即将开始恢复另一个活动时调用。此方法通常用于将未保存的更改提交到持久数据，停止动画以及可能消耗CPU的其他事物，等等。它应该做很快的事情，因为下一个Activity在返回之前不会恢复。</td><td style="text-align:center">Yes</td><td>onResume()或onStop()</td></tr><tr><td>onStop()</td><td>当活动不再对用户可见时调用。这可能是因为它正在被销毁，或者是因为另一个活动（现有的或新的活动）已经恢复并且正在覆盖它。</td><td style="text-align:center">Yes</td><td>onRestart()或onDestroy()</td></tr><tr><td>onDestroy()</td><td>在活动被销毁之前调用。这是活动将收到的最后一个电话。可以调用它，因为活动正在完成（有人调用finish()它），或者因为系统暂时销毁此活动实例以节省空间。您可以使用该isFinishing()方法区分这两种情况。</td><td style="text-align:center">Yes</td><td>nothing</td></tr></tbody></table><p>其中<code>Killable after?</code>表示系统是否可以在方法返回后随时终止托管Activity的进程，而不执行Activity代码的下一个回调方法.</p><p>因为onPause()是三个允许<code>Killable after</code>方法中第一个执行的，一旦活动被创建，<code>onPause()是在回调过程中能够保证执行的最后一个方法</code>，如果系统必须在紧急情况下恢复记忆，是会调用onPause()方法的,但是onStop()和onDestroy()可能不被调用。因此，您应该使用onPause()将关键的持久性数据（例如用户编辑）写入存储。而不是onStop()或onDestroy().</p><blockquote><p>所以在此处特别声明,要保存用户输入数据,需要在onPause()中执行,而不是在onStop()和onDestroy()中.</p></blockquote><p>生命周期回调的顺序是明确定义的，特别是当两个Activity在同一个进程中而其中一个正在启动另一个时。以下是ActivityA启动ActivityB时发生的操作顺序：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1.ActivityA的onPause()方法执行。</span><br><span class="line">2.ActivityB的onCreate()，onStart()和onResume() 方法执行顺序。（ActivityB现在具有用户关注点。）</span><br><span class="line">3.然后，如果ActivityA在屏幕上不再可见，则onStop()执行其方法。</span><br></pre></td></tr></table></figure><p>这种可预测的生命周期回调序列允许您管理从一个Activity到另一个Activity的信息转换。例如，如果您必须在第一个Activity停止时写入数据库以便以下Activity可以读取它，那么您应该在onPause()期间而不是在onStop()期间写入数据库。</p><p>3.保存Activity活动状态<br>当Activity暂停或停止，该Activity的活动状态会被保持,因为Activity对象在暂停或停止时仍保留在内存中 - 有关其成员和当前状态的所有信息仍然存在。因此，Activity会默认保留用户在活动中所做的任何更改，以便当活动返回到前台时（当它“恢复”时），那些更改仍然存在。</p><p>但是，当系统销毁Activity以恢复内存时，Activity对象被破坏，因此系统不能完好无损地恢复它的活动状态。在这种情况下，您可以通过实施额外的回调方法来确保保留有关活动状态的重要信息，该方法允许您保存有关活动状态的信息：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">onSaveInstanceState()  //用来保存用户状态信息</span><br></pre></td></tr></table></figure><p>onSaveInstanceState() 在Activity受破坏之前，系统会自动调用。系统会传递一个Bundle对象,您可以使用诸如putString()和putInt()之类的方法将关于Activity的状态信息保存为<code>名称 - 值</code>的键值对.</p><p>然后，如果系统终止您的应用程序进程,系统将重新创建活动并将其Bundle传递给Activity的onCreate()和onRestoreInstanceState()。使用这些方法之一，您可以从中提取已保存的状态Bundle并恢复活动状态。如果没有要恢复的状态信息，则Bundle传递给您的是null（这是第一次创建活动时的情况）。</p><p>如下图所示:<br><img src="https://upload-images.jianshu.io/upload_images/5549640-dd6569a60a33bcf2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="restore_instance.png"></p><p>活动返回到用户焦点且状态完好无损的两种方式：活动被销毁，然后重新创建，活动必须恢复先前保存的状态，或者活动停止，然后恢复，活动状态仍然存在完整。</p><blockquote><p>注意：onSaveInstanceState()在您的活动被销毁之前不能保证会被调用，因为在某些情况下不需要保存状态（例如当用户使用“ 返回”按钮离开您的活动时，因为用户是明确的关闭活动）。如果系统调用onSaveInstanceState()，则会在onPause()和onStop()之前执行.</p></blockquote><p>再者就是,即使不执行任何操作并且未实现onSaveInstanceState(),只要Activity没有被销毁,Activity也会默认实现onSaveInstanceState()来恢复某些活动状态.例如EditText输入的文字,但前提是控件需要有<code>android:id</code>,否则不会默认保存状态.</p><ol start="4"><li>onSaveInstanceState()常用场景</li></ol><p>某些设备配置可能会在运行时更改（例如屏幕方向，键盘可用性和语言）。发生此类更改时，Android会重新创建正在运行的活动（系统调用onDestroy()，然后立即调用onCreate()）.处理此类重新启动的最佳方法是使用onSaveInstanceState()和onRestoreInstanceState()（或onCreate()）来保存和恢复Activity活动状态.</p><h1 id="Activity进出后台任务和后台堆栈详解"><a href="#Activity进出后台任务和后台堆栈详解" class="headerlink" title="Activity进出后台任务和后台堆栈详解"></a>Activity进出后台任务和后台堆栈详解</h1><p>每个应用程序通常包含多个Activitys,每个Activity都应围绕用户可以执行的特定操作进行设计，并可以启动其他Activity,甚至可以启动设备上其他应用程序中存在的Activity.</p><p>Android设备主屏幕是大多数任务的起始位置。当用户触摸应用程序启动器中的图标（或主屏幕上的快捷方式）时，该应用程序的任务将到达前台。如果应用程序不存在任务（最近未使用该应用程序），则会创建一个新任务，该应用程序的“主”Activity将作为堆栈中的根Activity打开。</p><p>1.后台堆栈<br>后台堆栈指的是Activitys在后台任务中的排列规则,按”后进先出”排列.</p><p>例如当前Activity启动另一个Activity时，新Activity将被推到堆栈顶部并获得焦点。之前的Activity仍在堆栈中，但已停止。当活动停止时，系统将保留其用户界面的当前状态。当用户按下“ 返回” 按钮时，当前Activity将从堆栈顶部弹出（活动被销毁），之前的Activity将恢复（其UI的先前状态将恢复）。堆栈中的活动永远不会重新排列，只能在当前Activity启动时从堆栈推送和弹出到堆栈中，并在用户使用Back按钮退出时弹出.因此，后台堆栈作为“后进先出”对象结构操作。</p><p>如下图所示:<br><img src="https://upload-images.jianshu.io/upload_images/5549640-8a59e39c40d5d8f5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="diagram_backstack.png"></p><p>图中表示任务中的每个新Activity如何将项添加到后台堆栈。当用户按下“ 返回”按钮时，将破坏当前Activity并恢复先前的Activity。</p><p>如果用户继续按Back，则弹出堆栈中的每个Activity以显示前一个Activity，直到用户返回主屏幕（或任务开始时运行的任何活动）。从堆栈中删除所有活动后，该任务不再存在。</p><p>2.后台任务<br>任务是一个内聚单元，当用户开始新任务或通过主页按钮进入主屏幕时，可以移动到“后台背景” 。在后台，任务中的所有Activitys都会停止，但任务的后台堆栈保持不变 - 任务在发生另一项任务时完全失去焦点.</p><p>如下图所示:<br><img src="https://upload-images.jianshu.io/upload_images/5549640-20fe15469305d588.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="diagram_multitasking.png"></p><p>两个任务：任务B在前台接收用户交互，而任务A在后台，等待恢复,这就是Android上的多任务处理的一个示例。</p><blockquote><p>注意：可以在后台同时保存多个任务。但是，如果用户同时运行许多后台任务，系统可能会开始销毁后台活动以恢复内存，从而导致活动状态丢失。</p></blockquote><p>由于后台堆栈中的活动永远不会重新排列，如果您的应用程序允许用户从多个Activitys启动特定Activity，则会创建该Acticity的新实例并将其推送到堆栈（而不是引入任何先前的活动实例）到顶部。因此，应用程序中的一个Acticity可能会被多次实例化（甚至来自不同的任务）.</p><p>如下图所示:</p><p><img src="https://upload-images.jianshu.io/upload_images/5549640-6d33af4fe0be32ba.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="diagram_multiple_instances.png"></p><p>如果不希望多次实例化Acticity，则可以修改此行为。通常来说关于这部分内容是不太需要我们去更改的,所以这里我就不介绍了,有兴趣的同学可以自行翻阅<code>[官方文档]</code>.</p><p>3.定义Activity启动模式</p><p>启动模式允许您定义Activity的新实例与当前任务的关联方式。您可以通过两种方式定义不同的启动模式：</p><ul><li>使用 manifest file(manifest 清单文件)</li></ul><p>在清单文件中声明Activity时，可以使用<activity> 元素的<code>launchMode</code>属性指定Activity在启动时应如何与任务关联。</activity></p><blockquote><p>launchMode 属性分配四有种不同的启动模式 ：</p></blockquote><table><thead><tr><th>modes</th><th>description</th></tr></thead><tbody><tr><td>“standard” （默认模式）</td><td>默认。系统在启动它的任务中创建Activity的新实例，并将意图路由到该实例。Activity可以多次实例化，每个实例可以属于不同的任务，一个任务可以有多个实例。</td></tr><tr><td>“singleTop”</td><td>如果Activity的实例已存在于当前任务的顶部，则系统通过调用其onNewIntent()方法将意图路由到该实例，而不是创建Activity的新实例。Activity可以多次实例化，每个实例可以属于不同的任务，一个任务可以有多个实例（但只有当后端堆栈顶部的Activity不是Activity的现有实例时）。</td></tr><tr><td>“singleTask”</td><td>系统创建新任务并在新任务的根目录下实例化Activity。但是，如果Activity的实例已存在于单独的任务中，则系统会通过调用其onNewIntent()方法将意图路由到现有实例，而不是创建新实例。一次只能存在一个Activity实例。</td></tr><tr><td>“singleInstance”</td><td>相同”singleTask”，区别在于：系统不启动任何其他Activity纳入控制实例的任务。Activity始终是其任务的唯一成员; 任何由此开始的Activity都在一个单独的任务中打开。</td></tr></tbody></table><blockquote><p>无论Activity是在新任务中启动还是在与启动它的Activity相同的任务中启动，“ 返回”按钮始终会将用户带到上一个Activity。但是，如果启动指定singleTask启动模式的活动，则如果后台任务中存在该Activity的实例，则将整个任务带到前台。此时，后端堆栈现在包括堆栈顶部提出的任务中的所有Activitys。</p></blockquote><p>如下图所示:<br><img src="https://upload-images.jianshu.io/upload_images/5549640-99cea11671255a7d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="diagram_backstack_singletask_multiactivity.png"></p><ul><li>使用 Intent flags(意图传递)</li></ul><p>当您调用时startActivity()，您可以在其中包含一个标志Intent，声明新Activity应如何（或是否）与当前任务相关联。</p><table><thead><tr><th>Intent flags</th><th>description</th></tr></thead><tbody><tr><td>FLAG_ACTIVITY_NEW_TASK</td><td>与上述”singleTask” 效果相同</td></tr><tr><td>FLAG_ACTIVITY_SINGLE_TOP</td><td>与上述”singleTop”效果相同</td></tr><tr><td>FLAG_ACTIVITY_CLEAR_TOP</td><td>如果正在启动的Activity已在当前任务中运行，则不会启动该Activity的新实例，而是销毁其上的所有其他Activitys，并将此意图传递给Activity的恢复实例</td></tr></tbody></table><blockquote><p>注意：如果指定Activity的启动模式是 “standard”，它也将从堆栈中删除，并在其位置启动新实例以处理传入的意图。这是因为在启动模式下，总是为新意图创建一个新实例”standard”。</p></blockquote><p>4.清理后堆栈</p><p>如果用户长时间离开任务，系统将清除除根Activity之外的所有Activitys的任务。当用户再次返回任务时，仅还原根Activity。系统以这种方式运行，因为在很长一段时间之后，用户可能已经放弃了之前正在做的事情并返回任务以开始新的事情。</p><p>可以使用一些Activity属性来修改此行为：</p><table><thead><tr><th>attribute</th><th>description</th></tr></thead><tbody><tr><td>alwaysRetainTaskState</td><td>如果任务的根Activity将此属性设置为”true”，则不会发生刚才描述的默认行为。即使经过很长一段时间，任务仍会保留堆栈中的所有Activity</td></tr><tr><td>clearTaskOnLaunch</td><td>与”alwaysRetainTaskState”正好相反,即使在离开任务片刻之后，用户也始终以初始状态返回任务</td></tr><tr><td>finishOnTaskLaunch</td><td>此属性类似clearTaskOnLaunch，但它在单个活动上运行，而不是在整个任务上运行。它还可以导致任何活动消失，包括根活动。当它设置为时”true”，活动仍然是当前会话的任务的一部分。如果用户离开然后返回任务，它将不再存在</td></tr></tbody></table><blockquote><p>深呼一口气,不知不觉写了这么多,关于Activity的基本解析到这里就告一段落了,写完这些我对Activity又有了更深刻的理解和认识了,本文不止对Activity表面解析,更是深入到了一些底层驱动,希望看完这些能对你有所帮助.</p></blockquote><p>欢迎关注作者<a href="http://www.darryrzhong.site" target="_blank" rel="noopener">darryrzhong</a>,更多干货等你来拿哟.</p><h3 id="请赏个小红心！因为你的鼓励是我写作的最大动力！"><a href="#请赏个小红心！因为你的鼓励是我写作的最大动力！" class="headerlink" title="请赏个小红心！因为你的鼓励是我写作的最大动力！"></a>请赏个小红心！因为你的鼓励是我写作的最大动力！</h3><blockquote><p>更多精彩文章请关注</p><ul><li><a href="http://www.darryrzhong.xyz" target="_blank" rel="noopener">个人博客:darryrzhong</a></li><li><a href="https://juejin.im/user/5a6c3b19f265da3e49804988" target="_blank" rel="noopener">掘金</a></li><li><a href="https://www.jianshu.com/users/b7fdf53ec0b9/timeline" target="_blank" rel="noopener">简书</a></li><li><a href="https://segmentfault.com/u/darryrzhong_5ac59892a5882/articles" target="_blank" rel="noopener">SegmentFault</a></li><li><a href="https://www.imooc.com/u/6733207" target="_blank" rel="noopener">慕课网手记</a></li></ul></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;基于最近要准备去面试,特意系统的复习了下Android基础,看到Activity这块时,发现很多都忘了,而且之前也没有系统的学习和写笔记记录,所以,特此写下这篇关于Activity的一些理解,旨在帮助大家更好的理解Activity.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;Activity是什么&quot;&gt;&lt;a href=&quot;#Activity是什么&quot; class=&quot;headerlink&quot; title=&quot;Activity是什么?&quot;&gt;&lt;/a&gt;Activity是什么?&lt;/h1&gt;&lt;p&gt;&lt;code&gt;Activity&lt;/code&gt;是一个Android应用程序组件(也称为Android四大组件之一)，它提供了一个屏幕，用户可以通过该屏幕进行交互以执行某些操作，例如拨打电话，拍照，发送电子邮件或查看地图。每个活动都有一个窗口，用于绘制其用户界面。窗口通常填满屏幕，但可能比屏幕小，并漂浮在其他窗口的顶部.&lt;/p&gt;
&lt;p&gt;Android应用程序通常由多个彼此松散绑定的&lt;code&gt;Activity&lt;/code&gt;组成。通常，应用程序中的一个&lt;code&gt;Activity&lt;/code&gt;被指定为“主要”&lt;code&gt;Activity&lt;/code&gt;，该&lt;code&gt;Activity&lt;/code&gt;在首次启动应用程序时呈现给用户。然后，每个&lt;code&gt;Activity&lt;/code&gt;可以启动另一个&lt;code&gt;Activity&lt;/code&gt;以执行不同的操作。每次新&lt;code&gt;Activity&lt;/code&gt;开始时，前一个&lt;code&gt;Activity&lt;/code&gt;都会停止，但系统会将&lt;code&gt;Activity&lt;/code&gt;保留在&lt;code&gt;后台堆栈中&lt;/code&gt;（“后堆栈”）。当一个新的&lt;code&gt;Activity&lt;/code&gt;开始时，它会被推到后面的堆栈上，并引起用户的注意。后栈遵循基本的“ &lt;code&gt;后进先出&lt;/code&gt;”堆栈机制，因此，当用户完成当前活动并按下”后退按钮”时，它从堆栈弹出（并销毁），之前的活动恢复。（后台堆栈将在后面为大家详细介绍。）&lt;/p&gt;
&lt;h1 id=&quot;如何创建Activity&quot;&gt;&lt;a href=&quot;#如何创建Activity&quot; class=&quot;headerlink&quot; title=&quot;如何创建Activity&quot;&gt;&lt;/a&gt;如何创建Activity&lt;/h1&gt;&lt;p&gt;要创建Activity，您必须创建&lt;code&gt;Activity&lt;/code&gt;（或其现有子类）的子类。在子类中，您需要实现当Activity在其生命周期的各个状态之间转换时系统调用的回调方法，例如在创建，停止，恢复或销毁活动时。两个最重要的回调方法是：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;public class ExampleActivity extends AppCompatActivity &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; @Override&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    public void onCreate(@Nullable Bundle savedInstanceState, @Nullable PersistableBundle persistentState) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        super.onCreate(savedInstanceState, persistentState);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;//您必须实现此方法。系统在创建Activity时调用此方法。在您的实施中，您应该初始化Activity的基本组成部分。最重要的是，您必须在此处调用以定义Activity用户界面的布局。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        setContentView();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;//系统将此方法称为用户离开您的Activity的第一个指示（尽管并不总是意味着Activity正在被销毁）。这通常是您应该提交应该在当前用户会话之外保留的任何更改的地方（因为用户可能不会回来）。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;@Override&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    protected void onPause() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        super.onPause();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        //在此处应该提交应该在当前用户会话之外保留的任何更改的地方&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="Android" scheme="http://darryrzhong.xyz/categories/Android/"/>
    
    
      <category term="activity" scheme="http://darryrzhong.xyz/tags/activity/"/>
    
  </entry>
  
  <entry>
    <title>1024程序员节最新福利之2018最全大数据资料集合</title>
    <link href="http://darryrzhong.xyz/2019/03/27/1024%E7%A8%8B%E5%BA%8F%E5%91%98%E8%8A%82%E6%9C%80%E6%96%B0%E7%A6%8F%E5%88%A9%E4%B9%8B2018%E6%9C%80%E5%85%A8%E5%A4%A7%E6%95%B0%E6%8D%AE%E8%B5%84%E6%96%99%E9%9B%86%E5%90%88/"/>
    <id>http://darryrzhong.xyz/2019/03/27/1024程序员节最新福利之2018最全大数据资料集合/</id>
    <published>2019-03-27T03:18:57.000Z</published>
    <updated>2019-03-27T03:19:32.380Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>有好久没有写博客了,主要这段时间都沉迷学习无法自拔了,哈哈.自吹一波.</p><blockquote><p>前两天不是1024节吗,所以就有很多福利出现了,当然每个人能都获得的信息都有所不同,这就是所谓的信息差.秉着好东西需要分享和开源的好习惯,所以来给你们送福利了.</p></blockquote><blockquote><p>其他福利</p></blockquote><p>一、<a href="https://www.imooc.com/article/256997" target="_blank" rel="noopener">1024程序员节最新福利之2018最全java资料集合</a></p><p>二、<a href="https://www.imooc.com/article/256998" target="_blank" rel="noopener">1024程序员节最新福利之2018最全H5前端资料集</a></p><p>三、<a href="https://www.imooc.com/article/256999" target="_blank" rel="noopener">1024程序员节最新福利之2018最全Android资料集合</a></p><h1 id="Python核心基础"><a href="#Python核心基础" class="headerlink" title="Python核心基础"></a>Python核心基础</h1><p>一、尚硅谷Python核心基础视频：</p><p> <a href="https://pan.baidu.com/s/1LVvNP5NPgE-IxyhW6KgDqA" target="_blank" rel="noopener">https://pan.baidu.com/s/1LVvNP5NPgE-IxyhW6KgDqA</a></p><p> 密码：b2ma</p><p>二、Python核心语法实战：学生管理系统</p><p> <a href="https://pan.baidu.com/s/14tDNHX6rpsWUlQtFAGUq5w" target="_blank" rel="noopener">https://pan.baidu.com/s/14tDNHX6rpsWUlQtFAGUq5w</a></p><p>三、Python作品之《雷电战机》</p><p>  <a href="https://pan.baidu.com/s/1o7Ha6eA" target="_blank" rel="noopener">https://pan.baidu.com/s/1o7Ha6eA</a></p><h1 id="大数据阶段"><a href="#大数据阶段" class="headerlink" title="大数据阶段"></a>大数据阶段</h1><a id="more"></a><p>尚硅谷大数据之JavaWEB视频：<br><a href="https://pan.baidu.com/s/1DMJmY8isPW4hFLqIEF0TJA" target="_blank" rel="noopener">https://pan.baidu.com/s/1DMJmY8isPW4hFLqIEF0TJA</a></p><p>尚硅谷大数据之Spring视频：<br><a href="https://pan.baidu.com/s/1Q26Cixpv2fGGluUGzKi7Eg" target="_blank" rel="noopener">https://pan.baidu.com/s/1Q26Cixpv2fGGluUGzKi7Eg</a></p><p>尚硅谷大数据之SpringMVC视频：<br><a href="https://pan.baidu.com/s/1ktvzMfwY3C9Cxyv_Ftdhuw" target="_blank" rel="noopener">https://pan.baidu.com/s/1ktvzMfwY3C9Cxyv_Ftdhuw</a></p><p>尚硅谷大数据之MyBtis视频：<br><a href="https://pan.baidu.com/s/1rZXNajX8NM7ojx3_iTWDfA" target="_blank" rel="noopener">https://pan.baidu.com/s/1rZXNajX8NM7ojx3_iTWDfA</a></p><p>尚硅谷大数据之SSM：<br><a href="https://pan.baidu.com/s/1CKwlGsJjJd9kZvWk0GI-xw" target="_blank" rel="noopener">https://pan.baidu.com/s/1CKwlGsJjJd9kZvWk0GI-xw</a></p><p>尚硅谷大数据之Linux视频：</p><p><a href="https://pan.baidu.com/s/1wMTp4_Fh9Yl1CPjUNOydaw" target="_blank" rel="noopener">https://pan.baidu.com/s/1wMTp4_Fh9Yl1CPjUNOydaw</a></p><p>  密码：6q4k</p><p>  尚硅谷大数据之Shell视频：</p><p><a href="https://pan.baidu.com/s/1DecEi7Dq5R9Mghl6F_Csvw" target="_blank" rel="noopener">https://pan.baidu.com/s/1DecEi7Dq5R9Mghl6F_Csvw</a></p><p>密码：ucrr</p><p>  尚硅谷大数据之Hadoop视频：</p><p><a href="https://pan.baidu.com/s/1jMfkd2GV9oBq2gvtiyUBwQ" target="_blank" rel="noopener">https://pan.baidu.com/s/1jMfkd2GV9oBq2gvtiyUBwQ</a></p><p>密码：zu8f</p><p>  尚硅谷大数据之Hive视频：</p><p><a href="https://pan.baidu.com/s/1KOlNIMiJJvKIRHiBV7NQbw" target="_blank" rel="noopener">https://pan.baidu.com/s/1KOlNIMiJJvKIRHiBV7NQbw</a></p><p>密码：331u</p><p>  尚硅谷大数据之Zookeeper视频</p><p><a href="https://pan.baidu.com/s/1AmXksBIzKOUTd_YKRfsPOw" target="_blank" rel="noopener">https://pan.baidu.com/s/1AmXksBIzKOUTd_YKRfsPOw</a></p><p>密码：xjmx</p><p>公开课：大数据架构师课程：高薪实战课程</p><p><a href="https://pan.baidu.com/s/1QvkUkEvtMA29bLBFIZ-hJw" target="_blank" rel="noopener">https://pan.baidu.com/s/1QvkUkEvtMA29bLBFIZ-hJw</a></p><p>公开课：大数据项目实战–智慧出行</p><p>  <a href="https://pan.baidu.com/s/1y-RefkxcEHo7ZjRgL1Jq1A" target="_blank" rel="noopener">https://pan.baidu.com/s/1y-RefkxcEHo7ZjRgL1Jq1A</a></p><p>大数据项目实战–仿天猫用户行为分析</p><p>  <a href="https://pan.baidu.com/s/1dEKGHQL" target="_blank" rel="noopener">https://pan.baidu.com/s/1dEKGHQL</a></p><blockquote><p>大数据资料集合都在这了,赶快收藏吧.最后记得给我小心心哟!</p></blockquote><p>欢迎关注作者<a href="http://www.darryrzhong.site" target="_blank" rel="noopener">darryrzhong</a>,更多干货等你来拿哟.</p><h3 id="请赏个小红心！因为你的鼓励是我写作的最大动力！"><a href="#请赏个小红心！因为你的鼓励是我写作的最大动力！" class="headerlink" title="请赏个小红心！因为你的鼓励是我写作的最大动力！"></a>请赏个小红心！因为你的鼓励是我写作的最大动力！</h3><blockquote><p>更多精彩文章请关注</p><ul><li><a href="http://www.darryrzhong.site" target="_blank" rel="noopener">个人博客:darryrzhong</a></li><li><a href="https://juejin.im/user/5a6c3b19f265da3e49804988" target="_blank" rel="noopener">掘金</a></li><li><a href="https://www.jianshu.com/users/b7fdf53ec0b9/timeline" target="_blank" rel="noopener">简书</a></li><li><a href="https://segmentfault.com/u/darryrzhong_5ac59892a5882/articles" target="_blank" rel="noopener">SegmentFault</a></li><li><a href="https://www.imooc.com/u/6733207" target="_blank" rel="noopener">慕课网手记</a></li></ul></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;有好久没有写博客了,主要这段时间都沉迷学习无法自拔了,哈哈.自吹一波.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;前两天不是1024节吗,所以就有很多福利出现了,当然每个人能都获得的信息都有所不同,这就是所谓的信息差.秉着好东西需要分享和开源的好习惯,所以来给你们送福利了.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;其他福利&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;一、&lt;a href=&quot;https://www.imooc.com/article/256997&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;1024程序员节最新福利之2018最全java资料集合&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;二、&lt;a href=&quot;https://www.imooc.com/article/256998&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;1024程序员节最新福利之2018最全H5前端资料集&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;三、&lt;a href=&quot;https://www.imooc.com/article/256999&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;1024程序员节最新福利之2018最全Android资料集合&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;Python核心基础&quot;&gt;&lt;a href=&quot;#Python核心基础&quot; class=&quot;headerlink&quot; title=&quot;Python核心基础&quot;&gt;&lt;/a&gt;Python核心基础&lt;/h1&gt;&lt;p&gt;一、尚硅谷Python核心基础视频：&lt;/p&gt;
&lt;p&gt; &lt;a href=&quot;https://pan.baidu.com/s/1LVvNP5NPgE-IxyhW6KgDqA&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://pan.baidu.com/s/1LVvNP5NPgE-IxyhW6KgDqA&lt;/a&gt;&lt;/p&gt;
&lt;p&gt; 密码：b2ma&lt;/p&gt;
&lt;p&gt;二、Python核心语法实战：学生管理系统&lt;/p&gt;
&lt;p&gt; &lt;a href=&quot;https://pan.baidu.com/s/14tDNHX6rpsWUlQtFAGUq5w&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://pan.baidu.com/s/14tDNHX6rpsWUlQtFAGUq5w&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;三、Python作品之《雷电战机》&lt;/p&gt;
&lt;p&gt;  &lt;a href=&quot;https://pan.baidu.com/s/1o7Ha6eA&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://pan.baidu.com/s/1o7Ha6eA&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;大数据阶段&quot;&gt;&lt;a href=&quot;#大数据阶段&quot; class=&quot;headerlink&quot; title=&quot;大数据阶段&quot;&gt;&lt;/a&gt;大数据阶段&lt;/h1&gt;
    
    </summary>
    
      <category term="编程资料" scheme="http://darryrzhong.xyz/categories/%E7%BC%96%E7%A8%8B%E8%B5%84%E6%96%99/"/>
    
    
      <category term="大数据学习" scheme="http://darryrzhong.xyz/tags/%E5%A4%A7%E6%95%B0%E6%8D%AE%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>1024程序员节最新福利之2018最全Android资料集合</title>
    <link href="http://darryrzhong.xyz/2019/03/27/1024%E7%A8%8B%E5%BA%8F%E5%91%98%E8%8A%82%E6%9C%80%E6%96%B0%E7%A6%8F%E5%88%A9%E4%B9%8B2018%E6%9C%80%E5%85%A8Android%E8%B5%84%E6%96%99%E9%9B%86%E5%90%88/"/>
    <id>http://darryrzhong.xyz/2019/03/27/1024程序员节最新福利之2018最全Android资料集合/</id>
    <published>2019-03-27T03:17:47.000Z</published>
    <updated>2019-03-27T03:18:37.574Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>有好久没有写博客了,主要这段时间都沉迷学习无法自拔了,哈哈.自吹一波.</p><blockquote><p>前两天不是1024节吗,所以就有很多福利出现了,当然每个人能都获得的信息都有所不同,这就是所谓的信息差.秉着好东西需要分享和开源的好习惯,所以来给你们送福利了.</p></blockquote><blockquote><p>其他福利</p></blockquote><p>一、<a href="https://www.imooc.com/article/256997" target="_blank" rel="noopener">1024程序员节最新福利之2018最全java资料集合</a></p><p>二、<a href="https://www.imooc.com/article/257028" target="_blank" rel="noopener">1024程序员节最新福利之2018最全H5前端资料集</a></p><p>三、<a href="https://www.imooc.com/article/257000" target="_blank" rel="noopener">1024程序员节最新福利之2018最全大数据资料集合</a></p><h2 id="Android核心技术"><a href="#Android核心技术" class="headerlink" title="Android核心技术"></a>Android核心技术</h2><p>一、Android核心基础_15天精讲精练</p><p>   <a href="https://pan.baidu.com/s/1b86u2E" target="_blank" rel="noopener">https://pan.baidu.com/s/1b86u2E</a></p><p>二、Android自定义控件视频</p><p><a href="https://pan.baidu.com/s/1hrOVZd6" target="_blank" rel="noopener">https://pan.baidu.com/s/1hrOVZd6</a></p><p>三、Android—JNI视频</p><p><a href="http://pan.baidu.com/s/1kVqBCmr" target="_blank" rel="noopener">http://pan.baidu.com/s/1kVqBCmr</a></p><p>四、Android与H5互调</p><p><a href="https://pan.baidu.com/s/1miHaDbM" target="_blank" rel="noopener">https://pan.baidu.com/s/1miHaDbM</a></p><p>五、Android常用第三方框架源码分析</p><p><a href="http://pan.baidu.com/s/1o789Vjc" target="_blank" rel="noopener">http://pan.baidu.com/s/1o789Vjc</a></p><p>六、尚硅谷Android视频《多渠道打包》</p><p><a href="http://pan.baidu.com/s/1dEVpQyX" target="_blank" rel="noopener">http://pan.baidu.com/s/1dEVpQyX</a></p><h2 id="Android项目实战"><a href="#Android项目实战" class="headerlink" title="Android项目实战"></a>Android项目实战</h2><a id="more"></a> <p>一、Android项目实战—手机影音</p><p><a href="http://pan.baidu.com/s/1i5wLMbN" target="_blank" rel="noopener">http://pan.baidu.com/s/1i5wLMbN</a></p><p>二、最新Android项目—硅谷新闻</p><p><a href="https://pan.baidu.com/s/1nvASXvF" target="_blank" rel="noopener">https://pan.baidu.com/s/1nvASXvF</a></p><p>三、最新Android项目实战—硅谷社交</p><p><a href="https://pan.baidu.com/s/1dFyXZxR" target="_blank" rel="noopener">https://pan.baidu.com/s/1dFyXZxR</a></p><p>四、最新Android项目—硅谷商城[新]</p><p><a href="http://pan.baidu.com/s/1o8MyptC" target="_blank" rel="noopener">http://pan.baidu.com/s/1o8MyptC</a></p><p>五、最新Android项目—硅谷P2P金融</p><p><a href="https://pan.baidu.com/s/1KJbXUd3ymMhmJUPCqT9gzA" target="_blank" rel="noopener">https://pan.baidu.com/s/1KJbXUd3ymMhmJUPCqT9gzA</a></p><p>六、30分钟打造Android万能播放器</p><p>  <a href="https://pan.baidu.com/s/1gfq0FS3" target="_blank" rel="noopener">https://pan.baidu.com/s/1gfq0FS3</a></p><p>七、移动端重力感应：摇一摇的实现</p><p><a href="https://pan.baidu.com/s/1oGJSWf_RaPdKXP8vMllnCQ" target="_blank" rel="noopener">https://pan.baidu.com/s/1oGJSWf_RaPdKXP8vMllnCQ</a></p><h2 id="Android前沿技术"><a href="#Android前沿技术" class="headerlink" title="Android前沿技术"></a>Android前沿技术</h2><p>一、Android_软件框架搭建</p><p><a href="https://pan.baidu.com/s/1hsFIYig" target="_blank" rel="noopener">https://pan.baidu.com/s/1hsFIYig</a></p><p>二、Android_OKHttp使用方法</p><p><a href="https://pan.baidu.com/s/1c5McVW" target="_blank" rel="noopener">https://pan.baidu.com/s/1c5McVW</a></p><p>三、Android_JSON解析</p><p><a href="http://pan.baidu.com/s/1c23eePE" target="_blank" rel="noopener">http://pan.baidu.com/s/1c23eePE</a></p><p>四、Android_xUtils3</p><p><a href="https://pan.baidu.com/s/1nvGsExF" target="_blank" rel="noopener">https://pan.baidu.com/s/1nvGsExF</a></p><p>五、Android_Afinal</p><p><a href="http://pan.baidu.com/s/1c7lXH8" target="_blank" rel="noopener">http://pan.baidu.com/s/1c7lXH8</a></p><p>六、Android_Volley</p><p><a href="http://pan.baidu.com/s/1jIkBalg" target="_blank" rel="noopener">http://pan.baidu.com/s/1jIkBalg</a></p><p>七、Android_ButterKnife</p><p><a href="http://pan.baidu.com/s/1pKOgh9x" target="_blank" rel="noopener">http://pan.baidu.com/s/1pKOgh9x</a></p><p>八、Android_EventBus</p><p><a href="http://pan.baidu.com/s/1qXYTyA4" target="_blank" rel="noopener">http://pan.baidu.com/s/1qXYTyA4</a></p><p>九、Android_ImageLoader</p><p><a href="http://pan.baidu.com/s/1o7DsPmy" target="_blank" rel="noopener">http://pan.baidu.com/s/1o7DsPmy</a></p><p>十、Android_Picasso</p><p><a href="http://pan.baidu.com/s/1c1JITo8" target="_blank" rel="noopener">http://pan.baidu.com/s/1c1JITo8</a></p><p>十一、Android_Glide</p><p><a href="http://pan.baidu.com/s/1hswlhu0" target="_blank" rel="noopener">http://pan.baidu.com/s/1hswlhu0</a></p><p>十二、Android_Fresco</p><p><a href="http://pan.baidu.com/s/1qXHtwdA" target="_blank" rel="noopener">http://pan.baidu.com/s/1qXHtwdA</a></p><p>十三、Android_RecyclerView</p><p><a href="http://pan.baidu.com/s/1kVjTLJ5" target="_blank" rel="noopener">http://pan.baidu.com/s/1kVjTLJ5</a></p><p>十四、Android_Pulltorefresh</p><p><a href="http://pan.baidu.com/s/1c20xVm4" target="_blank" rel="noopener">http://pan.baidu.com/s/1c20xVm4</a></p><p>十五、 Android_UniversalVideoView</p><p><a href="http://pan.baidu.com/s/1mhEK9EK" target="_blank" rel="noopener">http://pan.baidu.com/s/1mhEK9EK</a></p><p>十六、 Android_JieCaoVideoPlayer</p><p> <a href="https://pan.baidu.com/s/1geZZ1Ov" target="_blank" rel="noopener">https://pan.baidu.com/s/1geZZ1Ov</a></p><p>十七、 Android_Banner</p><p><a href="https://pan.baidu.com/s/1nv2jpDB" target="_blank" rel="noopener">https://pan.baidu.com/s/1nv2jpDB</a></p><p>十八、CountdownView秒杀</p><p><a href="https://pan.baidu.com/s/1nvAWFMT" target="_blank" rel="noopener">https://pan.baidu.com/s/1nvAWFMT</a></p><p>十九、OpenDanmaku弹幕</p><p><a href="https://pan.baidu.com/s/1eS2x2Hc" target="_blank" rel="noopener">https://pan.baidu.com/s/1eS2x2Hc</a></p><p>二十、TabLayout&amp;ViewPager </p><p><a href="https://pan.baidu.com/s/1mhCKJag#list/path=%2F" target="_blank" rel="noopener">https://pan.baidu.com/s/1mhCKJag#list/path=%2F</a></p><blockquote><p>Android资料集合都在这了,赶快收藏吧.最后记得给我小心心哟!</p></blockquote><p>欢迎关注作者<a href="http://www.darryrzhong.site" target="_blank" rel="noopener">darryrzhong</a>,更多干货等你来拿哟.</p><h3 id="请赏个小红心！因为你的鼓励是我写作的最大动力！"><a href="#请赏个小红心！因为你的鼓励是我写作的最大动力！" class="headerlink" title="请赏个小红心！因为你的鼓励是我写作的最大动力！"></a>请赏个小红心！因为你的鼓励是我写作的最大动力！</h3><blockquote><p>更多精彩文章请关注</p><ul><li><a href="http://www.darryrzhong.site" target="_blank" rel="noopener">个人博客:darryrzhong</a></li><li><a href="https://juejin.im/user/5a6c3b19f265da3e49804988" target="_blank" rel="noopener">掘金</a></li><li><a href="https://www.jianshu.com/users/b7fdf53ec0b9/timeline" target="_blank" rel="noopener">简书</a></li><li><a href="https://segmentfault.com/u/darryrzhong_5ac59892a5882/articles" target="_blank" rel="noopener">SegmentFault</a></li><li><a href="https://www.imooc.com/u/6733207" target="_blank" rel="noopener">慕课网手记</a></li></ul></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;有好久没有写博客了,主要这段时间都沉迷学习无法自拔了,哈哈.自吹一波.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;前两天不是1024节吗,所以就有很多福利出现了,当然每个人能都获得的信息都有所不同,这就是所谓的信息差.秉着好东西需要分享和开源的好习惯,所以来给你们送福利了.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;其他福利&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;一、&lt;a href=&quot;https://www.imooc.com/article/256997&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;1024程序员节最新福利之2018最全java资料集合&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;二、&lt;a href=&quot;https://www.imooc.com/article/257028&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;1024程序员节最新福利之2018最全H5前端资料集&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;三、&lt;a href=&quot;https://www.imooc.com/article/257000&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;1024程序员节最新福利之2018最全大数据资料集合&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;Android核心技术&quot;&gt;&lt;a href=&quot;#Android核心技术&quot; class=&quot;headerlink&quot; title=&quot;Android核心技术&quot;&gt;&lt;/a&gt;Android核心技术&lt;/h2&gt;&lt;p&gt;一、Android核心基础_15天精讲精练&lt;/p&gt;
&lt;p&gt;   &lt;a href=&quot;https://pan.baidu.com/s/1b86u2E&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://pan.baidu.com/s/1b86u2E&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;二、Android自定义控件视频&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://pan.baidu.com/s/1hrOVZd6&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://pan.baidu.com/s/1hrOVZd6&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;三、Android—JNI视频&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://pan.baidu.com/s/1kVqBCmr&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://pan.baidu.com/s/1kVqBCmr&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;四、Android与H5互调&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://pan.baidu.com/s/1miHaDbM&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://pan.baidu.com/s/1miHaDbM&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;五、Android常用第三方框架源码分析&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://pan.baidu.com/s/1o789Vjc&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://pan.baidu.com/s/1o789Vjc&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;六、尚硅谷Android视频《多渠道打包》&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://pan.baidu.com/s/1dEVpQyX&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://pan.baidu.com/s/1dEVpQyX&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;Android项目实战&quot;&gt;&lt;a href=&quot;#Android项目实战&quot; class=&quot;headerlink&quot; title=&quot;Android项目实战&quot;&gt;&lt;/a&gt;Android项目实战&lt;/h2&gt;
    
    </summary>
    
      <category term="编程资料" scheme="http://darryrzhong.xyz/categories/%E7%BC%96%E7%A8%8B%E8%B5%84%E6%96%99/"/>
    
    
      <category term="Android学习" scheme="http://darryrzhong.xyz/tags/Android%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>1024程序员节最新福利之2018最全java资料集合</title>
    <link href="http://darryrzhong.xyz/2019/03/27/1024%E7%A8%8B%E5%BA%8F%E5%91%98%E8%8A%82%E6%9C%80%E6%96%B0%E7%A6%8F%E5%88%A9%E4%B9%8B2018%E6%9C%80%E5%85%A8java%E8%B5%84%E6%96%99%E9%9B%86%E5%90%88/"/>
    <id>http://darryrzhong.xyz/2019/03/27/1024程序员节最新福利之2018最全java资料集合/</id>
    <published>2019-03-27T03:16:43.000Z</published>
    <updated>2019-03-27T03:17:26.140Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>有好久没有写博客了,主要这段时间都沉迷学习无法自拔了,哈哈.自吹一波.</p><blockquote><p>前两天不是1024节吗,所以就有很多福利出现了,当然每个人能都获得的信息都有所不同,这就是所谓的信息差.秉着好东西需要分享和开源的好习惯,所以来给你们送福利了.</p></blockquote><blockquote><p>其他福利</p></blockquote><p>一、<a href="https://www.imooc.com/article/256999" target="_blank" rel="noopener">1024程序员节最新福利之2018最全Android资料集合</a></p><p>二、<a href="https://www.imooc.com/article/256998" target="_blank" rel="noopener">1024程序员节最新福利之2018最全H5前端资料集</a></p><p>三、<a href="https://www.imooc.com/article/257000" target="_blank" rel="noopener">1024程序员节最新福利之2018最全大数据资料集合</a></p><h3 id="Java基础阶段"><a href="#Java基础阶段" class="headerlink" title="Java基础阶段"></a>Java基础阶段</h3><p>一、20天横扫Java基础（课堂实录）</p><p><a href="https://pan.baidu.com/s/1htTzZRQ" target="_blank" rel="noopener">https://pan.baidu.com/s/1htTzZRQ</a></p><p>二、尚硅谷Java基础实战——Bank项目</p><p><a href="http://pan.baidu.com/share/link?shareid=3690978764&amp;uk=573533038" target="_blank" rel="noopener">http://pan.baidu.com/share/link?shareid=3690978764&amp;uk=573533038</a></p><p>三、尚硅谷_ORACLE、SQL、PLSQL 视频教程</p><p><a href="https://pan.baidu.com/s/1ghb9ENL" target="_blank" rel="noopener">https://pan.baidu.com/s/1ghb9ENL</a></p><p>四、尚硅谷JDBC视频教程</p><p> <a href="https://pan.baidu.com/s/1c3XBTk8" target="_blank" rel="noopener">https://pan.baidu.com/s/1c3XBTk8</a></p><p>五、Java8新特性</p><p> <a href="http://pan.baidu.com/s/1cgWOH4" target="_blank" rel="noopener">http://pan.baidu.com/s/1cgWOH4</a></p><p>六、Java——JUC</p><p> <a href="http://pan.baidu.com/s/1hsoh76k" target="_blank" rel="noopener">http://pan.baidu.com/s/1hsoh76k</a></p><a id="more"></a><p>七、Java——NIO</p><p><a href="http://pan.baidu.com/s/1c2N1ADy" target="_blank" rel="noopener">http://pan.baidu.com/s/1c2N1ADy</a></p><p>八、最新Java9新特性 视频</p><p>  链接: <a href="https://pan.baidu.com/s/1ge85H4Z" target="_blank" rel="noopener">https://pan.baidu.com/s/1ge85H4Z</a></p><p>密码: 9e1k</p><h2 id="JavaWeb阶段"><a href="#JavaWeb阶段" class="headerlink" title="JavaWeb阶段"></a>JavaWeb阶段</h2><p>一、尚硅谷_JavaScript DOM编程视频教程</p><p><a href="https://pan.baidu.com/s/1dzPYA6" target="_blank" rel="noopener">https://pan.baidu.com/s/1dzPYA6</a></p><p>二、尚硅谷jQuery 视频教程</p><p><a href="https://pan.baidu.com/s/1jJkaWya" target="_blank" rel="noopener">https://pan.baidu.com/s/1jJkaWya</a></p><p>三、尚硅谷Ajax视频教程</p><p><a href="https://pan.baidu.com/s/1skDOKZ7" target="_blank" rel="noopener">https://pan.baidu.com/s/1skDOKZ7</a></p><p>四、尚硅谷JavaWeb视频基础</p><p>  <a href="https://pan.baidu.com/s/1kU6Ley7" target="_blank" rel="noopener">https://pan.baidu.com/s/1kU6Ley7</a></p><p>五、尚硅谷JavaWEB 项目实战（图书商城）</p><p><a href="https://pan.baidu.com/s/1jIoAMKe" target="_blank" rel="noopener">https://pan.baidu.com/s/1jIoAMKe</a></p><h2 id="JavaEE阶段"><a href="#JavaEE阶段" class="headerlink" title="JavaEE阶段"></a>JavaEE阶段</h2><p>一、尚硅谷Struts2视频教程</p><p>   <a href="https://pan.baidu.com/s/1jI6xxkE" target="_blank" rel="noopener">https://pan.baidu.com/s/1jI6xxkE</a></p><p>二、尚硅谷Hibernate 4视频教程</p><p><a href="https://pan.baidu.com/s/1bqpEEej" target="_blank" rel="noopener">https://pan.baidu.com/s/1bqpEEej</a></p><p>三、尚硅谷Spring 4视频教程</p><p><a href="https://pan.baidu.com/s/1O_avNG9liWl87teF31FEZg" target="_blank" rel="noopener">https://pan.baidu.com/s/1O_avNG9liWl87teF31FEZg</a></p><p>四、尚硅谷SSH整合&amp;综合案例视频</p><p><a href="https://pan.baidu.com/s/1dFbTMxV" target="_blank" rel="noopener">https://pan.baidu.com/s/1dFbTMxV</a></p><p>五、尚硅谷SVN视频教程</p><p><a href="https://pan.baidu.com/s/1kWZz9vp" target="_blank" rel="noopener">https://pan.baidu.com/s/1kWZz9vp</a></p><p>六、尚硅谷SpringMVC视频教程</p><p>  <a href="https://pan.baidu.com/s/1gfoaUw7" target="_blank" rel="noopener">https://pan.baidu.com/s/1gfoaUw7</a></p><p>七、尚硅谷JPA视频教程</p><p><a href="https://pan.baidu.com/s/1hsqGMOW" target="_blank" rel="noopener">https://pan.baidu.com/s/1hsqGMOW</a></p><p>八、尚硅谷SpringData视频</p><p><a href="https://pan.baidu.com/s/1c38938W" target="_blank" rel="noopener">https://pan.baidu.com/s/1c38938W</a></p><p>九、尚硅谷SSSP整合&amp;分页视频</p><p><a href="https://pan.baidu.com/s/1miEVgr2" target="_blank" rel="noopener">https://pan.baidu.com/s/1miEVgr2</a></p><p>十、尚硅谷Redis视频</p><p><a href="http://pan.baidu.com/s/1pLKsBOJ" target="_blank" rel="noopener">http://pan.baidu.com/s/1pLKsBOJ</a></p><p>十一、  尚硅谷Maven视频</p><p><a href="https://pan.baidu.com/s/1dHfbx8d" target="_blank" rel="noopener">https://pan.baidu.com/s/1dHfbx8d</a></p><p>十二、  尚硅谷Shiro视频</p><p><a href="https://pan.baidu.com/s/1yXiOStKfxSCYoMHsNrnCFQ" target="_blank" rel="noopener">https://pan.baidu.com/s/1yXiOStKfxSCYoMHsNrnCFQ</a></p><p>十三、  尚硅谷MySQL高级视频</p><p> <a href="https://pan.baidu.com/s/1i7ircH3" target="_blank" rel="noopener">https://pan.baidu.com/s/1i7ircH3</a></p><p>十四、  尚硅谷MyBatis 视频</p><p> <a href="https://pan.baidu.com/s/1snbVg77" target="_blank" rel="noopener">https://pan.baidu.com/s/1snbVg77</a></p><p>十五、 尚硅谷SSM高级视频</p><p>  <a href="https://pan.baidu.com/s/1eTcHjRc" target="_blank" rel="noopener">https://pan.baidu.com/s/1eTcHjRc</a></p><p>十六、 尚硅谷MySQL基础视频178集</p><p><a href="https://pan.baidu.com/s/1mjCyBm4" target="_blank" rel="noopener">https://pan.baidu.com/s/1mjCyBm4</a></p><p>  密码: p03n</p><p>十七、 最新尚硅谷Spring注解驱动开发</p><p> <a href="https://pan.baidu.com/s/1SzHGre2Upj8NzzGZ_6qM4Q" target="_blank" rel="noopener">https://pan.baidu.com/s/1SzHGre2Upj8NzzGZ_6qM4Q</a></p><p>十八、 最新尚硅谷SpringBoot-核心技术篇</p><p> <a href="https://pan.baidu.com/s/1isXPv_NrBX2Fuf9pRLU2sQ" target="_blank" rel="noopener">https://pan.baidu.com/s/1isXPv_NrBX2Fuf9pRLU2sQ</a></p><p>密码: sya6  </p><p>十九、最新尚硅谷SpringBoot-整合篇</p><p><a href="https://pan.baidu.com/s/1LHFKQsuQDOmUyzMfRkq63w" target="_blank" rel="noopener">https://pan.baidu.com/s/1LHFKQsuQDOmUyzMfRkq63w</a></p><p>  密码：1n9z</p><p>二十、最新尚硅谷Mapper视频</p><p><a href="https://pan.baidu.com/s/1yfzUkHjMiF613uiiM5KBYw" target="_blank" rel="noopener">https://pan.baidu.com/s/1yfzUkHjMiF613uiiM5KBYw</a></p><p> 密码：l0xw</p><p>二十一、最新尚硅谷Linux视频</p><p><a href="https://pan.baidu.com/s/1AmDqMODihyifgW9gevrSwA" target="_blank" rel="noopener">https://pan.baidu.com/s/1AmDqMODihyifgW9gevrSwA</a></p><p>   密码：kxpp</p><p>二十二、最新尚硅谷SVN高级视频</p><p><a href="https://pan.baidu.com/s/1ADe9Db5ZbcKC4I_V2RiwDw" target="_blank" rel="noopener">https://pan.baidu.com/s/1ADe9Db5ZbcKC4I_V2RiwDw</a></p><p> 密码：6ean</p><p>二十三、最新尚硅谷SpringCloud视频</p><p>  <a href="https://pan.baidu.com/s/1nB23cEOZJmbCkJebAU4hCg" target="_blank" rel="noopener">https://pan.baidu.com/s/1nB23cEOZJmbCkJebAU4hCg</a></p><p>  密码：w4vq</p><p>二十四、最新尚硅谷RBAC权限实战项目</p><p><a href="https://pan.baidu.com/s/1jsLd7V2CPiC9uoWOctWpQg" target="_blank" rel="noopener">https://pan.baidu.com/s/1jsLd7V2CPiC9uoWOctWpQg</a></p><p> 密码：6vby</p><p>二十五、最新尚硅谷Git&amp;GitHup视频</p><p>  <a href="https://pan.baidu.com/s/1JDQKVDtdK7_Tiw3Tejottg" target="_blank" rel="noopener">https://pan.baidu.com/s/1JDQKVDtdK7_Tiw3Tejottg</a></p><p>密码：2mvj</p><p>二十六、最新尚硅谷Jenkins视频</p><p><a href="https://pan.baidu.com/s/1WKDJpwKmJBUi8FYBe_9r1g" target="_blank" rel="noopener">https://pan.baidu.com/s/1WKDJpwKmJBUi8FYBe_9r1g</a></p><p> 密码：9jbl</p><p>二十七、最新尚硅谷MyBatisPlus视频</p><p><a href="https://pan.baidu.com/s/1XVX5rwawjIjQe5pO79HYZg" target="_blank" rel="noopener">https://pan.baidu.com/s/1XVX5rwawjIjQe5pO79HYZg</a></p><p> 密码：0ba6</p><p>二十八、最新尚硅谷Docker核心技术</p><p><a href="https://pan.baidu.com/s/17rJ5ME_7p804Nh-Qcc0T6A" target="_blank" rel="noopener">https://pan.baidu.com/s/17rJ5ME_7p804Nh-Qcc0T6A</a></p><p>密码：5pmr</p><p>二十九、最新尚硅谷Java开发利器：IntelliJ IDEA的安装、配置与使用尚硅谷</p><p><a href="https://pan.baidu.com/s/11biVBv9EI9yfL6Cee0r0LQ" target="_blank" rel="noopener">https://pan.baidu.com/s/11biVBv9EI9yfL6Cee0r0LQ</a></p><p>  密码：n7hn</p><p>三十、最新尚硅谷Dubbo视频教程</p><p><a href="https://pan.baidu.com/s/1Iv4zxskhHBHGiBD4e2-5dQ" target="_blank" rel="noopener">https://pan.baidu.com/s/1Iv4zxskhHBHGiBD4e2-5dQ</a></p><p>密码：22nr</p><blockquote><p>java资料集合都在这了,赶快收藏吧.最后记得给我小心心哟!</p></blockquote><p>欢迎关注作者<a href="http://www.darryrzhong.xyz" target="_blank" rel="noopener">darryrzhong</a>,更多干货等你来拿哟.</p><h3 id="请赏个小红心！因为你的鼓励是我写作的最大动力！"><a href="#请赏个小红心！因为你的鼓励是我写作的最大动力！" class="headerlink" title="请赏个小红心！因为你的鼓励是我写作的最大动力！"></a>请赏个小红心！因为你的鼓励是我写作的最大动力！</h3><blockquote><p>更多精彩文章请关注</p><ul><li><a href="http://www.darryrzhong.site" target="_blank" rel="noopener">个人博客:darryrzhong</a></li><li><a href="https://juejin.im/user/5a6c3b19f265da3e49804988" target="_blank" rel="noopener">掘金</a></li><li><a href="https://www.jianshu.com/users/b7fdf53ec0b9/timeline" target="_blank" rel="noopener">简书</a></li><li><a href="https://segmentfault.com/u/darryrzhong_5ac59892a5882/articles" target="_blank" rel="noopener">SegmentFault</a></li><li><a href="https://www.imooc.com/u/6733207" target="_blank" rel="noopener">慕课网手记</a></li></ul></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;有好久没有写博客了,主要这段时间都沉迷学习无法自拔了,哈哈.自吹一波.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;前两天不是1024节吗,所以就有很多福利出现了,当然每个人能都获得的信息都有所不同,这就是所谓的信息差.秉着好东西需要分享和开源的好习惯,所以来给你们送福利了.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;其他福利&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;一、&lt;a href=&quot;https://www.imooc.com/article/256999&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;1024程序员节最新福利之2018最全Android资料集合&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;二、&lt;a href=&quot;https://www.imooc.com/article/256998&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;1024程序员节最新福利之2018最全H5前端资料集&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;三、&lt;a href=&quot;https://www.imooc.com/article/257000&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;1024程序员节最新福利之2018最全大数据资料集合&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;Java基础阶段&quot;&gt;&lt;a href=&quot;#Java基础阶段&quot; class=&quot;headerlink&quot; title=&quot;Java基础阶段&quot;&gt;&lt;/a&gt;Java基础阶段&lt;/h3&gt;&lt;p&gt;一、20天横扫Java基础（课堂实录）&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://pan.baidu.com/s/1htTzZRQ&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://pan.baidu.com/s/1htTzZRQ&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;二、尚硅谷Java基础实战——Bank项目&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://pan.baidu.com/share/link?shareid=3690978764&amp;amp;uk=573533038&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://pan.baidu.com/share/link?shareid=3690978764&amp;amp;uk=573533038&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;三、尚硅谷_ORACLE、SQL、PLSQL 视频教程&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://pan.baidu.com/s/1ghb9ENL&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://pan.baidu.com/s/1ghb9ENL&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;四、尚硅谷JDBC视频教程&lt;/p&gt;
&lt;p&gt; &lt;a href=&quot;https://pan.baidu.com/s/1c3XBTk8&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://pan.baidu.com/s/1c3XBTk8&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;五、Java8新特性&lt;/p&gt;
&lt;p&gt; &lt;a href=&quot;http://pan.baidu.com/s/1cgWOH4&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://pan.baidu.com/s/1cgWOH4&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;六、Java——JUC&lt;/p&gt;
&lt;p&gt; &lt;a href=&quot;http://pan.baidu.com/s/1hsoh76k&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://pan.baidu.com/s/1hsoh76k&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="编程资料" scheme="http://darryrzhong.xyz/categories/%E7%BC%96%E7%A8%8B%E8%B5%84%E6%96%99/"/>
    
    
      <category term="java学习" scheme="http://darryrzhong.xyz/tags/java%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>1024程序员节最新福利之2018最全H5前端资料集</title>
    <link href="http://darryrzhong.xyz/2019/03/27/1024%E7%A8%8B%E5%BA%8F%E5%91%98%E8%8A%82%E6%9C%80%E6%96%B0%E7%A6%8F%E5%88%A9%E4%B9%8B2018%E6%9C%80%E5%85%A8H5%E5%89%8D%E7%AB%AF%E8%B5%84%E6%96%99%E9%9B%86/"/>
    <id>http://darryrzhong.xyz/2019/03/27/1024程序员节最新福利之2018最全H5前端资料集/</id>
    <published>2019-03-27T03:15:09.000Z</published>
    <updated>2019-03-27T03:16:20.722Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>有好久没有写博客了,主要这段时间都沉迷学习无法自拔了,哈哈.自吹一波.</p><blockquote><p>前两天不是1024节吗,所以就有很多福利出现了,当然每个人能都获得的信息都有所不同,这就是所谓的信息差.秉着好东西需要分享和开源的好习惯,所以来给你们送福利了.</p></blockquote><blockquote><p>其他福利</p></blockquote><p>一、<a href="https://www.imooc.com/article/256997" target="_blank" rel="noopener">1024程序员节最新福利之2018最全java资料集合</a></p><p>二、<a href="https://www.imooc.com/article/257000" target="_blank" rel="noopener">1024程序员节最新福利之2018最全大数据资料集合</a></p><p>三、<a href="https://www.imooc.com/article/256999" target="_blank" rel="noopener">1024程序员节最新福利之2018最全Android资料集合</a></p><h1 id="2018最全H5前端资料集合"><a href="#2018最全H5前端资料集合" class="headerlink" title="2018最全H5前端资料集合"></a>2018最全H5前端资料集合</h1><p>一、HTML &amp; CSS 核心教程：（103集实战教学，从入门到精通）</p><p><a href="http://pan.baidu.com/s/1pLwKZN1" target="_blank" rel="noopener">http://pan.baidu.com/s/1pLwKZN1</a></p><a id="more"></a><p>二、尚硅谷JavaScript视频（140集实战教学，从入门到精通）</p><p><a href="https://pan.baidu.com/s/1gfh9q8r" target="_blank" rel="noopener">https://pan.baidu.com/s/1gfh9q8r</a></p><p>三、尚硅谷JavaScript高级视频</p><p><a href="https://pan.baidu.com/s/1cLhs0u" target="_blank" rel="noopener">https://pan.baidu.com/s/1cLhs0u</a></p><p>四、尚硅谷jQuery视频</p><p><a href="https://pan.baidu.com/s/1i5Gjxlj" target="_blank" rel="noopener">https://pan.baidu.com/s/1i5Gjxlj</a></p><p>五、尚硅谷NodeJS 视频</p><p><a href="https://pan.baidu.com/s/1cnr0Cm" target="_blank" rel="noopener">https://pan.baidu.com/s/1cnr0Cm</a></p><p>密码: sqku</p><p>六、尚硅谷MongoDB 视频</p><p><a href="https://pan.baidu.com/s/1mirGFyw" target="_blank" rel="noopener">https://pan.baidu.com/s/1mirGFyw</a></p><p>密码: nwe1</p><p>七、尚硅谷Zepto 视频</p><p><a href="https://pan.baidu.com/s/1o7PSymu" target="_blank" rel="noopener">https://pan.baidu.com/s/1o7PSymu</a></p><p>密码: e86p</p><p>八、尚硅谷AngularJS 视频</p><p><a href="https://pan.baidu.com/s/1o85jOVK" target="_blank" rel="noopener">https://pan.baidu.com/s/1o85jOVK</a></p><p>密码: 7vi2</p><p>九、尚硅谷ES5_6_7 视频</p><p> <a href="https://pan.baidu.com/s/1i4Z5VNZ" target="_blank" rel="noopener">https://pan.baidu.com/s/1i4Z5VNZ</a></p><p>密码: 3fuy</p><p>十、尚硅谷JS模块化  视频</p><p> <a href="https://pan.baidu.com/s/1skO0tJZ" target="_blank" rel="noopener">https://pan.baidu.com/s/1skO0tJZ</a></p><p>密码: tekn</p><p>十一、最新尚硅谷自动化构建工具  视频</p><p>（1）webpack 链接: <a href="https://pan.baidu.com/s/1kUG5cLT" target="_blank" rel="noopener">https://pan.baidu.com/s/1kUG5cLT</a>  密码: ru45</p><p>（2）Gulp 链接: <a href="https://pan.baidu.com/s/1hsMqZkS" target="_blank" rel="noopener">https://pan.baidu.com/s/1hsMqZkS</a>  密码: nprj</p><p>（3）Grunt 链接: <a href="https://pan.baidu.com/s/1bGhxL0" target="_blank" rel="noopener">https://pan.baidu.com/s/1bGhxL0</a>  密码: m7kq</p><p>十二、尚硅谷React视频</p><p><a href="https://pan.baidu.com/s/1TnD2BNqhNWKWyb6v3VoZfw" target="_blank" rel="noopener">https://pan.baidu.com/s/1TnD2BNqhNWKWyb6v3VoZfw</a></p><p> 密码：xz7c</p><p>十三、尚硅谷CSS2.1 视频</p><p><a href="https://pan.baidu.com/s/1ggA6SPt" target="_blank" rel="noopener">https://pan.baidu.com/s/1ggA6SPt</a></p><p>密码：jybl</p><p>十四、最新尚硅谷CSS3 视频</p><p>  <a href="https://pan.baidu.com/s/1bqiUHYZ" target="_blank" rel="noopener">https://pan.baidu.com/s/1bqiUHYZ</a></p><p> 密码：jojr</p><p>十五、最新尚硅谷less 视频</p><p><a href="https://pan.baidu.com/s/1jJFk5MI" target="_blank" rel="noopener">https://pan.baidu.com/s/1jJFk5MI</a></p><p>密码：izzk</p><p>十六、尚硅谷bootstrap 视频</p><p> <a href="https://pan.baidu.com/s/1eTxHHN8" target="_blank" rel="noopener">https://pan.baidu.com/s/1eTxHHN8</a></p><p> 密码：hzet</p><p>十七、尚硅谷HTML5核心视频</p><p> <a href="https://pan.baidu.com/s/18hy_J8FdmBYabVGU8BqVKA" target="_blank" rel="noopener">https://pan.baidu.com/s/18hy_J8FdmBYabVGU8BqVKA</a></p><p> 密码：3fhg</p><p>十八、尚硅谷HTML5实战视频</p><p> <a href="https://pan.baidu.com/s/1ipfFFhtWGvNuCMicxnzQdw" target="_blank" rel="noopener">https://pan.baidu.com/s/1ipfFFhtWGvNuCMicxnzQdw</a></p><p>密码：dehi</p><p>十九、最新尚硅谷HTML5项目-谷粒音乐</p><p>   <a href="https://pan.baidu.com/s/1u6LBOWa9QCpETeC3gjzojw" target="_blank" rel="noopener">https://pan.baidu.com/s/1u6LBOWa9QCpETeC3gjzojw</a></p><p> 密码：plb6</p><p>二十、最新尚硅谷项目硅谷直聘</p><p><a href="https://pan.baidu.com/s/1h7H6WwLjyYVstlYix7LuxA" target="_blank" rel="noopener">https://pan.baidu.com/s/1h7H6WwLjyYVstlYix7LuxA</a></p><p> 密码：wh98</p><p>二十一、最新尚硅谷VUE技术核心视频    </p><p><a href="https://pan.baidu.com/s/1M6i5gcjxsooj6ejOhOJ2zw" target="_blank" rel="noopener">https://pan.baidu.com/s/1M6i5gcjxsooj6ejOhOJ2zw</a></p><p>密码：rf35</p><p>二十二：最新尚硅谷VUE项目-硅谷外卖</p><p>  <a href="https://pan.baidu.com/s/1siO6Anl_LeyfS2hcv6rStw" target="_blank" rel="noopener">https://pan.baidu.com/s/1siO6Anl_LeyfS2hcv6rStw</a></p><p> 密码：b6q5</p><p>二十三：最新尚硅谷微信小程序视频</p><p> <a href="https://pan.baidu.com/s/1dyM3AUC-UPVBjU9LcVMF5w" target="_blank" rel="noopener">https://pan.baidu.com/s/1dyM3AUC-UPVBjU9LcVMF5w</a></p><p> 密码：0vhr</p><p>二十四、HTML5实战_天猫商城品牌墙</p><p>  <a href="https://pan.baidu.com/s/1hr4v8Pm" target="_blank" rel="noopener">https://pan.baidu.com/s/1hr4v8Pm</a></p><p>二十五、HTML5特效实战</p><p>  <a href="https://pan.baidu.com/s/1kVBrpZp" target="_blank" rel="noopener">https://pan.baidu.com/s/1kVBrpZp</a></p><p>二十六、CSS3特效实战</p><p>  <a href="https://pan.baidu.com/s/1dESOjFr" target="_blank" rel="noopener">https://pan.baidu.com/s/1dESOjFr</a></p><p>二十七、HTML5实战之Canvas刮刮卡</p><p>  <a href="https://pan.baidu.com/s/1ge7Lw9l" target="_blank" rel="noopener">https://pan.baidu.com/s/1ge7Lw9l</a></p><blockquote><p>H5前端资料集合都在这了,赶快收藏吧.最后记得给我小心心哟!</p></blockquote><p>欢迎关注作者<a href="http://www.darryrzhong.xyz" target="_blank" rel="noopener">darryrzhong</a>,更多干货等你来拿哟.</p><h3 id="请赏个小红心！因为你的鼓励是我写作的最大动力！"><a href="#请赏个小红心！因为你的鼓励是我写作的最大动力！" class="headerlink" title="请赏个小红心！因为你的鼓励是我写作的最大动力！"></a>请赏个小红心！因为你的鼓励是我写作的最大动力！</h3><blockquote><p>更多精彩文章请关注</p><ul><li><a href="http://www.darryrzhong.xyz" target="_blank" rel="noopener">个人博客:darryrzhong</a></li><li><a href="https://juejin.im/user/5a6c3b19f265da3e49804988" target="_blank" rel="noopener">掘金</a></li><li><a href="https://www.jianshu.com/users/b7fdf53ec0b9/timeline" target="_blank" rel="noopener">简书</a></li><li><a href="https://segmentfault.com/u/darryrzhong_5ac59892a5882/articles" target="_blank" rel="noopener">SegmentFault</a></li><li><a href="https://www.imooc.com/u/6733207" target="_blank" rel="noopener">慕课网手记</a></li></ul></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;有好久没有写博客了,主要这段时间都沉迷学习无法自拔了,哈哈.自吹一波.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;前两天不是1024节吗,所以就有很多福利出现了,当然每个人能都获得的信息都有所不同,这就是所谓的信息差.秉着好东西需要分享和开源的好习惯,所以来给你们送福利了.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;其他福利&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;一、&lt;a href=&quot;https://www.imooc.com/article/256997&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;1024程序员节最新福利之2018最全java资料集合&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;二、&lt;a href=&quot;https://www.imooc.com/article/257000&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;1024程序员节最新福利之2018最全大数据资料集合&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;三、&lt;a href=&quot;https://www.imooc.com/article/256999&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;1024程序员节最新福利之2018最全Android资料集合&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;2018最全H5前端资料集合&quot;&gt;&lt;a href=&quot;#2018最全H5前端资料集合&quot; class=&quot;headerlink&quot; title=&quot;2018最全H5前端资料集合&quot;&gt;&lt;/a&gt;2018最全H5前端资料集合&lt;/h1&gt;&lt;p&gt;一、HTML &amp;amp; CSS 核心教程：（103集实战教学，从入门到精通）&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://pan.baidu.com/s/1pLwKZN1&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://pan.baidu.com/s/1pLwKZN1&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="编程资料" scheme="http://darryrzhong.xyz/categories/%E7%BC%96%E7%A8%8B%E8%B5%84%E6%96%99/"/>
    
    
      <category term="H5学习" scheme="http://darryrzhong.xyz/tags/H5%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>史上最全2018最新前端学习资料</title>
    <link href="http://darryrzhong.xyz/2019/03/27/%E5%8F%B2%E4%B8%8A%E6%9C%80%E5%85%A82018%E6%9C%80%E6%96%B0%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0%E8%B5%84%E6%96%99/"/>
    <id>http://darryrzhong.xyz/2019/03/27/史上最全2018最新前端学习资料/</id>
    <published>2019-03-27T03:13:49.000Z</published>
    <updated>2019-03-27T03:14:47.887Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>你想要的干货，都在这里哟！</p><blockquote><p>史上最全2018最新前端学习资料</p></blockquote></blockquote><h1 id="写在最前的话"><a href="#写在最前的话" class="headerlink" title="写在最前的话"></a>写在最前的话</h1><p>本博文所列全部前端学习资料均整理自网络开放资源,由于某种原因资源链接在此暂不给出,建议先行浏览目录,若所整理的资料符合你的需求,请前往个人站点<a href="http://darryrzhong.site/" target="_blank" rel="noopener">darryrzhong</a>送给你的<code>福利</code>获取你所需的学习资源!</p><blockquote><p>旨在分享优质干货、让我们携手共同进步吧!</p></blockquote><p><img src="https://upload-images.jianshu.io/upload_images/5549640-5d71d6eeff2b51f7.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="web前端.jpg"></p><h1 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h1><hr><ul><li>前端学习之PS基础</li><li>HTML5+CSS3从入门到精通</li><li>JavaScript视频教程</li><li>jQuery视频教程</li><li>前端开发常用的库—Bootstrap</li><li>Vue.js</li><li>Smarty模板引擎视频教程</li><li>NodeJS</li><li>Mysql视频教程</li><li>PHP视频教程</li><li>oracle视频教程</li><li>nginx视频教程</li><li>ajax</li><li>mongodb视频教程</li><li>Angularjs系列视频</li><li>React</li><li>dedeCMS织梦视频</li><li>ThinkPHP视频教程</li><li>案例和总结</li><li>天猫商城购物车实战</li><li>java学科</li><li>Python</li><li>node.js微信开发</li><li>提升自己的10个PDF文档</li></ul><a id="more"></a><blockquote><p>后续有时间会继续分享整理好的各类学习资源,当然所有资源均是建立在个人兴趣爱好上的,期待志同道合的你与我一同学习、进步.</p></blockquote><blockquote><p>更多优质干货分享,请持续关注<a href="http://darryrzhong.xyz/">darryrzhong</a>!</p></blockquote><h3 id="请赏个小红心！因为你的鼓励是我写作的最大动力！"><a href="#请赏个小红心！因为你的鼓励是我写作的最大动力！" class="headerlink" title="请赏个小红心！因为你的鼓励是我写作的最大动力！"></a>请赏个小红心！因为你的鼓励是我写作的最大动力！</h3><blockquote><p>更多精彩文章请关注</p><ul><li><a href="http://www.darryrzhong.xyz" target="_blank" rel="noopener">个人博客:darryrzhong</a></li><li><a href="https://juejin.im/user/5a6c3b19f265da3e49804988" target="_blank" rel="noopener">掘金</a></li><li><a href="https://www.jianshu.com/users/b7fdf53ec0b9/timeline" target="_blank" rel="noopener">简书</a></li><li><a href="https://segmentfault.com/u/darryrzhong_5ac59892a5882" target="_blank" rel="noopener">SegmentFault</a></li><li><a href="https://www.imooc.com/u/6733207" target="_blank" rel="noopener">慕课网手记</a></li></ul></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;你想要的干货，都在这里哟！&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;史上最全2018最新前端学习资料&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;写在最前的话&quot;&gt;&lt;a href=&quot;#写在最前的话&quot; class=&quot;headerlink&quot; title=&quot;写在最前的话&quot;&gt;&lt;/a&gt;写在最前的话&lt;/h1&gt;&lt;p&gt;本博文所列全部前端学习资料均整理自网络开放资源,由于某种原因资源链接在此暂不给出,建议先行浏览目录,若所整理的资料符合你的需求,请前往个人站点&lt;a href=&quot;http://darryrzhong.site/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;darryrzhong&lt;/a&gt;送给你的&lt;code&gt;福利&lt;/code&gt;获取你所需的学习资源!&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;旨在分享优质干货、让我们携手共同进步吧!&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/5549640-5d71d6eeff2b51f7.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;web前端.jpg&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;目录&quot;&gt;&lt;a href=&quot;#目录&quot; class=&quot;headerlink&quot; title=&quot;目录&quot;&gt;&lt;/a&gt;目录&lt;/h1&gt;&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;前端学习之PS基础&lt;/li&gt;
&lt;li&gt;HTML5+CSS3从入门到精通&lt;/li&gt;
&lt;li&gt;JavaScript视频教程&lt;/li&gt;
&lt;li&gt;jQuery视频教程&lt;/li&gt;
&lt;li&gt;前端开发常用的库—Bootstrap&lt;/li&gt;
&lt;li&gt;Vue.js&lt;/li&gt;
&lt;li&gt;Smarty模板引擎视频教程&lt;/li&gt;
&lt;li&gt;NodeJS&lt;/li&gt;
&lt;li&gt;Mysql视频教程&lt;/li&gt;
&lt;li&gt;PHP视频教程&lt;/li&gt;
&lt;li&gt;oracle视频教程&lt;/li&gt;
&lt;li&gt;nginx视频教程&lt;/li&gt;
&lt;li&gt;ajax&lt;/li&gt;
&lt;li&gt;mongodb视频教程&lt;/li&gt;
&lt;li&gt;Angularjs系列视频&lt;/li&gt;
&lt;li&gt;React&lt;/li&gt;
&lt;li&gt;dedeCMS织梦视频&lt;/li&gt;
&lt;li&gt;ThinkPHP视频教程&lt;/li&gt;
&lt;li&gt;案例和总结&lt;/li&gt;
&lt;li&gt;天猫商城购物车实战&lt;/li&gt;
&lt;li&gt;java学科&lt;/li&gt;
&lt;li&gt;Python&lt;/li&gt;
&lt;li&gt;node.js微信开发&lt;/li&gt;
&lt;li&gt;提升自己的10个PDF文档&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="编程资料" scheme="http://darryrzhong.xyz/categories/%E7%BC%96%E7%A8%8B%E8%B5%84%E6%96%99/"/>
    
    
      <category term="前端学习" scheme="http://darryrzhong.xyz/tags/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>史上最全计算机类编程资料大集合</title>
    <link href="http://darryrzhong.xyz/2019/03/27/%E5%8F%B2%E4%B8%8A%E6%9C%80%E5%85%A8%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B1%BB%E7%BC%96%E7%A8%8B%E8%B5%84%E6%96%99%E5%A4%A7%E9%9B%86%E5%90%88/"/>
    <id>http://darryrzhong.xyz/2019/03/27/史上最全计算机类编程资料大集合/</id>
    <published>2019-03-27T03:11:04.000Z</published>
    <updated>2019-03-27T03:12:08.998Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>你想要的干货，都在这里哟！</p><blockquote><p>免费的计算机编程类中文书籍</p></blockquote></blockquote><p>###<code>摘自:github上由justjavac整理的free-programming-books-zh_CN(免费的计算机编程类中文书籍)觉得不错的可以去star和fork一下哟!</code></p><h1 id="写在最前面的话"><a href="#写在最前面的话" class="headerlink" title="写在最前面的话"></a>写在最前面的话</h1><p>首先声明,本篇博文并非本人原创,而是摘自github上大神<code>justjavac</code>发起并整理的<code>free-programming-books-zh_CN</code>(免费的计算机编程类中文书籍)开源项目,旨在帮助不经常逛github的童鞋发掘优质的学习干货,节省学习时间成本.最后再次感谢<code>justjavac</code>的整理与分享.</p><h1 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h1><hr><ul><li>语言无关类<ul><li>操作系统</li><li>智能系统</li><li>分布式系统</li><li>编译原理</li><li>函数式概念</li><li>计算机图形学</li><li>WEB服务器</li><li>版本控制</li><li>编辑器</li><li>NoSQL</li><li>PostgreSQL</li><li>MySQL</li><li>管理和监控</li><li>项目相关</li><li>设计模式</li><li>Web</li><li>大数据</li><li>编程艺术</li><li>其他</li></ul></li><li><p>语言相关类</p><ul><li>Android</li><li>App</li><li>AWK</li><li>C/C++</li><li>C#</li><li>Clojure</li><li>CSS/HTML</li><li>Dart</li><li>Elixir</li><li>Erlang</li><li>Fortran</li><li>Go</li><li>Groovy</li><li>Haskell</li><li>IOS</li><li>Java</li><li>JavaScript<ul><li>LaTeX</li><li>LISP</li><li>Lua</li><li>OCaml</li><li>Perl</li><li>PHP</li><li>Prolog</li><li>Python</li><li>R</li><li>Ruby</li><li>Rust</li><li>Scala</li><li>Shell</li><li>Swift</li></ul></li><li>读书笔记及其他</li><li>测试相关</li></ul><a id="more"></a></li></ul><h1 id="语言无关类"><a href="#语言无关类" class="headerlink" title="语言无关类"></a>语言无关类</h1><hr><h4 id="操作系统"><a href="#操作系统" class="headerlink" title="操作系统"></a>操作系统</h4><ul><li><a href="http://i.linuxtoy.org/docs/guide/index.html" target="_blank" rel="noopener">开源世界旅行手册</a></li><li><a href="http://vbird.dic.ksu.edu.tw/" target="_blank" rel="noopener">鸟哥的Linux私房菜</a></li><li><a href="http://billie66.github.io/TLCL/index.html" target="_blank" rel="noopener">The Linux Command Line</a> (中英文版)</li><li><a href="http://oss.org.cn/kernel-book/ldd3/index.html" target="_blank" rel="noopener">Linux 设备驱动</a> (第三版)</li><li><a href="http://www.kerneltravel.net/kernel-book/%E6%B7%B1%E5%85%A5%E5%88%86%E6%9E%90Linux%E5%86%85%E6%A0%B8%E6%BA%90%E7%A0%81.html" target="_blank" rel="noopener">深入分析Linux内核源码</a></li><li><a href="http://cb.vu/unixtoolbox_zh_CN.xhtml" target="_blank" rel="noopener">UNIX TOOLBOX</a></li><li><a href="https://github.com/widuu/chinese_docker" target="_blank" rel="noopener">Docker中文指南</a></li><li><a href="https://github.com/yeasy/docker_practice" target="_blank" rel="noopener">Docker —— 从入门到实践</a></li><li><a href="http://yuedu.baidu.com/ebook/d817967416fc700abb68fca1" target="_blank" rel="noopener">Docker入门实战</a></li><li><a href="https://github.com/wsargent/docker-cheat-sheet/tree/master/zh-cn#docker-cheat-sheet" target="_blank" rel="noopener">Docker Cheat Sheet</a></li><li><a href="http://freeradius.akagi201.org/" target="_blank" rel="noopener">FreeRADIUS新手入门</a></li><li><a href="https://aaaaaashu.gitbooks.io/mac-dev-setup/content/" target="_blank" rel="noopener">Mac 开发配置手册</a></li><li><a href="https://www.freebsd.org/doc/zh_CN/books/handbook/index.html" target="_blank" rel="noopener">FreeBSD 使用手册</a></li><li><a href="http://billie66.github.io/TLCL/book/" target="_blank" rel="noopener">Linux 命令行(中文版)</a></li><li><a href="http://works.jinbuguo.com/lfs/lfs62/index.html" target="_blank" rel="noopener">Linux 构建指南</a></li><li><a href="https://github.com/me115/linuxtools_rst" target="_blank" rel="noopener">Linux工具快速教程</a></li><li><a href="https://www.gitbook.com/book/tinylab/linux-doc/details" target="_blank" rel="noopener">Linux Documentation (中文版)</a></li><li><a href="https://www.gitbook.com/book/tinylab/elinux/details" target="_blank" rel="noopener">嵌入式 Linux 知识库 (eLinux.org 中文版)</a></li><li><a href="https://github.com/tobegit3hub/understand_linux_process" target="_blank" rel="noopener">理解Linux进程</a></li><li><a href="https://github.com/jlevy/the-art-of-command-line/blob/master/README-zh.md" target="_blank" rel="noopener">命令行的艺术</a></li><li><a href="https://spacewander.gitbooks.io/systemtapbeginnersguide_zh/content/index.html" target="_blank" rel="noopener">SystemTap新手指南</a></li><li><a href="https://github.com/wizardforcel/think-os-zh" target="_blank" rel="noopener">操作系统思考</a><h4 id="智能系统"><a href="#智能系统" class="headerlink" title="智能系统"></a>智能系统</h4></li><li><a href="https://github.com/phodal/designiot" target="_blank" rel="noopener">一步步搭建物联网系统</a><h4 id="分布式系统"><a href="#分布式系统" class="headerlink" title="分布式系统"></a>分布式系统</h4></li><li><a href="http://dcaoyuan.github.io/papers/pdfs/Scalability.pdf" target="_blank" rel="noopener">走向分布式</a><h4 id="编译原理"><a href="#编译原理" class="headerlink" title="编译原理"></a>编译原理</h4></li><li><a href="https://github.com/DeathKing/Learning-SICP" target="_blank" rel="noopener">《计算机程序的结构和解释》公开课 翻译项目</a><h4 id="函数式概念"><a href="#函数式概念" class="headerlink" title="函数式概念"></a>函数式概念</h4></li><li><a href="https://github.com/justinyhuang/Functional-Programming-For-The-Rest-of-Us-Cn" target="_blank" rel="noopener">傻瓜函数编程</a><h4 id="计算机图形学"><a href="#计算机图形学" class="headerlink" title="计算机图形学"></a>计算机图形学</h4></li><li><a href="https://github.com/zilongshanren/opengl-tutorials" target="_blank" rel="noopener">OpenGL 教程</a></li><li><a href="http://html5.iii.org.tw/course/webgl/" target="_blank" rel="noopener">WebGL自学网</a><br>###WEB服务器</li><li><a href="http://tengine.taobao.org/book/index.html" target="_blank" rel="noopener">Nginx开发从入门到精通</a> (淘宝团队出品)</li><li><a href="http://www.ttlsa.com/nginx/nginx-stu-pdf/" target="_blank" rel="noopener">Nginx教程从入门到精通</a>(PDF版本，运维生存时间出品)</li><li><a href="https://www.gitbook.com/book/moonbingbing/openresty-best-practices/details" target="_blank" rel="noopener">OpenResty最佳实践</a></li><li><a href="http://works.jinbuguo.com/apache/menu22/index.html" target="_blank" rel="noopener">Apache 中文手册</a><h4 id="版本控制"><a href="#版本控制" class="headerlink" title="版本控制"></a>版本控制</h4></li><li><a href="http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000" target="_blank" rel="noopener">Git教程</a> （本文由 <a href="http://www.liaoxuefeng.com/" target="_blank" rel="noopener">廖雪峰</a> 创作，如果觉得本教程对您有帮助，可以去 <a href="https://itunes.apple.com/cn/app/git-jiao-cheng/id876420437" target="_blank" rel="noopener">iTunes</a> 购买）</li><li><a href="http://rogerdudler.github.io/git-guide/index.zh.html" target="_blank" rel="noopener">git - 简易指南</a></li><li><a href="http://backlogtool.com/git-guide/cn/" target="_blank" rel="noopener">猴子都能懂的GIT入门</a></li><li><a href="http://gitref.justjavac.com/" target="_blank" rel="noopener">Git 参考手册</a></li><li><a href="http://git-scm.com/book/zh/v2" target="_blank" rel="noopener">Pro Git</a></li><li><a href="https://www.gitbook.com/book/0532/progit/details" target="_blank" rel="noopener">Pro Git 中文版</a> (整理在gitbook上)</li><li><a href="http://www-cs-students.stanford.edu/~blynn/gitmagic/intl/zh_cn/" target="_blank" rel="noopener">Git Magic</a></li><li><a href="http://www.worldhello.net/gotgithub/index.html" target="_blank" rel="noopener">GotGitHub</a></li><li><a href="http://www.worldhello.net/gotgit/" target="_blank" rel="noopener">Git权威指南</a></li><li><a href="http://gitbook.liuhui998.com/index.html" target="_blank" rel="noopener">Git Community Book 中文版</a></li><li><a href="https://www.mercurial-scm.org/wiki/ChineseTutorial" target="_blank" rel="noopener">Mercurial 使用教程</a></li><li><a href="http://bucunzai.net/hginit/" target="_blank" rel="noopener">HgInit (中文版)</a></li><li><a href="http://igit.linuxtoy.org/" target="_blank" rel="noopener">沉浸式学 Git</a></li><li><a href="https://github.com/flyhigher139/Git-Cheat-Sheet" target="_blank" rel="noopener">Git-Cheat-Sheet</a> （感谢 @flyhigher139 翻译了中文版）</li><li><a href="https://snowdream86.gitbooks.io/github-cheat-sheet/content/zh/index.html" target="_blank" rel="noopener">GitHub秘籍</a></li><li><a href="https://github.com/waylau/github-help" target="_blank" rel="noopener">GitHub帮助文档</a></li><li><a href="http://danielkummer.github.io/git-flow-cheatsheet/index.zh_CN.html" target="_blank" rel="noopener">git-flow 备忘清单</a></li><li><a href="http://svnbook.red-bean.com/nightly/zh/index.html" target="_blank" rel="noopener">svn 手册</a></li><li><a href="https://github.com/phodal/github-roam" target="_blank" rel="noopener">GitHub漫游指南</a><h4 id="编辑器"><a href="#编辑器" class="headerlink" title="编辑器"></a>编辑器</h4></li><li><a href="http://exvim.github.io/docs-zh/intro/" target="_blank" rel="noopener">exvim–vim 改良成IDE项目</a></li><li><a href="http://learnvimscriptthehardway.onefloweroneworld.com/" target="_blank" rel="noopener">笨方法学Vimscript 中译本</a></li><li><a href="https://github.com/vimcn/vimcdoc" target="_blank" rel="noopener">Vim中文文档</a></li><li><a href="https://github.com/yangyangwithgnu/use_vim_as_ide" target="_blank" rel="noopener">所需即所获：像 IDE 一样使用 vim</a></li><li><a href="https://github.com/dofy/learn-vim" target="_blank" rel="noopener">vim 实操教程</a></li><li><a href="https://github.com/wizardforcel/atom-flight-manual-zh-cn" target="_blank" rel="noopener">Atom飞行手册中文版</a></li><li><a href="https://github.com/wizardforcel/markdown-simple-world" target="_blank" rel="noopener">Markdown·简单的世界</a></li><li><a href="https://github.com/redguardtoo/mastering-emacs-in-one-year-guide/blob/master/guide-zh.org" target="_blank" rel="noopener">一年成为 Emacs 高手</a></li><li><a href="http://lifegoo.pluskid.org/upload/blog/152/Survive.in.Emacs.pdf" target="_blank" rel="noopener">Emacs 生存指南</a></li><li><a href="https://atom-china.org/t/atom/62" target="_blank" rel="noopener">Atom官方手册</a><h4 id="NoSQL"><a href="#NoSQL" class="headerlink" title="NoSQL"></a>NoSQL</h4></li><li><a href="http://old.sebug.net/paper/databases/nosql/Nosql.html" target="_blank" rel="noopener">NoSQL数据库笔谈</a></li><li><a href="http://redisbook.com/" target="_blank" rel="noopener">Redis 设计与实现</a></li><li><a href="http://redisdoc.com/" target="_blank" rel="noopener">Redis 命令参考</a></li><li><a href="https://github.com/huangz1990/redis-3.0-annotated" target="_blank" rel="noopener">带有详细注释的 Redis 3.0 代码</a></li><li><a href="https://github.com/huangz1990/annotated_redis_source" target="_blank" rel="noopener">带有详细注释的 Redis 2.6 代码</a></li><li><a href="https://github.com/justinyhuang/the-little-mongodb-book-cn/blob/master/mongodb.md" target="_blank" rel="noopener">The Little MongoDB Book</a></li><li><a href="https://github.com/JasonLai256/the-little-redis-book/blob/master/cn/redis.md" target="_blank" rel="noopener">The Little Redis Book</a></li><li><a href="http://docs.neo4j.org.cn/" target="_blank" rel="noopener">Neo4j 简体中文手册 v1.8</a></li><li><a href="http://neo4j.tw/" target="_blank" rel="noopener">Neo4j .rb 中文資源</a></li><li><a href="http://disquebook.com/" target="_blank" rel="noopener">Disque 使用教程</a></li><li><a href="https://github.com/JerryLead/SparkInternals/tree/master/markdown" target="_blank" rel="noopener">Apache Spark 设计与实现</a><h4 id="PostgreSQL"><a href="#PostgreSQL" class="headerlink" title="PostgreSQL"></a>PostgreSQL</h4></li><li><a href="http://works.jinbuguo.com/postgresql/menu823/index.html" target="_blank" rel="noopener">PostgreSQL 8.2.3 中文文档</a></li><li><a href="http://www.postgres.cn/docs/9.3/index.html" target="_blank" rel="noopener">PostgreSQL 9.3.1 中文文档</a></li><li><a href="http://www.postgres.cn/docs/9.5/index.html" target="_blank" rel="noopener">PostgreSQL 9.5.3 中文文档</a><h4 id="MySQL"><a href="#MySQL" class="headerlink" title="MySQL"></a>MySQL</h4></li><li><a href="http://blog.codinglabs.org/articles/theory-of-mysql-index.html" target="_blank" rel="noopener">MySQL索引背后的数据结构及算法原理</a></li><li><a href="http://www.cnblogs.com/mr-wid/archive/2013/05/09/3068229.html" target="_blank" rel="noopener">21分钟MySQL入门教程</a><h4 id="管理和监控"><a href="#管理和监控" class="headerlink" title="管理和监控"></a>管理和监控</h4></li><li><a href="http://kibana.logstash.es/" target="_blank" rel="noopener">ELKstack 中文指南</a></li><li><a href="http://udn.yyuap.com/doc/mastering-elasticsearch/" target="_blank" rel="noopener">Mastering Elasticsearch(中文版)</a></li><li><a href="https://www.gitbook.com/book/fuxiaopang/learnelasticsearch/details" target="_blank" rel="noopener">ElasticSearch 权威指南</a></li><li><a href="http://es.xiaoleilu.com/" target="_blank" rel="noopener">Elasticsearch 权威指南（中文版）</a></li><li><a href="https://github.com/chenryn/logstash-best-practice-cn" target="_blank" rel="noopener">Logstash 最佳实践</a></li><li><a href="http://bbs.konotes.org/workdoc/puppet-27/" target="_blank" rel="noopener">Puppet 2.7 Cookbook 中文版</a></li></ul><h3 id><a href="#" class="headerlink" title></a><a href="https://github.com/justjavac/free-programming-books-zh_CN#%E9%A1%B9%E7%9B%AE%E7%9B%B8%E5%85%B3" target="_blank" rel="noopener"></a></h3><h4 id="项目相关"><a href="#项目相关" class="headerlink" title="项目相关"></a>项目相关</h4><ul><li><a href="http://article.yeeyan.org/view/2251/94882" target="_blank" rel="noopener">持续集成（第二版）</a> (译言网)</li><li><a href="http://www.ibm.com/developerworks/cn/java/j-ap/" target="_blank" rel="noopener">让开发自动化系列专栏</a></li><li><a href="http://www.ibm.com/developerworks/cn/java/j-cq/" target="_blank" rel="noopener">追求代码质量</a></li><li><a href="https://github.com/fool2fish/selenium-doc" target="_blank" rel="noopener">selenium 中文文档</a></li><li><a href="http://it-ebooks.flygon.net/selenium-simple-tutorial/" target="_blank" rel="noopener">Selenium Webdriver 简易教程</a></li><li><a href="http://local.joelonsoftware.com/wiki/Chinese_(Simplified" target="_blank" rel="noopener">Joel谈软件</a>)</li><li><a href="http://local.joelonsoftware.com/wiki/%E9%A6%96%E9%A0%81" target="_blank" rel="noopener">約耳談軟體(Joel on Software)</a></li><li><a href="https://github.com/waylau/Gradle-2-User-Guide" target="_blank" rel="noopener">Gradle 2 用户指南</a></li><li><a href="http://yuedu.baidu.com/ebook/f23af265998fcc22bcd10da2" target="_blank" rel="noopener">Gradle 中文使用文档</a></li><li><a href="https://github.com/ecomfe/spec" target="_blank" rel="noopener">编码规范</a></li><li><a href="http://www.ituring.com.cn/book/1143" target="_blank" rel="noopener">开源软件架构</a></li><li><a href="http://docs.huihoo.com/gnu/linux/gmake.html" target="_blank" rel="noopener">GNU make 指南</a></li><li><a href="http://www.yayu.org/book/gnu_make/" target="_blank" rel="noopener">GNU make 中文手册</a></li><li><a href="http://12factor.net/zh_cn/" target="_blank" rel="noopener">The Twelve-Factor App</a><h4 id="设计模式"><a href="#设计模式" class="headerlink" title="设计模式"></a>设计模式</h4></li><li><a href="https://github.com/me115/design_patterns" target="_blank" rel="noopener">图说设计模式</a></li><li><a href="http://blog.csdn.net/lovelion/article/details/17517213" target="_blank" rel="noopener">史上最全设计模式导学目录</a></li><li><a href="https://github.com/AlfredTheBest/Design-Pattern" target="_blank" rel="noopener">design pattern 包教不包会</a></li><li><a href="https://quanke.gitbooks.io/design-pattern-java/content/" target="_blank" rel="noopener">设计模式 Java 版</a></li></ul><h3 id="-1"><a href="#-1" class="headerlink" title></a><a href="https://github.com/justjavac/free-programming-books-zh_CN#web" target="_blank" rel="noopener"></a></h3><h4 id="Web"><a href="#Web" class="headerlink" title="Web"></a>Web</h4><ul><li><a href="http://www.20thingsilearned.com/zh-CN/home" target="_blank" rel="noopener">关于浏览器和网络的 20 项须知</a></li><li><a href="http://jinlong.github.io/2013/08/29/devtoolsecrets/" target="_blank" rel="noopener">浏览器开发工具的秘密</a></li><li><a href="https://github.com/CN-Chrome-DevTools/CN-Chrome-DevTools" target="_blank" rel="noopener">Chrome 开发者工具中文手册</a></li><li><a href="http://open.chrome.360.cn/extension_dev/overview.html" target="_blank" rel="noopener">Chrome扩展开发文档</a></li><li><a href="http://www.gruntjs.net/" target="_blank" rel="noopener">Grunt中文文档</a></li><li><a href="http://www.gulpjs.com.cn/docs/" target="_blank" rel="noopener">gulp中文文档</a></li><li><a href="https://github.com/nimojs/gulp-book" target="_blank" rel="noopener">Gulp 入门指南</a></li><li><a href="https://github.com/AlloyTeam/Mars" target="_blank" rel="noopener">移动Web前端知识库</a></li><li><a href="http://deerchao.net/tutorials/regex/regex.htm" target="_blank" rel="noopener">正则表达式30分钟入门教程</a></li><li><a href="https://github.com/fouber/blog/issues/2" target="_blank" rel="noopener">前端开发体系建设日记</a></li><li><a href="https://github.com/hoosin/mobile-web-favorites" target="_blank" rel="noopener">移动前端开发收藏夹</a></li><li><a href="https://github.com/darcyliu/google-styleguide/blob/master/JSONStyleGuide.md" target="_blank" rel="noopener">JSON风格指南</a></li><li><a href="https://github.com/bolasblack/http-api-guide" target="_blank" rel="noopener">HTTP 接口设计指北</a></li><li><a href="https://github.com/hacke2/hacke2.github.io/issues/1" target="_blank" rel="noopener">前端资源分享（一）</a></li><li><a href="https://github.com/hacke2/hacke2.github.io/issues/3" target="_blank" rel="noopener">前端资源分享（二）</a></li><li><a href="http://coderlmn.github.io/code-standards/" target="_blank" rel="noopener">前端代码规范 及 最佳实践</a></li><li><a href="https://www.gitbook.com/book/dwqs/frontenddevhandbook/details" target="_blank" rel="noopener">前端开发者手册</a></li><li><a href="https://www.gitbook.com/book/leohxj/front-end-database/details" target="_blank" rel="noopener">前端工程师手册</a></li><li><a href="https://github.com/wizardforcel/w3school" target="_blank" rel="noopener">w3school教程整理</a></li><li><a href="http://man.lupaworld.com/content/network/wireshark/index.html" target="_blank" rel="noopener">Wireshark用户手册</a></li><li><a href="https://community.emc.com/thread/194901" target="_blank" rel="noopener">一站式学习Wireshark</a></li><li><a href="https://ccbikai.gitbooks.io/http-book/content/" target="_blank" rel="noopener">HTTP 下午茶</a></li><li><a href="http://yuedu.baidu.com/ebook/478d1a62376baf1ffc4fad99?pn=1" target="_blank" rel="noopener">HTTP/2.0 中文翻译</a></li><li><a href="https://github.com/abbshr/rfc7540-translation-zh_cn" target="_blank" rel="noopener">RFC 7540 - HTTP/2 中文翻译版</a></li><li><a href="https://www.gitbook.com/book/ye11ow/http2-explained/details" target="_blank" rel="noopener">http2讲解</a></li><li><a href="https://www.gitbook.com/book/juntao/3-web-designs-in-3-weeks/details" target="_blank" rel="noopener">3 Web Designs in 3 Weeks</a></li><li><a href="https://github.com/hellorocky/Site-Reliability-Engineering" target="_blank" rel="noopener">站点可靠性工程</a><h4 id="大数据"><a href="#大数据" class="headerlink" title="大数据"></a>大数据</h4></li><li><a href="https://github.com/Flowerowl/Big-Data-Resources" target="_blank" rel="noopener">大数据/数据挖掘/推荐系统/机器学习相关资源</a></li><li><a href="https://github.com/egrcc/guidetodatamining" target="_blank" rel="noopener">面向程序员的数据挖掘指南</a></li><li><a href="https://code.csdn.net/CODE_Translation/spark_matei_phd" target="_blank" rel="noopener">大型集群上的快速和通用数据处理架构</a></li><li><a href="https://github.com/linyiqun/DataMiningAlgorithm" target="_blank" rel="noopener">数据挖掘中经典的算法实现和详细的注释</a></li><li><a href="https://aiyanbo.gitbooks.io/spark-programming-guide-zh-cn/content/" target="_blank" rel="noopener">Spark 编程指南简体中文版</a><h4 id="编程艺术"><a href="#编程艺术" class="headerlink" title="编程艺术"></a>编程艺术</h4></li><li><a href="https://github.com/julycoding/The-Art-Of-Programming-by-July" target="_blank" rel="noopener">程序员编程艺术</a></li><li><a href="http://www.oschina.net/translate/what-every-programmer-should-know-about-memory-part1?print" target="_blank" rel="noopener">每个程序员都应该了解的内存知识(译)</a>【第一部分】</li><li><a href="http://read.douban.com/ebook/4972883/" target="_blank" rel="noopener">取悦的工序：如何理解游戏</a> (豆瓣阅读，免费书籍)<h4 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h4></li><li><a href="https://www.gitbook.com/book/softwaredownload/openwrt-fanqiang/details" target="_blank" rel="noopener">OpenWrt智能、自动、透明翻墙路由器教程</a></li><li><a href="https://community.emc.com/docs/DOC-16067" target="_blank" rel="noopener">SAN 管理入门系列</a></li><li><a href="http://sketchcn.com/sketch-chinese-user-manual.html#introduce" target="_blank" rel="noopener">Sketch 中文手册</a></li><li><a href="http://ifeve.com/perfbook/" target="_blank" rel="noopener">深入理解并行编程</a></li><li><a href="http://www.kancloud.cn/kancloud/a-programmer-prepares" target="_blank" rel="noopener">程序员的自我修养</a></li><li><a href="https://github.com/phodal/growth-ebook" target="_blank" rel="noopener">Growth: 全栈增长工程师指南</a></li></ul><h1 id="语言无关类-1"><a href="#语言无关类-1" class="headerlink" title="语言无关类"></a>语言无关类</h1><hr><h4 id="Android"><a href="#Android" class="headerlink" title="Android"></a>Android</h4><ul><li><a href="http://www.apkbus.com/design/index.html" target="_blank" rel="noopener">Android Design(中文版)</a></li><li>Google Material Design 正體中文版 (<a href="https://wcc723.gitbooks.io/google_design_translate/content/style-icons.html" target="_blank" rel="noopener">译本一</a> <a href="https://github.com/1sters/material_design_zh" target="_blank" rel="noopener">译本二</a>)</li><li><a href="http://wiki.jikexueyuan.com/project/material-design/" target="_blank" rel="noopener">Material Design 中文版</a></li><li><a href="http://hukai.me/android-training-course-in-chinese/index.html" target="_blank" rel="noopener">Google Android官方培训课程中文版</a></li><li><a href="http://www.stormzhang.com/android/2014/07/07/learn-android-from-rookie/" target="_blank" rel="noopener">Android学习之路</a></li><li><a href="https://github.com/bboyfeiyu/android-tech-frontier" target="_blank" rel="noopener">Android开发技术前线(android-tech-frontier)</a></li><li><a href="https://github.com/FX-Max/Point-of-Android" target="_blank" rel="noopener">Point-of-Android</a> Android 一些重要知识点解析整理</li><li><p><a href="http://leanote.com/blog/post/561658f938f41126b2000298?hmsr=toutiao.io&amp;utm_medium=toutiao.io&amp;utm_source=toutiao.io" target="_blank" rel="noopener">Android6.0新特性详解</a></p><h4 id="APP"><a href="#APP" class="headerlink" title="APP"></a>APP</h4></li><li><p><a href="https://github.com/waylau/cordova-dev-guide" target="_blank" rel="noopener">Apache Cordova 开发指南</a></p></li></ul><h3 id="-2"><a href="#-2" class="headerlink" title></a><a href="https://github.com/justjavac/free-programming-books-zh_CN#awk" target="_blank" rel="noopener"></a></h3><h4 id="AWK"><a href="#AWK" class="headerlink" title="AWK"></a>AWK</h4><ul><li><a href="https://github.com/wuzhouhui/awk" target="_blank" rel="noopener">awk程序设计语言</a></li><li><a href="http://awk.readthedocs.org/en/latest/index.html" target="_blank" rel="noopener">awk中文指南</a></li></ul><h3 id="-3"><a href="#-3" class="headerlink" title></a><a href="https://github.com/justjavac/free-programming-books-zh_CN#cc" target="_blank" rel="noopener"></a></h3><h4 id="C-C"><a href="#C-C" class="headerlink" title="C/C++"></a>C/C++</h4><ul><li><a href="http://zh.cppreference.com/" target="_blank" rel="noopener">C/C++ 中文参考手册</a> (欢迎大家参与在线翻译和校对)</li><li><a href="https://www.gitbook.com/book/tinylab/cbook/details" target="_blank" rel="noopener">C 语言编程透视</a></li><li><a href="https://github.com/forhappy/Cplusplus-Concurrency-In-Practice" target="_blank" rel="noopener">C++ 并发编程指南</a></li><li><a href="http://akaedu.github.io/book/" target="_blank" rel="noopener">Linux C编程一站式学习</a> (宋劲杉, 北京亚嵌教育研究中心)</li><li><a href="https://github.com/leeyiw/cgdb-manual-in-chinese" target="_blank" rel="noopener">CGDB中文手册</a></li><li><a href="https://github.com/hellogcc/100-gdb-tips/blob/master/src/index.md" target="_blank" rel="noopener">100个gdb小技巧</a></li><li><a href="https://github.com/hellogcc/100-gcc-tips/blob/master/src/index.md" target="_blank" rel="noopener">100个gcc小技巧</a></li><li><a href="https://github.com/anjuke/zguide-cn" target="_blank" rel="noopener">ZMQ 指南</a></li><li><a href="http://www.ituring.com.cn/book/1203" target="_blank" rel="noopener">How to Think Like a Computer Scientist</a> (中英文版)</li><li><a href="http://scc.qibebt.cas.cn/docs/linux/base/%B8%FA%CE%D2%D2%BB%C6%F0%D0%B4Makefile-%B3%C2%F0%A9.pdf" target="_blank" rel="noopener">跟我一起写Makefile(PDF)</a></li><li><a href="http://www.yayu.org/book/gnu_make/" target="_blank" rel="noopener">GNU make中文手册</a></li><li><a href="http://docs.huihoo.com/gnu/linux/gmake.html" target="_blank" rel="noopener">GNU make 指南</a></li><li><a href="http://zh-google-styleguide.readthedocs.org/en/latest/google-cpp-styleguide/contents/" target="_blank" rel="noopener">Google C++ 风格指南</a></li><li><a href="https://github.com/andycai/cprimer" target="_blank" rel="noopener">C/C++ Primer</a> (by @andycai)</li><li><a href="http://www.nowamagic.net/librarys/books/contents/c" target="_blank" rel="noopener">简单易懂的C魔法</a></li><li><a href="http://sewm.pku.edu.cn/src/paradise/reference/CMake%20Practice.pdf" target="_blank" rel="noopener">Cmake 实践</a> (PDF版)</li><li><a href="http://www.sunistudio.com/cppfaq/" target="_blank" rel="noopener">C++ FAQ LITE(中文版)</a></li><li><a href="https://github.com/Mooophy/Cpp-Primer" target="_blank" rel="noopener">C++ Primer 5th Answers</a></li><li><a href="https://www.gitbook.com/book/chenxiaowei/cpp_concurrency_in_action/details" target="_blank" rel="noopener">C++ 并发编程(基于C++11)</a></li><li><a href="http://www.kuqin.com/qtdocument/tutorial.html" target="_blank" rel="noopener">QT 教程</a></li><li><a href="http://www.devbean.net/category/qt-study-road-2/" target="_blank" rel="noopener">DevBean的《Qt学习之路2》(Qt5)</a></li><li><a href="https://github.com/wuye9036/CppTemplateTutorial" target="_blank" rel="noopener">C++ Template 进阶指南</a></li><li><a href="https://github.com/luohaha/Chinese-uvbook" target="_blank" rel="noopener">libuv中文教程</a></li><li><a href="http://zh.highscore.de/cpp/boost/" target="_blank" rel="noopener">Boost 库中文教程</a></li><li><a href="https://github.com/wizardforcel/lcthw-zh" target="_blank" rel="noopener">笨办法学C</a></li></ul><h3 id="-4"><a href="#-4" class="headerlink" title></a><a href="https://github.com/justjavac/free-programming-books-zh_CN#c" target="_blank" rel="noopener"></a></h3><h4 id="C"><a href="#C" class="headerlink" title="C"></a>C</h4><ul><li><a href="https://msdn.microsoft.com/zh-cn/library/kx37x362.aspx" target="_blank" rel="noopener">MSDN C# 中文文档</a></li><li><a href="https://msdn.microsoft.com/zh-cn/library/gg145045.aspx" target="_blank" rel="noopener">.NET 类库参考</a></li><li><a href="http://www.cnblogs.com/powertoolsteam/p/aspnetmvc5-tutorials-grapecity.html" target="_blank" rel="noopener">ASP.NET MVC 5 入门指南</a></li><li><a href="http://www.cnblogs.com/LonelyShadow/p/4162318.html" target="_blank" rel="noopener">超全面的 .NET GDI+ 图形图像编程教程</a></li><li><a href="https://github.com/JackWangCUMT/customcontrol" target="_blank" rel="noopener">.NET控件开发基础</a></li><li><a href="https://github.com/sherlockchou86/-free-ebook-.NET-" target="_blank" rel="noopener">.NET开发要点精讲（初稿）</a></li></ul><h3 id="-5"><a href="#-5" class="headerlink" title></a><a href="https://github.com/justjavac/free-programming-books-zh_CN#clojure" target="_blank" rel="noopener"></a></h3><h4 id="Clojure"><a href="#Clojure" class="headerlink" title="Clojure"></a>Clojure</h4><ul><li><a href="http://xumingming.sinaapp.com/302/clojure-functional-programming-for-the-jvm-clojure-tutorial/" target="_blank" rel="noopener">Clojure入门教程</a></li></ul><h3 id="-6"><a href="#-6" class="headerlink" title></a><a href="https://github.com/justjavac/free-programming-books-zh_CN#csshtml" target="_blank" rel="noopener"></a></h3><h4 id="CSS-HTML"><a href="#CSS-HTML" class="headerlink" title="CSS/HTML"></a>CSS/HTML</h4><ul><li><a href="http://zh.learnlayout.com/" target="_blank" rel="noopener">学习CSS布局</a></li><li><a href="https://github.com/chadluo/CSS-Guidelines/blob/master/README.md" target="_blank" rel="noopener">通用 CSS 笔记、建议与指导</a></li><li><a href="http://css.doyoe.com/" target="_blank" rel="noopener">CSS参考手册</a></li><li><a href="http://yanxyz.github.io/emmet-docs/" target="_blank" rel="noopener">Emmet 文档</a></li><li><a href="http://alloyteam.github.io/CodeGuide/" target="_blank" rel="noopener">前端代码规范</a> (腾讯 AlloyTeam 团队)</li><li><a href="http://codeguide.bootcss.com/" target="_blank" rel="noopener">HTML和CSS编码规范</a></li><li><a href="http://sass-guidelin.es/zh/" target="_blank" rel="noopener">Sass Guidelines 中文</a></li><li><a href="https://github.com/waylau/css3-tutorial" target="_blank" rel="noopener">CSS3 Tutorial 《CSS3 教程》</a></li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML" target="_blank" rel="noopener">MDN HTML 中文文档</a></li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS" target="_blank" rel="noopener">MDN CSS 中文文档</a></li></ul><h3 id="-7"><a href="#-7" class="headerlink" title></a><a href="https://github.com/justjavac/free-programming-books-zh_CN#dart" target="_blank" rel="noopener"></a></h3><h4 id="Dart"><a href="#Dart" class="headerlink" title="Dart"></a>Dart</h4><ul><li><a href="http://dart.lidian.info/wiki/Language_Tour" target="_blank" rel="noopener">Dart 语言导览</a></li></ul><h3 id="-8"><a href="#-8" class="headerlink" title></a><a href="https://github.com/justjavac/free-programming-books-zh_CN#elixir" target="_blank" rel="noopener"></a></h3><h4 id="Elixir"><a href="#Elixir" class="headerlink" title="Elixir"></a>Elixir</h4><ul><li><a href="https://github.com/straightdave/programming_elixir" target="_blank" rel="noopener">Elixir编程入门</a></li></ul><h3 id="-9"><a href="#-9" class="headerlink" title></a><a href="https://github.com/justjavac/free-programming-books-zh_CN#erlang" target="_blank" rel="noopener"></a></h3><h4 id="Erlang"><a href="#Erlang" class="headerlink" title="Erlang"></a>Erlang</h4><ul><li><a href="http://xn--21erlang-p00o82pmp3o.github.io/" target="_blank" rel="noopener">21天学通Erlang</a></li></ul><h3 id="-10"><a href="#-10" class="headerlink" title></a><a href="https://github.com/justjavac/free-programming-books-zh_CN#fortran" target="_blank" rel="noopener"></a></h3><h4 id="Fortran"><a href="#Fortran" class="headerlink" title="Fortran"></a>Fortran</h4><ul><li><a href="http://micro.ustc.edu.cn/Fortran/ZJDing/" target="_blank" rel="noopener">Fortran77和90/95编程入门</a></li></ul><h3 id="-11"><a href="#-11" class="headerlink" title></a><a href="https://github.com/justjavac/free-programming-books-zh_CN#go" target="_blank" rel="noopener"></a></h3><h4 id="Go"><a href="#Go" class="headerlink" title="Go"></a>Go</h4><ul><li><a href="https://github.com/Unknwon/go-fundamental-programming" target="_blank" rel="noopener">Go编程基础</a></li><li><a href="https://github.com/Unknwon/the-way-to-go_ZH_CN" target="_blank" rel="noopener">Go入门指南</a></li><li><a href="http://mikespook.com/learning-go/" target="_blank" rel="noopener">学习Go语言</a></li><li><a href="https://github.com/astaxie/build-web-application-with-golang" target="_blank" rel="noopener">Go Web 编程</a> (此书已经出版，希望开发者们去购买，支持作者的创作)</li><li><a href="https://github.com/astaxie/Go-in-Action" target="_blank" rel="noopener">Go实战开发</a> (当我收录此项目时，作者已经写完第三章，如果读完前面章节觉得有帮助，可以给作者<a href="https://me.alipay.com/astaxie" target="_blank" rel="noopener">捐赠</a>，以鼓励作者的继续创作)</li><li><a href="https://github.com/astaxie/NPWG_zh" target="_blank" rel="noopener">Network programming with Go 中文翻译版本</a></li><li><a href="http://www.hellogcc.org/effective_go.html" target="_blank" rel="noopener">Effective Go</a></li><li><a href="https://github.com/polaris1119/The-Golang-Standard-Library-by-Example" target="_blank" rel="noopener">Go 语言标准库</a></li><li><a href="http://godoc.ml/" target="_blank" rel="noopener">Golang标准库文档</a></li><li><a href="http://gorevel.cn/docs/manual/index.html" target="_blank" rel="noopener">Revel 框架手册</a></li><li><a href="http://blog.csdn.net/dc_726/article/details/46565241" target="_blank" rel="noopener">Java程序员的Golang入门指南</a></li><li><a href="https://github.com/hyper-carrot/go_command_tutorial" target="_blank" rel="noopener">Go命令教程</a></li><li><a href="https://github.com/achun/Go-Blog-In-Action" target="_blank" rel="noopener">Go语言博客实践</a></li><li><a href="https://github.com/golang-china/golangdoc.translations" target="_blank" rel="noopener">Go 官方文档翻译</a></li><li><a href="https://github.com/tiancaiamao/go-internals" target="_blank" rel="noopener">深入解析Go</a></li><li><a href="https://bitbucket.org/golang-china/gopl-zh/wiki/Home" target="_blank" rel="noopener">Go语言圣经(中文版)</a> (<a href="https://www.gitbook.com/book/wizardforcel/gopl-zh/details" target="_blank" rel="noopener">GitBook</a>)</li></ul><h3 id="-12"><a href="#-12" class="headerlink" title></a><a href="https://github.com/justjavac/free-programming-books-zh_CN#groovy" target="_blank" rel="noopener"></a></h3><h4 id="Groovy"><a href="#Groovy" class="headerlink" title="Groovy"></a>Groovy</h4><ul><li><a href="http://www.ibm.com/developerworks/cn/java/j-pg/" target="_blank" rel="noopener">实战 Groovy 系列</a></li></ul><h3 id="-13"><a href="#-13" class="headerlink" title></a><a href="https://github.com/justjavac/free-programming-books-zh_CN#haskell" target="_blank" rel="noopener"></a></h3><h4 id="Haskell"><a href="#Haskell" class="headerlink" title="Haskell"></a>Haskell</h4><ul><li><a href="http://rwh.readthedocs.org/en/latest/" target="_blank" rel="noopener">Real World Haskell 中文版</a></li><li><a href="http://fleurer-lee.com/lyah/" target="_blank" rel="noopener">Haskell趣学指南</a></li></ul><h3 id="-14"><a href="#-14" class="headerlink" title></a><a href="https://github.com/justjavac/free-programming-books-zh_CN#ios" target="_blank" rel="noopener"></a></h3><h4 id="iOS"><a href="#iOS" class="headerlink" title="iOS"></a>iOS</h4><ul><li><a href="https://github.com/qinjx/30min_guides/blob/master/ios.md" target="_blank" rel="noopener">iOS开发60分钟入门</a></li><li><a href="http://isux.tencent.com/ios-human-interface-guidelines-ui-design-basics-ios7.html" target="_blank" rel="noopener">iOS7人机界面指南</a></li><li><a href="http://zh-google-styleguide.readthedocs.org/en/latest/google-objc-styleguide/" target="_blank" rel="noopener">Google Objective-C Style Guide 中文版</a></li><li><a href="http://wileam.com/iphone-6-screen-cn/" target="_blank" rel="noopener">iPhone 6 屏幕揭秘</a></li><li><a href="http://nilsun.github.io/apple-watch/" target="_blank" rel="noopener">Apple Watch开发初探</a></li><li><a href="https://developer.apple.com/library/ios/referencelibrary/GettingStarted/RoadMapiOSCh/index.html" target="_blank" rel="noopener">马上着手开发 iOS 应用程序</a></li><li><a href="https://github.com/jkyin/Subtitle" target="_blank" rel="noopener">网易斯坦福大学公开课：iOS 7应用开发字幕文件</a></li></ul><h3 id="-15"><a href="#-15" class="headerlink" title></a><a href="https://github.com/justjavac/free-programming-books-zh_CN#java" target="_blank" rel="noopener"></a></h3><h4 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h4><ul><li><a href="https://github.com/waylau/apache-shiro-1.2.x-reference" target="_blank" rel="noopener">Apache Shiro 用户指南</a></li><li><a href="https://github.com/waylau/Jersey-2.x-User-Guide" target="_blank" rel="noopener">Jersey 2.x 用户指南</a></li><li><a href="https://github.com/waylau/spring-framework-4-reference" target="_blank" rel="noopener">Spring Framework 4.x参考文档</a></li><li><a href="https://github.com/qibaoguang/Spring-Boot-Reference-Guide" target="_blank" rel="noopener">Spring Boot参考指南</a> (翻译中)</li><li><a href="http://mybatis.org/mybatis-3/zh/index.html" target="_blank" rel="noopener">MyBatis中文文档</a></li><li><a href="http://mbg.cndocs.tk/" target="_blank" rel="noopener">MyBatis Generator 中文文档</a></li><li><a href="https://github.com/waylau/RestDemo" target="_blank" rel="noopener">用jersey构建REST服务</a></li><li><a href="https://github.com/waylau/activiti-5.x-user-guide" target="_blank" rel="noopener">Activiti 5.x 用户指南</a></li><li><a href="http://www.hawstein.com/posts/google-java-style.html" target="_blank" rel="noopener">Google Java编程风格指南</a></li><li><a href="https://github.com/waylau/netty-4-user-guide" target="_blank" rel="noopener">Netty 4.x 用户指南</a></li><li><a href="https://github.com/waylau/essential-netty-in-action" target="_blank" rel="noopener">Netty 实战(精髓)</a></li><li><a href="https://github.com/waylau/rest-in-action" target="_blank" rel="noopener">REST 实战</a></li><li><a href="https://github.com/waylau/java-code-conventions" target="_blank" rel="noopener">Java 编码规范</a></li><li><a href="https://github.com/waylau/apache-mina-2.x-user-guide" target="_blank" rel="noopener">Apache MINA 2 用户指南</a></li><li><a href="https://github.com/waylau/h2-database-doc" target="_blank" rel="noopener">H2 Database 教程</a></li><li><a href="https://github.com/waylau/servlet-3.1-specification" target="_blank" rel="noopener">Java Servlet 3.1 规范</a></li><li><a href="https://github.com/waylau/jsse-reference-guide" target="_blank" rel="noopener">JSSE 参考指南</a></li><li><a href="https://github.com/biezhi/jb" target="_blank" rel="noopener">Java开源实现及最佳实践</a></li><li><a href="https://github.com/waylau/essential-java" target="_blank" rel="noopener">Java 编程要点</a></li><li><a href="http://www.ituring.com.cn/minibook/69" target="_blank" rel="noopener">Think Java</a></li><li><a href="https://github.com/wizardforcel/modern-java-zh" target="_blank" rel="noopener">Java 8 简明教程</a></li></ul><h3 id="-16"><a href="#-16" class="headerlink" title></a><a href="https://github.com/justjavac/free-programming-books-zh_CN#javascript" target="_blank" rel="noopener"></a></h3><h4 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h4><ul><li><a href="http://bq69.com/blog/articles/script/868/google-javascript-style-guide.html" target="_blank" rel="noopener">Google JavaScript 代码风格指南</a></li><li><a href="https://github.com/darcyliu/google-styleguide/blob/master/JSONStyleGuide.md" target="_blank" rel="noopener">Google JSON 风格指南</a></li><li><a href="https://github.com/adamlu/javascript-style-guide" target="_blank" rel="noopener">Airbnb JavaScript 规范</a></li><li><a href="http://javascript.ruanyifeng.com/" target="_blank" rel="noopener">JavaScript 标准参考教程（alpha）</a></li><li><a href="http://pij.robinqu.me/" target="_blank" rel="noopener">Javascript编程指南</a> (<a href="https://github.com/RobinQu/Programing-In-Javascript" target="_blank" rel="noopener">源码</a>)</li><li><a href="https://github.com/justjavac/12-javascript-quirks" target="_blank" rel="noopener">javascript 的 12 个怪癖</a></li><li><a href="http://bonsaiden.github.io/JavaScript-Garden/zh/" target="_blank" rel="noopener">JavaScript 秘密花园</a></li><li><a href="http://icodeit.org/jsccp/" target="_blank" rel="noopener">JavaScript核心概念及实践</a> (PDF) (此书已由人民邮电出版社出版发行，但作者依然免费提供PDF版本，希望开发者们去购买，支持作者)</li><li><a href="https://github.com/jayli/javascript-patterns" target="_blank" rel="noopener">《JavaScript 模式》</a> “JavaScript patterns”中译本</li><li><a href="http://justjavac.com/named-function-expressions-demystified.html" target="_blank" rel="noopener">命名函数表达式探秘</a> (注:原文由<a href="http://www.cn-cuckoo.com/" target="_blank" rel="noopener">为之漫笔</a>翻译，原始地址无法打开，所以此处地址为我博客上的备份)</li><li><a href="http://www.oschina.net/translate/learning-javascript-design-patterns" target="_blank" rel="noopener">学用 JavaScript 设计模式</a> (开源中国)</li><li><a href="http://www.cnblogs.com/TomXu/archive/2011/12/15/2288411.html" target="_blank" rel="noopener">深入理解JavaScript系列</a></li><li><a href="http://yanhaijing.com/es5" target="_blank" rel="noopener">ECMAScript 5.1 中文版</a></li><li><a href="http://es6.ruanyifeng.com/" target="_blank" rel="noopener">ECMAScript 6 入门</a> (作者：阮一峰)</li><li><a href="http://liubin.github.io/promises-book/" target="_blank" rel="noopener">JavaScript Promise迷你书</a></li><li><a href="https://github.com/getify/You-Dont-Know-JS" target="_blank" rel="noopener">You-Dont-Know-JS</a> (深入JavaScript语言核心机制的系列图书)</li><li><a href="http://www.liaoxuefeng.com/wiki/001434446689867b27157e896e74d51a89c25cc8b43bdb3000" target="_blank" rel="noopener">JavaScript 教程</a> 廖雪峰</li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript" target="_blank" rel="noopener">MDN JavaScript 中文文档</a></li><li>jQuery<ul><li><a href="http://www.cn-cuckoo.com/deconstructed/jquery.html" target="_blank" rel="noopener">jQuery 解构</a></li><li><a href="http://www.nowamagic.net/librarys/books/contents/jquery" target="_blank" rel="noopener">简单易懂的JQuery魔法</a></li><li><a href="http://i5ting.github.io/How-to-write-jQuery-plugin/build/jquery.plugin.html" target="_blank" rel="noopener">How to write jQuery plugin</a></li><li><a href="https://github.com/oneuijs/You-Dont-Need-jQuery/blob/master/README.zh-CN.md" target="_blank" rel="noopener">You Don’t Need jQuery</a></li><li><a href="https://github.com/MeCKodo/forchange" target="_blank" rel="noopener">如何实现一个类jQuery？</a></li></ul></li><li>Node.js<ul><li><a href="http://www.nodebeginner.org/index-zh-cn.html" target="_blank" rel="noopener">Node入门</a></li><li><a href="http://nqdeng.github.io/7-days-nodejs/" target="_blank" rel="noopener">七天学会NodeJS</a></li><li><a href="https://github.com/nodejs-tw/nodejs-wiki-book" target="_blank" rel="noopener">Nodejs Wiki Book</a> (繁体中文)</li><li><a href="http://expressjs.jser.us/" target="_blank" rel="noopener">express.js 中文文档</a></li><li><a href="https://github.com/guo-yu/koa-guide" target="_blank" rel="noopener">koa 中文文档</a></li><li><a href="http://base-n.github.io/koa-generator-examples/" target="_blank" rel="noopener">一起学koa</a></li><li><a href="https://github.com/nswbmw/N-blog" target="_blank" rel="noopener">使用 Express + MongoDB 搭建多人博客</a></li><li><a href="http://javascript.ruanyifeng.com/nodejs/express.html" target="_blank" rel="noopener">Express框架</a></li><li><a href="https://github.com/alsotang/node-lessons" target="_blank" rel="noopener">Node.js 包教不包会</a></li><li><a href="https://www.npmjs.com/package/learnyounode-zh-cn" target="_blank" rel="noopener">Learn You The Node.js For Much Win! (中文版)</a></li><li><a href="http://i5ting.github.io/node-debug-tutorial/" target="_blank" rel="noopener">Node debug 三法三例</a></li><li><a href="https://www.gitbook.com/book/0532/nodejs/details" target="_blank" rel="noopener">nodejs中文文档</a></li><li><a href="https://github.com/wizardforcel/orm2-doc-zh-cn" target="_blank" rel="noopener">orm2 中文文档</a></li></ul></li><li>underscore.js<ul><li><a href="http://learningcn.com/underscore/" target="_blank" rel="noopener">Underscore.js中文文档</a></li></ul></li><li>backbone.js<ul><li><a href="http://www.css88.com/doc/backbone/" target="_blank" rel="noopener">backbone.js中文文档</a></li><li><a href="http://www.the5fire.com/backbone-js-tutorials-pdf-download.html" target="_blank" rel="noopener">backbone.js入门教程</a> (PDF)</li><li><a href="https://github.com/the5fire/backbonejs-learning-note" target="_blank" rel="noopener">Backbone.js入门教程第二版</a></li><li><a href="http://feliving.github.io/developing-backbone-applications/" target="_blank" rel="noopener">Developing Backbone.js Applications(中文版)</a></li></ul></li><li>AngularJS<ul><li><a href="https://github.com/mgechev/angularjs-style-guide/blob/master/README-zh-cn.md" target="_blank" rel="noopener">AngularJS最佳实践和风格指南</a></li><li><a href="https://github.com/peiransun/angularjs-cn" target="_blank" rel="noopener">AngularJS中译本</a></li><li><a href="https://github.com/zensh/AngularjsTutorial_cn" target="_blank" rel="noopener">AngularJS入门教程</a></li><li><a href="https://github.com/xufei/Make-Your-Own-AngularJS/blob/master/01.md" target="_blank" rel="noopener">构建自己的AngularJS</a></li><li><a href="http://www.waylau.com/build-angularjs-app-with-yeoman-in-windows/" target="_blank" rel="noopener">在Windows环境下用Yeoman构建AngularJS项目</a></li></ul></li><li>Zepto.js<ul><li><a href="http://mweb.baidu.com/zeptoapi/" target="_blank" rel="noopener">Zepto.js 中文文档</a></li></ul></li><li>Sea.js<ul><li><a href="http://island205.com/HelloSea.js/" target="_blank" rel="noopener">Hello Sea.js</a></li></ul></li><li>React.js<ul><li><a href="https://doc.react-china.org/" target="_blank" rel="noopener">React.js 中文文档</a></li><li><a href="https://github.com/fakefish/react-webpack-cookbook" target="_blank" rel="noopener">React webpack-cookbook</a></li><li><a href="http://fraserxu.me/intro-to-react/" target="_blank" rel="noopener">React 入门教程</a></li><li><a href="http://wiki.jikexueyuan.com/project/react-native/" target="_blank" rel="noopener">React Native 中文文档(含最新Android内容)</a></li><li><a href="https://github.com/theJian/build-a-hn-front-page" target="_blank" rel="noopener">Learn React &amp; Webpack by building the Hacker News front page</a></li></ul></li><li>impress.js<ul><li><a href="https://github.com/kokdemo/impress.js-tutorial-in-Chinese" target="_blank" rel="noopener">impress.js的中文教程</a></li></ul></li><li>CoffeeScript<ul><li><a href="http://island205.com/coffeescript-cookbook.github.com/" target="_blank" rel="noopener">CoffeeScript Cookbook</a></li><li><a href="http://island205.com/tlboc/" target="_blank" rel="noopener">The Little Book on CoffeeScript中文版</a></li><li><a href="https://github.com/geekplux/coffeescript-style-guide" target="_blank" rel="noopener">CoffeeScript 编码风格指南</a></li></ul></li><li>TypeScipt<ul><li><a href="https://zhongsp.gitbooks.io/typescript-handbook/content/" target="_blank" rel="noopener">TypeScript Handbook</a></li></ul></li><li>ExtJS<ul><li><a href="http://extjs-doc-cn.github.io/ext4api/" target="_blank" rel="noopener">Ext4.1.0 中文文档</a></li></ul></li><li>Meteor<ul><li><a href="http://zh.discovermeteor.com/" target="_blank" rel="noopener">Discover Meteor</a></li><li><a href="http://docs.meteorhub.org/#/basic/" target="_blank" rel="noopener">Meteor 中文文档</a></li><li><a href="http://angular.meteorhub.org/" target="_blank" rel="noopener">Angular-Meteor 中文教程</a></li></ul></li><li><a href="http://www.ituring.com.cn/minibook/950" target="_blank" rel="noopener">Chrome扩展及应用开发</a></li></ul><h3 id="-17"><a href="#-17" class="headerlink" title></a><a href="https://github.com/justjavac/free-programming-books-zh_CN#latex" target="_blank" rel="noopener"></a></h3><h4 id="LaTeX"><a href="#LaTeX" class="headerlink" title="LaTeX"></a>LaTeX</h4><ul><li><a href="http://liam0205.me/2014/09/08/latex-introduction/" target="_blank" rel="noopener">一份其实很短的 LaTeX 入门文档</a></li><li><a href="http://www.mohu.org/info/lshort-cn.pdf" target="_blank" rel="noopener">一份不太简短的 LATEX 2ε 介绍</a> （PDF版）</li></ul><h3 id="-18"><a href="#-18" class="headerlink" title></a><a href="https://github.com/justjavac/free-programming-books-zh_CN#lisp" target="_blank" rel="noopener"></a></h3><h4 id="LISP"><a href="#LISP" class="headerlink" title="LISP"></a>LISP</h4><ul><li>Common Lisp<ul><li><a href="http://acl.readthedocs.org/en/latest/" target="_blank" rel="noopener">ANSI Common Lisp 中文翻譯版</a></li><li><a href="http://www.ituring.com.cn/minibook/862" target="_blank" rel="noopener">On Lisp 中文翻译版本</a></li></ul></li><li>Scheme<ul><li><a href="http://deathking.github.io/yast-cn/" target="_blank" rel="noopener">Yet Another Scheme Tutorial Scheme入门教程</a></li><li><a href="http://songjinghe.github.io/TYS-zh-translation/" target="_blank" rel="noopener">Scheme语言简明教程</a></li><li>Racket<ul><li><a href="https://github.com/tyrchen/racket-book" target="_blank" rel="noopener">Racket book</a></li></ul></li></ul></li></ul><h3 id="-19"><a href="#-19" class="headerlink" title></a><a href="https://github.com/justjavac/free-programming-books-zh_CN#lua" target="_blank" rel="noopener"></a></h3><h4 id="Lua"><a href="#Lua" class="headerlink" title="Lua"></a>Lua</h4><ul><li><a href="https://github.com/andycai/luaprimer" target="_blank" rel="noopener">Lua编程入门</a></li><li><a href="http://www.codingnow.com/2000/download/lua_manual.html" target="_blank" rel="noopener">Lua 5.1 参考手册 中文翻译</a></li><li><a href="http://cloudwu.github.io/lua53doc/" target="_blank" rel="noopener">Lua 5.3 参考手册 中文翻译</a></li><li><a href="http://www.codingnow.com/temp/readinglua.pdf" target="_blank" rel="noopener">Lua源码欣赏</a></li></ul><h3 id="-20"><a href="#-20" class="headerlink" title></a><a href="https://github.com/justjavac/free-programming-books-zh_CN#ocaml" target="_blank" rel="noopener"></a></h3><h4 id="OCaml"><a href="#OCaml" class="headerlink" title="OCaml"></a>OCaml</h4><ul><li><a href="https://github.com/zforget/translation/tree/master/real_world_ocaml" target="_blank" rel="noopener">Real World OCaml</a></li></ul><h3 id="-21"><a href="#-21" class="headerlink" title></a><a href="https://github.com/justjavac/free-programming-books-zh_CN#perl" target="_blank" rel="noopener"></a></h3><h4 id="Perl"><a href="#Perl" class="headerlink" title="Perl"></a>Perl</h4><ul><li><a href="https://github.com/horus/modern_perl_book" target="_blank" rel="noopener">Modern Perl 中文版</a></li><li><a href="http://perl.linuxtoy.org/" target="_blank" rel="noopener">Perl 程序员应该知道的事</a></li></ul><h3 id="-22"><a href="#-22" class="headerlink" title></a><a href="https://github.com/justjavac/free-programming-books-zh_CN#php" target="_blank" rel="noopener"></a></h3><h4 id="PHP"><a href="#PHP" class="headerlink" title="PHP"></a>PHP</h4><ul><li><a href="http://php.net/manual/zh/" target="_blank" rel="noopener">PHP 官方手册</a></li><li><a href="http://www.laruence.com/2010/06/21/1608.html" target="_blank" rel="noopener">PHP调试技术手册</a>(PDF)</li><li>PHP之道：php-the-right-way (<a href="http://wulijun.github.io/php-the-right-way/" target="_blank" rel="noopener">@wulijun版</a> <a href="http://laravel-china.github.io/php-the-right-way/" target="_blank" rel="noopener">PHPHub版</a>)</li><li><a href="https://github.com/justjavac/PHP-Best-Practices-zh_CN" target="_blank" rel="noopener">PHP 最佳实践</a></li><li><a href="https://ryancao.gitbooks.io/php-developer-prepares/content/" target="_blank" rel="noopener">PHP 开发者实践</a></li><li><a href="https://github.com/reeze/tipi" target="_blank" rel="noopener">深入理解PHP内核</a></li><li><a href="http://www.walu.cc/phpbook/" target="_blank" rel="noopener">PHP扩展开发及内核应用</a></li><li><a href="http://laravel-china.org/docs/5.1" target="_blank" rel="noopener">Laravel5.1 中文文档</a></li><li><a href="https://cs.phphub.org/" target="_blank" rel="noopener">Laravel 5.1 LTS 速查表</a></li><li><a href="http://wiki.jikexueyuan.com/project/symfony-cookbook/" target="_blank" rel="noopener">Symfony2 Cookbook 中文版</a>(版本 2.7.0 LTS)</li><li><a href="http://symfony-docs-chs.readthedocs.org/en/latest/" target="_blank" rel="noopener">Symfony2中文文档</a> (未译完)</li><li><a href="http://yiibook.com//doc" target="_blank" rel="noopener">YiiBook几本Yii框架的在线教程</a></li><li><a href="http://www.digpage.com/" target="_blank" rel="noopener">深入理解 Yii 2.0</a></li><li><a href="http://www.yiichina.com/" target="_blank" rel="noopener">Yii 框架中文文檔</a></li><li><a href="http://www.nowamagic.net/librarys/books/contents/php" target="_blank" rel="noopener">简单易懂的PHP魔法</a></li><li><a href="https://github.com/LinkedDestiny/swoole-doc" target="_blank" rel="noopener">swoole文档及入门教程</a></li><li><a href="http://www.phpcomposer.com/" target="_blank" rel="noopener">Composer 中文网</a></li><li><a href="http://ww1.minimee.org/php/slim" target="_blank" rel="noopener">Slim 中文文档</a></li><li><a href="http://lumen.laravel-china.org/" target="_blank" rel="noopener">Lumen 中文文档</a></li><li><a href="https://phpunit.de/manual/current/zh_cn/installation.html" target="_blank" rel="noopener">PHPUnit 中文文档</a></li></ul><h3 id="-23"><a href="#-23" class="headerlink" title></a><a href="https://github.com/justjavac/free-programming-books-zh_CN#prolog" target="_blank" rel="noopener"></a></h3><h4 id="Prolog"><a href="#Prolog" class="headerlink" title="Prolog"></a>Prolog</h4><ul><li><a href="http://fengdidi.github.io/blog/2011/11/15/qian-yan/" target="_blank" rel="noopener">笨办法学Prolog</a></li></ul><h3 id="-24"><a href="#-24" class="headerlink" title></a><a href="https://github.com/justjavac/free-programming-books-zh_CN#python" target="_blank" rel="noopener"></a></h3><h4 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h4><ul><li><a href="http://www.liaoxuefeng.com/wiki/001374738125095c955c1e6d8bb493182103fac9270762a000" target="_blank" rel="noopener">廖雪峰 Python 2.7 中文教程</a></li><li><a href="http://www.liaoxuefeng.com/wiki/0014316089557264a6b348958f449949df42a6d3a2e542c000" target="_blank" rel="noopener">廖雪峰 Python 3 中文教程</a></li><li><a href="http://www.kuqin.com/abyteofpython_cn/" target="_blank" rel="noopener">简明Python教程</a></li><li><a href="http://www.kancloud.cn/kancloud/python-basic" target="_blank" rel="noopener">零基础学 Python 第一版</a></li><li><a href="http://www.kancloud.cn/kancloud/starter-learning-python" target="_blank" rel="noopener">零基础学 Python 第二版</a></li><li><a href="http://lovelypython.readthedocs.org/en/latest/" target="_blank" rel="noopener">可爱的 Python</a></li><li><a href="http://www.pythondoc.com/pythontutorial27/index.html" target="_blank" rel="noopener">Python 2.7 官方教程中文版</a></li><li><a href="http://www.pythondoc.com/pythontutorial3/index.html" target="_blank" rel="noopener">Python 3.3 官方教程中文版</a></li><li><a href="http://www.kancloud.cn/thinkphp/python-cookbook" target="_blank" rel="noopener">Python Cookbook 中文版</a></li><li><a href="https://github.com/yidao620c/python3-cookbook" target="_blank" rel="noopener">Python3 Cookbook 中文版</a></li><li><a href="http://www.kuqin.com/docs/diveintopythonzh-cn-5.4b/html/toc/" target="_blank" rel="noopener">深入 Python</a></li><li><a href="http://old.sebug.net/paper/books/dive-into-python3/" target="_blank" rel="noopener">深入 Python 3</a></li><li><a href="https://code.google.com/p/zhong-wiki/wiki/PEP8" target="_blank" rel="noopener">PEP8 Python代码风格规范</a></li><li><a href="http://zh-google-styleguide.readthedocs.org/en/latest/google-python-styleguide/" target="_blank" rel="noopener">Google Python 风格指南 中文版</a></li><li><a href="http://liam0205.me/2013/11/02/Python-tutorial-zh_cn/" target="_blank" rel="noopener">Python入门教程</a> (<a href="http://liam0205.me/attachment/Python/The_Python_Tutorial_zh-cn.pdf" target="_blank" rel="noopener">PDF</a>)</li><li><a href="http://old.sebug.net/paper/books/LearnPythonTheHardWay/" target="_blank" rel="noopener">笨办法学 Python</a> (<a href="http://liam0205.me/attachment/Python/PyHardWay/Learn_Python_The_Hard_Way_zh-cn.pdf" target="_blank" rel="noopener">PDF</a> <a href="https://www.gitbook.com/download/epub/book/wizardforcel/lpthw" target="_blank" rel="noopener">EPUB</a>)</li><li><a href="http://pan.baidu.com/s/1qW4pvnY" target="_blank" rel="noopener">Python自然语言处理中文版</a> （感谢陈涛同学的翻译，也谢谢 <a href="https://github.com/shwley" target="_blank" rel="noopener">@shwley</a> 联系了作者）</li><li><a href="http://liam0205.me/2014/09/11/matplotlib-tutorial-zh-cn/" target="_blank" rel="noopener">Python 绘图库 matplotlib 官方指南中文翻译</a></li><li><a href="http://scrapy-chs.readthedocs.org/zh_CN/latest/" target="_blank" rel="noopener">Scrapy 0.25 文档</a></li><li><a href="https://github.com/carfly/thinkpython-cn" target="_blank" rel="noopener">ThinkPython</a></li><li><a href="https://github.com/bingjin/ThinkPython2-CN" target="_blank" rel="noopener">ThinkPython 2ed</a></li><li><a href="http://www.cnblogs.com/vamei/archive/2012/09/13/2682778.html" target="_blank" rel="noopener">Python快速教程</a></li><li><a href="http://wiki.ubuntu.org.cn/Python%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E6%93%8D%E4%BD%9C%E6%8C%87%E5%8D%97" target="_blank" rel="noopener">Python 正则表达式操作指南</a></li><li><a href="http://www.crifan.com/files/doc/docbook/python_beginner_tutorial/release/html/python_beginner_tutorial.html" target="_blank" rel="noopener">python初级教程：入门详解</a></li><li><a href="https://www.gitbook.com/book/likebeta/twisted-intro-cn/details" target="_blank" rel="noopener">Twisted 与异步编程入门</a></li><li><a href="http://textgrocery.readthedocs.org/zh/latest/index.html" target="_blank" rel="noopener">TextGrocery 中文 API</a> ( 基于svm算法的一个短文本分类 Python 库 )</li><li><a href="http://requests-docs-cn.readthedocs.org/zh_CN/latest/" target="_blank" rel="noopener">Requests: HTTP for Humans</a></li><li><a href="http://pillow-cn.readthedocs.org/en/latest/#" target="_blank" rel="noopener">Pillow 中文文档</a></li><li><a href="http://pymotwcn.readthedocs.org/en/latest/index.html" target="_blank" rel="noopener">PyMOTW 中文版</a></li><li><a href="http://data.digitser.net/zh-CN/python_index.html" target="_blank" rel="noopener">Python 官方文档中文版</a></li><li><a href="http://fabric-chs.readthedocs.org/" target="_blank" rel="noopener">Fabric 中文文档</a></li><li><a href="http://beautifulsoup.readthedocs.org/zh_CN/latest/" target="_blank" rel="noopener">Beautiful Soup 4.2.0 中文文档</a></li><li><a href="http://old.sebug.net/paper/books/scipydoc" target="_blank" rel="noopener">用Python做科学计算</a></li><li><a href="http://www.pythondoc.com/sphinx/index.html" target="_blank" rel="noopener">Sphinx 中文文档</a></li><li><a href="https://github.com/cundi/Mastering.Python.Design.Patterns" target="_blank" rel="noopener">精通 Python 设计模式</a></li><li><a href="https://github.com/smartFlash/pySecurity" target="_blank" rel="noopener">python 安全编程教程</a></li><li><a href="https://www.gitbook.com/book/wizardforcel/sjtu-cs902-courseware/details" target="_blank" rel="noopener">程序设计思想与方法</a></li><li><a href="https://read.douban.com/ebook/16691849/" target="_blank" rel="noopener">知乎周刊·编程小白学Python</a></li><li><a href="https://github.com/cloga/scipy-lecture-notes_cn" target="_blank" rel="noopener">Scipy 讲义</a></li><li><a href="http://www.kuqin.com/docs/pythonbasic.html" target="_blank" rel="noopener">Python 学习笔记 基础篇</a></li><li><a href="http://www.kuqin.com/docs/pythonmodule.html" target="_blank" rel="noopener">Python 学习笔记 模块篇</a></li><li><a href="http://old.sebug.net/paper/books/python/%E3%80%8APython%E6%A0%87%E5%87%86%E5%BA%93%E3%80%8B%E4%B8%AD%E6%96%87%E7%89%88.pdf" target="_blank" rel="noopener">Python 标准库 中文版</a></li><li><a href="https://www.gitbook.com/book/eastlakeside/interpy-zh/details" target="_blank" rel="noopener">Python进阶</a></li><li><a href="https://wizardforcel.gitbooks.io/core-python-2e/content/" target="_blank" rel="noopener">Python 核心编程 第二版</a> CPyUG译</li><li><a href="http://pythonguidecn.readthedocs.io/zh/latest/" target="_blank" rel="noopener">Python最佳实践指南</a></li><li><a href="https://www.gitbook.com/book/wizardforcel/python-essential-tutorial/details" target="_blank" rel="noopener">Python 精要教程</a></li><li><a href="https://www.gitbook.com/book/wizardforcel/python-quant-uqer/details" target="_blank" rel="noopener">Python 量化交易教程</a></li><li>Django<ul><li><a href="http://django-chinese-docs.readthedocs.org/en/latest/" target="_blank" rel="noopener">Django 1.5 文档中文版</a> 正在翻译中</li><li><a href="http://django-1-7-doc.coding.io/" target="_blank" rel="noopener">Diango 1.7 文档中文版</a> 正在翻译中，目前只翻译了目录</li><li><a href="http://python.usyiyi.cn/django/index.html" target="_blank" rel="noopener">Django 1.8.2 文档中文版</a> 正在翻译中</li><li><a href="https://github.com/yangyubo/zh-django-best-practices" target="_blank" rel="noopener">Django 最佳实践</a></li><li><a href="https://www.gitbook.com/book/andrew-liu/django-blog/details" target="_blank" rel="noopener">Django搭建简易博客教程</a></li><li><a href="http://djangobook.py3k.cn/2.0/" target="_blank" rel="noopener">The Django Book 中文版</a></li><li><a href="https://github.com/cundi/Django-Design-Patterns-and-Best-Practices" target="_blank" rel="noopener">Django 设计模式与最佳实践</a></li><li><a href="https://github.com/cundi/Web.Development.with.Django.Cookbook" target="_blank" rel="noopener">Django 网站开发 Cookbook</a></li><li><a href="https://www.gitbook.com/book/djangogirlstaipei/django-girls-taipei-tutorial/details" target="_blank" rel="noopener">Django Girls 學習指南</a></li></ul></li><li>Flask<ul><li><a href="http://docs.jinkan.org/docs/flask/" target="_blank" rel="noopener">Flask 文档中文版</a></li><li><a href="http://docs.jinkan.org/docs/jinja2/" target="_blank" rel="noopener">Jinja2 文档中文版</a></li><li><a href="http://werkzeug-docs-cn.readthedocs.org/zh_CN/latest/" target="_blank" rel="noopener">Werkzeug 文档中文版</a></li><li><a href="http://spacewander.github.io/explore-flask-zh/" target="_blank" rel="noopener">Flask之旅</a></li><li><a href="https://www.gitbook.com/book/wizardforcel/flask-extension-docs/details" target="_blank" rel="noopener">Flask 扩展文档汇总</a></li><li><a href="http://www.pythondoc.com/flask-mega-tutorial/index.html" target="_blank" rel="noopener">Flask 大型教程</a></li><li><a href="https://github.com/sixu05202004/sqlalchemy-docs-cn" target="_blank" rel="noopener">SQLAlchemy 中文文档</a></li></ul></li><li>web.py<ul><li><a href="http://webpy.org/tutorial3.zh-cn" target="_blank" rel="noopener">web.py 0.3 新手指南</a></li><li><a href="http://webpy.org/cookbook/index.zh-cn" target="_blank" rel="noopener">Web.py Cookbook 简体中文版</a></li></ul></li><li>Tornado<ul><li><a href="http://demo.pythoner.com/itt2zh/index.html" target="_blank" rel="noopener">Introduction to Tornado 中文翻译</a></li><li><a href="http://www.nowamagic.net/academy/detail/13321002" target="_blank" rel="noopener">Tornado源码解析</a></li><li><a href="https://tornado-zh.readthedocs.org/zh/latest/" target="_blank" rel="noopener">Tornado 4.3 文档中文版</a></li></ul></li></ul><h3 id="-25"><a href="#-25" class="headerlink" title></a><a href="https://github.com/justjavac/free-programming-books-zh_CN#r" target="_blank" rel="noopener"></a></h3><h4 id="R"><a href="#R" class="headerlink" title="R"></a>R</h4><ul><li><a href="https://github.com/yihui/r-ninja" target="_blank" rel="noopener">R语言忍者秘笈</a></li></ul><h3 id="-26"><a href="#-26" class="headerlink" title></a><a href="https://github.com/justjavac/free-programming-books-zh_CN#ruby" target="_blank" rel="noopener"></a></h3><h4 id="Ruby"><a href="#Ruby" class="headerlink" title="Ruby"></a>Ruby</h4><ul><li><a href="https://github.com/JuanitoFatas/ruby-style-guide/blob/master/README-zhCN.md" target="_blank" rel="noopener">Ruby 风格指南</a></li><li><a href="https://github.com/JuanitoFatas/rails-style-guide/blob/master/README-zhCN.md" target="_blank" rel="noopener">Rails 风格指南</a></li><li><a href="http://lrthw.github.io/" target="_blank" rel="noopener">笨方法學 Ruby</a></li><li><a href="http://guides.ruby-china.org/" target="_blank" rel="noopener">Ruby on Rails 指南</a></li><li><a href="https://ihower.tw/rails4/index.html" target="_blank" rel="noopener">Ruby on Rails 實戰聖經</a></li><li><a href="http://railstutorial-china.org/" target="_blank" rel="noopener">Ruby on Rails Tutorial 原书第 3 版</a> (本书网页版免费提供，电子版以 PDF、EPub 和 Mobi 格式提供购买，仅售 9.9 美元)</li><li><a href="http://rails-practice.com/content/index.html" target="_blank" rel="noopener">Rails 实践</a></li><li><a href="https://www.gitbook.com/book/kelby/rails-beginner-s-guide/details" target="_blank" rel="noopener">Rails 5 开发进阶(Beta)</a></li><li><a href="https://www.gitbook.com/book/rocodev/rails-102/details" target="_blank" rel="noopener">Rails 102</a></li><li><a href="https://wusuopu.gitbooks.io/write-ruby-extension-with-c/content/" target="_blank" rel="noopener">编写Ruby的C拓展</a></li><li><a href="https://ruby-china.org/topics/22386" target="_blank" rel="noopener">Ruby 源码解读</a></li><li><a href="http://deathking.github.io/metaprogramming-in-ruby/" target="_blank" rel="noopener">Ruby中的元编程</a></li></ul><h3 id="-27"><a href="#-27" class="headerlink" title></a><a href="https://github.com/justjavac/free-programming-books-zh_CN#rust" target="_blank" rel="noopener"></a></h3><h4 id="Rust"><a href="#Rust" class="headerlink" title="Rust"></a>Rust</h4><ul><li><a href="https://www.gitbook.com/book/kaisery/rust-book-chinese/details" target="_blank" rel="noopener">rust book 中文翻译</a></li><li><a href="https://github.com/rustcc/RustPrimer" target="_blank" rel="noopener">rust primer</a></li></ul><h3 id="-28"><a href="#-28" class="headerlink" title></a><a href="https://github.com/justjavac/free-programming-books-zh_CN#scala" target="_blank" rel="noopener"></a></h3><h4 id="Scala"><a href="#Scala" class="headerlink" title="Scala"></a>Scala</h4><ul><li><a href="http://twitter.github.io/scala_school/zh_cn/index.html" target="_blank" rel="noopener">Scala课堂</a> (Twitter的Scala中文教程)</li><li><a href="http://twitter.github.io/effectivescala/index-cn.html" target="_blank" rel="noopener">Effective Scala</a>(Twitter的Scala最佳实践的中文翻译)</li><li><a href="http://zh.scala-tour.com/" target="_blank" rel="noopener">Scala指南</a></li></ul><h3 id="-29"><a href="#-29" class="headerlink" title></a><a href="https://github.com/justjavac/free-programming-books-zh_CN#shell" target="_blank" rel="noopener"></a></h3><h4 id="Shell"><a href="#Shell" class="headerlink" title="Shell"></a>Shell</h4><ul><li><a href="https://github.com/qinjx/30min_guides/blob/master/shell.md" target="_blank" rel="noopener">Shell脚本编程30分钟入门</a></li><li><a href="http://blog.sae.sina.com.cn/archives/3606" target="_blank" rel="noopener">Bash脚本15分钟进阶教程</a></li><li><a href="https://github.com/me115/linuxtools_rst" target="_blank" rel="noopener">Linux工具快速教程</a></li><li><a href="https://github.com/wzb56/13_questions_of_shell" target="_blank" rel="noopener">shell十三问</a></li><li><a href="https://www.gitbook.com/book/tinylab/shellbook/details" target="_blank" rel="noopener">Shell编程范例</a></li></ul><h3 id="-30"><a href="#-30" class="headerlink" title></a><a href="https://github.com/justjavac/free-programming-books-zh_CN#swift" target="_blank" rel="noopener"></a></h3><h4 id="Swift"><a href="#Swift" class="headerlink" title="Swift"></a>Swift</h4><ul><li><a href="http://numbbbbb.github.io/the-swift-programming-language-in-chinese/" target="_blank" rel="noopener">The Swift Programming Language 中文版</a></li><li><a href="http://dev.swiftguide.cn/" target="_blank" rel="noopener">Swift 语言指南</a></li><li><a href="https://github.com/x140yu/Developing_iOS_8_Apps_With_Swift" target="_blank" rel="noopener">Stanford 公开课，Developing iOS 8 Apps with Swift 字幕翻译文件</a></li><li><a href="http://c4ios.swift.gg/" target="_blank" rel="noopener">C4iOS - COSMOS</a></li></ul><h1 id="读书笔记及其它"><a href="#读书笔记及其它" class="headerlink" title="读书笔记及其它"></a>读书笔记及其它</h1><ul><li><a href="https://github.com/fool2fish/dragon-book-exercise-answers" target="_blank" rel="noopener">编译原理（紫龙书）中文第2版习题答案</a></li><li><a href="http://www.hawstein.com/posts/make-thiner-programming-pearls.html" target="_blank" rel="noopener">把《编程珠玑》读薄</a></li><li><a href="https://github.com/XiaolongJason/ReadingNote/blob/master/Effective%20C%2B%2B/Effective%20C%2B%2B.md" target="_blank" rel="noopener">Effective C++读书笔记</a></li><li><a href="https://github.com/qyuhen/book" target="_blank" rel="noopener">Golang 学习笔记、Python 学习笔记、C 学习笔记</a> (PDF)</li><li><a href="https://github.com/code4craft/jsoup-learning" target="_blank" rel="noopener">Jsoup 学习笔记</a></li><li><a href="https://github.com/lzjun567/note" target="_blank" rel="noopener">学习笔记: Vim、Python、memcached</a></li><li><a href="http://www.ituring.com.cn/activity/details/2004" target="_blank" rel="noopener">图灵开放书翻译计划–C++、Python、Java等</a></li><li><a href="http://g.yeeyan.org/books/2095" target="_blank" rel="noopener">蒂姆·奥莱利随笔</a> （由译言网翻译，电子版免费）</li><li><a href="http://sicp.readthedocs.org/en/latest/" target="_blank" rel="noopener">SICP 解题集</a></li><li><a href="https://github.com/hacke2/hacke2.github.io/issues/2" target="_blank" rel="noopener">精彩博客集合</a></li><li><a href="https://github.com/sparanoid/chinese-copywriting-guidelines" target="_blank" rel="noopener">中文文案排版指北</a></li><li><a href="http://ganquan.info/standard-c/" target="_blank" rel="noopener">Standard C 语言标准函数库速查 (Cheat Sheet)</a></li><li><a href="http://gh.amio.us/git-cheatsheet-chs/" target="_blank" rel="noopener">Git Cheatsheet Chs</a></li><li><a href="http://www.chengweiyang.cn/gitbook/index.html" target="_blank" rel="noopener">GitBook简明教程</a></li><li><a href="https://github.com/qibaoguang/Study-Step-by-Step/blob/master/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/javascript_the_good_parts.md" target="_blank" rel="noopener">JavaScript语言精粹</a></li><li><a href="http://producingoss.com/zh/" target="_blank" rel="noopener">制造开源软件</a></li><li><a href="http://www.dianbo.org/9238/stone/tiwendezhihui.htm" target="_blank" rel="noopener">提问的智慧</a></li><li><a href="https://github.com/LearnShare/Learning-Markdown" target="_blank" rel="noopener">Markdown 入门参考</a></li><li><a href="https://github.com/stanzgy/wiki/blob/master/markup/asciidoc-guide.asciidoc" target="_blank" rel="noopener">AsciiDoc简明指南</a></li><li><a href="http://love-oriented.com/pack/" target="_blank" rel="noopener">背包问题九讲</a></li><li><a href="https://github.com/qiwsir/ITArticles" target="_blank" rel="noopener">老齐的技术资料</a></li><li><a href="https://github.com/JacksonTian/fks" target="_blank" rel="noopener">前端技能汇总</a></li><li><a href="https://github.com/zhuangbiaowei/learn-with-open-source" target="_blank" rel="noopener">借助开源项目，学习软件开发</a></li><li><a href="https://github.com/h5bp/Front-end-Developer-Interview-Questions/tree/master/Translations/Chinese" target="_blank" rel="noopener">前端工作面试问题</a></li><li><a href="https://www.gitbook.com/book/yuanbin/algorithm/details" target="_blank" rel="noopener">leetcode/lintcode题解/算法学习笔记</a></li><li><a href="https://github.com/li-xinyang/FEND_Note" target="_blank" rel="noopener">前端开发笔记本</a></li></ul><p>最后附上justjavac大神的笔记:</p><ul><li><a href="https://shenbao.github.io/2017/04/22/justjavac-live/" target="_blank" rel="noopener">[笔记]前端工程师的入门与进阶</a>💯</li><li><a href="https://github.com/i5ting/How-to-learn-node-correctly" target="_blank" rel="noopener">[全文]如何正确的学习 Node.js</a>💯</li></ul><h3 id="若涉及版权问题-请及时联系作者删除-再次感谢justjavac"><a href="#若涉及版权问题-请及时联系作者删除-再次感谢justjavac" class="headerlink" title="若涉及版权问题,请及时联系作者删除,再次感谢justjavac"></a><code>若涉及版权问题,请及时联系作者删除,再次感谢justjavac</code></h3><h3 id="请赏个小红心！因为你的鼓励是我写作的最大动力！"><a href="#请赏个小红心！因为你的鼓励是我写作的最大动力！" class="headerlink" title="请赏个小红心！因为你的鼓励是我写作的最大动力！"></a>请赏个小红心！因为你的鼓励是我写作的最大动力！</h3><blockquote><p>更多精彩文章请关注</p><ul><li><a href="http://www.darryrzhong.xyz" target="_blank" rel="noopener">个人博客:darryrzhong</a></li><li><a href="https://juejin.im/user/5a6c3b19f265da3e49804988" target="_blank" rel="noopener">掘金</a></li><li><a href="https://www.jianshu.com/users/b7fdf53ec0b9/timeline" target="_blank" rel="noopener">简书</a></li><li><a href="https://segmentfault.com/u/darryrzhong_5ac59892a5882" target="_blank" rel="noopener">SegmentFault</a></li><li><a href="https://www.imooc.com/u/6733207" target="_blank" rel="noopener">慕课网手记</a></li></ul></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;你想要的干货，都在这里哟！&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;免费的计算机编程类中文书籍&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;p&gt;###&lt;code&gt;摘自:github上由justjavac整理的free-programming-books-zh_CN(免费的计算机编程类中文书籍)觉得不错的可以去star和fork一下哟!&lt;/code&gt;&lt;/p&gt;
&lt;h1 id=&quot;写在最前面的话&quot;&gt;&lt;a href=&quot;#写在最前面的话&quot; class=&quot;headerlink&quot; title=&quot;写在最前面的话&quot;&gt;&lt;/a&gt;写在最前面的话&lt;/h1&gt;&lt;p&gt;首先声明,本篇博文并非本人原创,而是摘自github上大神&lt;code&gt;justjavac&lt;/code&gt;发起并整理的&lt;code&gt;free-programming-books-zh_CN&lt;/code&gt;(免费的计算机编程类中文书籍)开源项目,旨在帮助不经常逛github的童鞋发掘优质的学习干货,节省学习时间成本.最后再次感谢&lt;code&gt;justjavac&lt;/code&gt;的整理与分享.&lt;/p&gt;
&lt;h1 id=&quot;目录&quot;&gt;&lt;a href=&quot;#目录&quot; class=&quot;headerlink&quot; title=&quot;目录&quot;&gt;&lt;/a&gt;目录&lt;/h1&gt;&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;语言无关类&lt;ul&gt;
&lt;li&gt;操作系统&lt;/li&gt;
&lt;li&gt;智能系统&lt;/li&gt;
&lt;li&gt;分布式系统&lt;/li&gt;
&lt;li&gt;编译原理&lt;/li&gt;
&lt;li&gt;函数式概念&lt;/li&gt;
&lt;li&gt;计算机图形学&lt;/li&gt;
&lt;li&gt;WEB服务器&lt;/li&gt;
&lt;li&gt;版本控制&lt;/li&gt;
&lt;li&gt;编辑器&lt;/li&gt;
&lt;li&gt;NoSQL&lt;/li&gt;
&lt;li&gt;PostgreSQL&lt;/li&gt;
&lt;li&gt;MySQL&lt;/li&gt;
&lt;li&gt;管理和监控&lt;/li&gt;
&lt;li&gt;项目相关&lt;/li&gt;
&lt;li&gt;设计模式&lt;/li&gt;
&lt;li&gt;Web&lt;/li&gt;
&lt;li&gt;大数据&lt;/li&gt;
&lt;li&gt;编程艺术&lt;/li&gt;
&lt;li&gt;其他&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;语言相关类&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Android&lt;/li&gt;
&lt;li&gt;App&lt;/li&gt;
&lt;li&gt;AWK&lt;/li&gt;
&lt;li&gt;C/C++&lt;/li&gt;
&lt;li&gt;C#&lt;/li&gt;
&lt;li&gt;Clojure&lt;/li&gt;
&lt;li&gt;CSS/HTML&lt;/li&gt;
&lt;li&gt;Dart&lt;/li&gt;
&lt;li&gt;Elixir&lt;/li&gt;
&lt;li&gt;Erlang&lt;/li&gt;
&lt;li&gt;Fortran&lt;/li&gt;
&lt;li&gt;Go&lt;/li&gt;
&lt;li&gt;Groovy&lt;/li&gt;
&lt;li&gt;Haskell&lt;/li&gt;
&lt;li&gt;IOS&lt;/li&gt;
&lt;li&gt;Java&lt;/li&gt;
&lt;li&gt;JavaScript&lt;ul&gt;
&lt;li&gt;LaTeX&lt;/li&gt;
&lt;li&gt;LISP&lt;/li&gt;
&lt;li&gt;Lua&lt;/li&gt;
&lt;li&gt;OCaml&lt;/li&gt;
&lt;li&gt;Perl&lt;/li&gt;
&lt;li&gt;PHP&lt;/li&gt;
&lt;li&gt;Prolog&lt;/li&gt;
&lt;li&gt;Python&lt;/li&gt;
&lt;li&gt;R&lt;/li&gt;
&lt;li&gt;Ruby&lt;/li&gt;
&lt;li&gt;Rust&lt;/li&gt;
&lt;li&gt;Scala&lt;/li&gt;
&lt;li&gt;Shell&lt;/li&gt;
&lt;li&gt;Swift&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;读书笔记及其他&lt;/li&gt;
&lt;li&gt;测试相关&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="编程资料" scheme="http://darryrzhong.xyz/categories/%E7%BC%96%E7%A8%8B%E8%B5%84%E6%96%99/"/>
    
    
      <category term="计算机相关" scheme="http://darryrzhong.xyz/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/"/>
    
  </entry>
  
</feed>
